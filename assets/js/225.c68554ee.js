(window.webpackJsonp=window.webpackJsonp||[]).push([[225],{723:function(t,s,a){"use strict";a.r(s);var n=a(2),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[a("img",{attrs:{src:"https://img.starfish.ink/common/faq-banner.png",alt:""}})]),t._v(" "),a("blockquote",[a("p",[t._v("Java并发编程是面试中"),a("strong",[t._v("最具技术含量")]),t._v("的部分，也是区分初级和高级开发者的重要标准。从基础的线程创建到复杂的JMM内存模型，从synchronized关键字到Lock接口的实现原理，每一个知识点都可能成为面试官深挖的切入点。掌握并发编程，不仅是面试利器，更是高性能系统开发的基石。")]),t._v(" "),a("p",[t._v("JUC 面试，围绕着这么几个方向准备")]),t._v(" "),a("ul",[a("li",[t._v("多线程的一些概念（进程、线程、并行、并发啥的，谈谈你对高并发的认识）")]),t._v(" "),a("li",[t._v("Java 内存模型相关（也可以算是 JVM 的范畴）")]),t._v(" "),a("li",[t._v("同步机制（locks、synchronzied、atomic）")]),t._v(" "),a("li",[t._v("并发容器类\n"),a("ul",[a("li",[t._v("ConcurrentHashMap、CopyOnWriteArrayList、CopyOnWriteArraySet")]),t._v(" "),a("li",[t._v("阻塞队列（顺着就会问到线程池）")])])]),t._v(" "),a("li",[t._v("线程池（Executor、Callable 、Future、ExecutorService等等，底层原理）")]),t._v(" "),a("li",[t._v("AQS\n"),a("ul",[a("li",[t._v("AQS 原理")]),t._v(" "),a("li",[t._v("工具类：CountDownLatch、ReentrantLock、Semaphore、Exchanger")])])]),t._v(" "),a("li",[t._v("atomic 类（atomic常用类，方法，到 CAS，或者 ABA问题）")]),t._v(" "),a("li",[t._v("Fork/Join并行计算框架")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img.starfish.ink/common/juc-faq.png",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"🗺️-知识导航"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🗺️-知识导航"}},[t._v("#")]),t._v(" 🗺️ 知识导航")]),t._v(" "),a("h3",{attrs:{id:"🏷️-核心知识分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🏷️-核心知识分类"}},[t._v("#")]),t._v(" 🏷️ 核心知识分类")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("🧵 线程基础")]),t._v("：创建方式、生命周期、线程状态、线程安全、ThreadLocal、进程vs线程、并发vs并行")]),t._v(" "),a("li",[a("strong",[t._v("🔒 同步关键字")]),t._v("：synchronized原理、volatile特性、锁升级、偏向锁、轻量级锁、重量级锁")]),t._v(" "),a("li",[a("strong",[t._v("🏛️ 锁机制与AQS")]),t._v("：ReentrantLock、读写锁、AQS框架、公平锁vs非公平锁、死锁问题")]),t._v(" "),a("li",[a("strong",[t._v("⚛️ 原子操作与CAS")]),t._v("：CAS机制、ABA问题、AtomicInteger、LongAdder、无锁编程")]),t._v(" "),a("li",[a("strong",[t._v("🛠️ 并发工具类")]),t._v("：CountDownLatch、CyclicBarrier、Semaphore、Exchanger、线程间通信")]),t._v(" "),a("li",[a("strong",[t._v("🏊 线程池详解")]),t._v("：ThreadPoolExecutor七大参数、工作原理、拒绝策略、参数配置、性能优化")]),t._v(" "),a("li",[a("strong",[t._v("🧠 Java内存模型")]),t._v("：JMM规范、主内存vs工作内存、happen-before原则、内存屏障、三大特性")]),t._v(" "),a("li",[a("strong",[t._v("📦 并发容器")]),t._v("：ConcurrentHashMap、CopyOnWriteArrayList、BlockingQueue、同步容器vs并发容器")]),t._v(" "),a("li",[a("strong",[t._v("🚀 高级并发工具")]),t._v("：ForkJoinPool工作窃取、CompletableFuture异步编程、ThreadLocal原理")]),t._v(" "),a("li",[a("strong",[t._v("🎯 并发应用实践")]),t._v("：订票系统高并发、网站架构设计、无锁化编程、生产者消费者模式、最佳实践")])]),t._v(" "),a("h3",{attrs:{id:"🔑-面试话术模板"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🔑-面试话术模板"}},[t._v("#")]),t._v(" 🔑 面试话术模板")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("问题类型")])]),t._v(" "),a("th",[a("strong",[t._v("回答框架")])]),t._v(" "),a("th",[a("strong",[t._v("关键要点")])]),t._v(" "),a("th",[a("strong",[t._v("深入扩展")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("机制原理")])]),t._v(" "),a("td",[t._v("背景→实现→特点→应用")]),t._v(" "),a("td",[t._v("底层实现机制")]),t._v(" "),a("td",[t._v("源码分析、JVM层面")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("性能对比")])]),t._v(" "),a("td",[t._v("场景→测试→数据→结论")]),t._v(" "),a("td",[t._v("量化性能差异")]),t._v(" "),a("td",[t._v("实际项目经验")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("并发问题")])]),t._v(" "),a("td",[t._v("问题→原因→解决→预防")]),t._v(" "),a("td",[t._v("线程安全分析")]),t._v(" "),a("td",[t._v("最佳实践模式")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("工具选择")])]),t._v(" "),a("td",[t._v("需求→特点→适用→示例")]),t._v(" "),a("td",[t._v("使用场景对比")]),t._v(" "),a("td",[t._v("源码实现原理")])])])]),t._v(" "),a("h2",{attrs:{id:"一、线程基础🧵"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、线程基础🧵"}},[t._v("#")]),t._v(" 一、线程基础🧵")]),t._v(" "),a("h3",{attrs:{id:"🎯-进程和线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-进程和线程"}},[t._v("#")]),t._v(" 🎯 进程和线程？")]),t._v(" "),a("p",[t._v("进程是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行一个程序即是一个进程从创建，运行到消亡的过程。")]),t._v(" "),a("p",[t._v("线程是进程中的一个执行单元。")]),t._v(" "),a("p",[t._v("线程是进程的子集，一个进程可以有很多线程，每条线程并行执行不同的任务。不同的进程使用不同的内存空间，而所有的线程共享一片相同的内存空间。")]),t._v(" "),a("p",[t._v("在 Java 中，当我们启动 main 函数时其实就是启动了一个 JVM 的进程，而 main 函数所在的线程就是这个进程中的一个线程，也称主线程。")]),t._v(" "),a("p",[a("strong",[t._v("为什么要用多线程而不是多进程？")])]),t._v(" "),a("ul",[a("li",[t._v("线程更轻量，切换开销小，通信更高效。")]),t._v(" "),a("li",[t._v("适合 I/O 密集型、CPU 密集型应用。")])]),t._v(" "),a("h3",{attrs:{id:"🎯-了解协程么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-了解协程么"}},[t._v("#")]),t._v(" 🎯 了解协程么？")]),t._v(" "),a("p",[a("strong",[t._v("协程是用户态的轻量级线程")]),t._v("，由程序主动控制切换（而非操作系统调度），"),a("strong",[t._v("单线程可运行多个协程")]),t._v("，适合处理高并发、IO 密集型场景。\n"),a("em",[t._v("类比记忆")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("线程是 “操作系统管理的工人”，协程是 “工人（线程）手下的临时工”—— 工人自己安排临时工干活，减少找老板（操作系统）调度的开销。")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("对比维度")])]),t._v(" "),a("th",[a("strong",[t._v("协程")])]),t._v(" "),a("th",[a("strong",[t._v("线程")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("调度层")])]),t._v(" "),a("td",[t._v("用户态（编程语言 / 框架控制）")]),t._v(" "),a("td",[t._v("内核态（操作系统内核调度）")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("创建成本")])]),t._v(" "),a("td",[t._v("极低（纳秒级，内存消耗小）")]),t._v(" "),a("td",[t._v("较高（毫秒级，需分配独立栈内存）")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("适用场景")])]),t._v(" "),a("td",[t._v("IO 密集型（如网络请求、数据库操作）")]),t._v(" "),a("td",[t._v("CPU 密集型（如复杂计算）")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("典型框架")])]),t._v(" "),a("td",[t._v("Kotlin 协程、Quarkus Vert.x、Spring WebFlux")]),t._v(" "),a("td",[t._v("原生 Java 线程、线程池（ExecutorService）")])])])]),t._v(" "),a("p",[a("strong",[t._v("Java 中的协程支持")])]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("现状")]),t._v("：\n"),a("ul",[a("li",[t._v("Java 标准库目前"),a("strong",[t._v("无原生协程支持")]),t._v("，需通过框架或语言扩展实现。")]),t._v(" "),a("li",[t._v("主流方案：\n"),a("ul",[a("li",[a("strong",[t._v("Kotlin 协程")]),t._v("：通过 JVM 字节码与 Java 互操作（如在 Spring Boot 中混合使用）。")]),t._v(" "),a("li",[a("strong",[t._v("Quarkus")]),t._v("：基于 SmallRye Mutiny 实现响应式编程，底层用协程优化 IO 操作。")]),t._v(" "),a("li",[a("strong",[t._v("Loom 项目（实验性）")]),t._v("：JDK 19 引入轻量级线程（Virtual Threads），类似协程但由 JVM 管理调度。")])])])])]),t._v(" "),a("li",[a("strong",[t._v("未来趋势")]),t._v("：\n"),a("ul",[a("li",[t._v("Loom 项目的虚拟线程可能在未来 JDK 版本中正式转正，成为 Java 协程的替代方案。")])])])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("协程的目的")])]),t._v(" "),a("p",[t._v("在传统的J2EE系统中都是基于每个请求占用一个线程去完成完整的业务逻辑（包括事务）。所以系统的吞吐能力取决于每个线程的操作耗时。如果遇到很耗时的I/O行为，则整个系统的吞吐立刻下降，因为这个时候线程一直处于阻塞状态，如果线程很多的时候，会存在很多线程处于空闲状态（等待该线程执行完才能执行），造成了资源应用不彻底。")]),t._v(" "),a("p",[t._v("最常见的例子就是JDBC（它是同步阻塞的），这也是为什么很多人都说数据库是瓶颈的原因。这里的耗时其实是让CPU一直在等待I/O返回，说白了线程根本没有利用CPU去做运算，而是处于空转状态。而另外过多的线程，也会带来更多的ContextSwitch开销。")]),t._v(" "),a("p",[t._v("对于上述问题，现阶段行业里的比较流行的解决方案之一就是单线程加上异步回调。其代表派是node.js以及Java里的Vert.x。")]),t._v(" "),a("p",[t._v("而协程的目的就是当出现长时间的I/O操作时，通过让出目前的协程调度，执行下一个任务的方式，来消除ContextSwitch上的开销。")]),t._v(" "),a("p",[t._v("协程（Coroutine）是一种比线程更轻量的并发处理单元，主要特点是它们可以在一个线程内非阻塞地切换。协程与线程的区别在于：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("线程")]),t._v("由操作系统调度，切换需要系统调用（较高开销）。")]),t._v(" "),a("li",[a("strong",[t._v("协程")]),t._v("由应用程序自己调度，切换仅是函数调用（较低开销）。")])]),t._v(" "),a("p",[a("strong",[t._v("协程的特点")])]),t._v(" "),a("ol",[a("li",[t._v("线程的切换由操作系统负责调度，协程由用户自己进行调度，因此减少了上下文切换，提高了效率。")]),t._v(" "),a("li",[t._v("线程的默认Stack大小是1M，而协程更轻量，接近1K。因此可以在相同的内存中开启更多的协程。")]),t._v(" "),a("li",[t._v("由于在同一个线程上，因此可以避免竞争关系而使用锁。")]),t._v(" "),a("li",[t._v("适用于被阻塞的，且需要大量并发的场景。但不适用于大量计算的多线程，遇到此种情况，更好实用线程去解决。")])]),t._v(" "),a("p",[a("strong",[t._v("协程的原理")])]),t._v(" "),a("p",[t._v("当出现IO阻塞的时候，由协程的调度器进行调度，通过将数据流立刻yield掉（主动让出），并且记录当前栈上的数据，阻塞完后立刻再通过线程恢复栈，并把阻塞的结果放到这个线程上去跑，这样看上去好像跟写同步代码没有任何差别，这整个流程可以称为coroutine，而跑在由"),a("code",[t._v("coroutine")]),t._v("负责调度的线程称为"),a("code",[t._v("Fiber")]),t._v("。比如Golang里的 go关键字其实就是负责开启一个"),a("code",[t._v("Fiber")]),t._v("，让"),a("code",[t._v("func")]),t._v("逻辑跑在上面。")]),t._v(" "),a("p",[t._v("由于协程的暂停完全由程序控制，发生在用户态上；而线程的阻塞状态是由操作系统内核来进行切换，发生在内核态上。\n因此，协程的开销远远小于线程的开销，也就没有了ContextSwitch上的开销。")]),t._v(" "),a("p",[a("strong",[t._v("1. 协程的核心概念")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("协作式调度")]),t._v("：\n协程通过显式的 "),a("code",[t._v("yield")]),t._v(" 或 "),a("code",[t._v("suspend")]),t._v(" 语句让出执行权，而不是由操作系统抢占式调度。")]),t._v(" "),a("li",[a("strong",[t._v("共享线程")]),t._v("：\n多个协程可以运行在同一个线程中，且它们共享该线程的栈空间。")])]),t._v(" "),a("p",[a("strong",[t._v("2. 协程的实现")])]),t._v(" "),a("p",[t._v("协程的实现可以基于以下机制：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("状态保存")]),t._v("：协程在挂起时会保存当前的执行状态，包括程序计数器和局部变量。")]),t._v(" "),a("li",[a("strong",[t._v("调度器")]),t._v("：负责管理协程的调度，比如哪个协程运行，哪个挂起。")]),t._v(" "),a("li",[a("strong",[t._v("栈帧管理")]),t._v("：协程通常以轻量的栈帧形式运行，其栈比线程栈更小，支持更高的并发量。")])])]),t._v(" "),a("h3",{attrs:{id:"🎯-说说并发与并行的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-说说并发与并行的区别"}},[t._v("#")]),t._v(" 🎯 说说并发与并行的区别?")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("并发：")]),t._v(" 同一时间段，多个任务都在执行 (单位时间内不一定同时执行)；")]),t._v(" "),a("li",[a("strong",[t._v("并行：")]),t._v(" 单位时间内，多个任务同时执行。")])]),t._v(" "),a("h3",{attrs:{id:"🎯-说下同步、异步、阻塞和非阻塞"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-说下同步、异步、阻塞和非阻塞"}},[t._v("#")]),t._v(" 🎯 说下同步、异步、阻塞和非阻塞？")]),t._v(" "),a("p",[t._v("同步和异步两个概念与消息的通知机制有关。也就是"),a("strong",[t._v("同步与异步主要是从消息通知机制角度来说的")]),t._v("。")]),t._v(" "),a("p",[t._v("阻塞和非阻塞这两个概念与程序（线程）等待消息通知(无所谓同步或者异步)时的"),a("strong",[t._v("状态")]),t._v("有关。也就是说"),a("strong",[t._v("阻塞与非阻塞主要是程序（线程）等待消息通知时的状态角度来说的")])]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("同步（Sync）")]),t._v("：调用者需等待结果返回，全程 “亲自参与” 任务执行。")]),t._v(" "),a("li",[a("strong",[t._v("异步（Async）")]),t._v(" "),a("strong",[t._v("调用者无需等待结果")]),t._v("，任务交予后台处理，通过回调 / 通知获取结果。\n"),a("em",[t._v("例：点外卖后无需一直等餐，配送完成会电话通知。")])]),t._v(" "),a("li",[a("strong",[t._v("阻塞（Block）")]),t._v(" "),a("strong",[t._v("线程发起请求后被挂起")]),t._v("，无法执行其他操作，直到结果返回。\n"),a("em",[t._v("例：单线程程序中，调用"),a("code",[t._v("InputStream.read()")]),t._v("时，线程会一直等待数据可读。")])]),t._v(" "),a("li",[a("strong",[t._v("非阻塞（Non-Block）")]),t._v(" "),a("strong",[t._v("线程发起请求后立即返回")]),t._v("，可继续执行其他任务（需轮询或回调处理结果）。\n"),a("em",[t._v("例：多线程程序中，调用"),a("code",[t._v("SocketChannel.read()")]),t._v("时，若数据不可读立即返回"),a("code",[t._v("-1")]),t._v("，线程可处理其他通道。")])])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("对比维度")])]),t._v(" "),a("th",[a("strong",[t._v("同步 vs 异步")])]),t._v(" "),a("th",[a("strong",[t._v("阻塞 vs 非阻塞")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("核心区别")])]),t._v(" "),a("td",[a("strong",[t._v("任务执行方式")]),t._v("：是否亲自处理")]),t._v(" "),a("td",[a("strong",[t._v("线程状态")]),t._v("：是否被挂起（能否干别的）")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("典型场景")])]),t._v(" "),a("td",[t._v("- 同步：Servlet 单线程处理请求 - 异步：Spring "),a("code",[t._v("@Async")]),t._v(" 注解")]),t._v(" "),a("td",[t._v("- 阻塞：BIO 模型 - 非阻塞：NIO 模型")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("组合关系")])]),t._v(" "),a("td",[t._v("可交叉组合，共 4 种模式： "),a("strong",[t._v("同步阻塞（BIO）")]),t._v("、"),a("strong",[t._v("同步非阻塞（NIO 轮询）")]),t._v("、 "),a("strong",[t._v("异步阻塞（少见）")]),t._v("、"),a("strong",[t._v("异步非阻塞（AIO）")])]),t._v(" "),a("td",[t._v("无直接关联，需结合具体场景分析")])])])]),t._v(" "),a("p",[t._v("阻塞调用是指调用结果返回之前，当前线程会被挂起，一直处于等待消息通知，不能够执行其他业务。函数只有在得到结果之后才会返回")]),t._v(" "),a("p",[a("strong",[t._v("有人也许会把阻塞调用和同步调用等同起来，实际上它们是不同的。")])]),t._v(" "),a("p",[t._v("对于同步调用来说，很多时候当前线程可能还是激活的，只是从逻辑上当前函数没有返回而已，此时，这个线程可能也会处理其他的消息")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("如果这个线程在等待当前函数返回时，仍在执行其他消息处理，那这种情况就叫做同步非阻塞；")])]),t._v(" "),a("li",[a("p",[t._v("如果这个线程在等待当前函数返回时，没有执行其他消息处理，而是处于挂起等待状态，那这种情况就叫做同步阻塞；")])])]),t._v(" "),a("p",[t._v("所以同步的实现方式会有两种：同步阻塞、同步非阻塞；同理，异步也会有两种实现：异步阻塞、异步非阻塞")]),t._v(" "),a("blockquote",[a("h4",{attrs:{id:"bio、nio、aio-分别属于哪种模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bio、nio、aio-分别属于哪种模型"}},[t._v("#")]),t._v(" “BIO、NIO、AIO 分别属于哪种模型？”")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("BIO（Blocking IO）")]),t._v(" = 同步阻塞（最传统，线程易阻塞浪费资源）。")]),t._v(" "),a("li",[a("strong",[t._v("NIO（Non-Blocking IO）")]),t._v(" = 同步非阻塞（通过选择器 Selector 实现线程非阻塞，需手动轮询结果）。")]),t._v(" "),a("li",[a("strong",[t._v("AIO（Asynchronous IO）")]),t._v(" = 异步非阻塞（JDK 7 引入，后台自动完成 IO 操作，回调通知结果）。")])])]),t._v(" "),a("h3",{attrs:{id:"🎯-什么是线程安全和线程不安全"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-什么是线程安全和线程不安全"}},[t._v("#")]),t._v(" 🎯 什么是线程安全和线程不安全？")]),t._v(" "),a("p",[t._v("通俗的说：加锁的就是线程安全的，不加锁的就是线程不安全的")]),t._v(" "),a("p",[a("strong",[t._v("线程安全: "),a("strong",[t._v("线程安全")]),t._v("指的是当多个线程同时访问某个共享资源或执行某个方法时，不会引发竞态条件（race condition）等问题。线程安全的代码确保多个线程能够")]),t._v("安全且正确地访问资源，即无论系统的调度如何，最终的结果总是符合预期")]),t._v(" "),a("blockquote",[a("p",[t._v("如何实现线程安全：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("加锁机制")]),t._v("：常见的是通过使用锁（"),a("code",[t._v("synchronized")]),t._v("、"),a("code",[t._v("Lock")]),t._v(" 等），确保同一时间只有一个线程能够访问共享资源。")]),t._v(" "),a("li",[a("strong",[t._v("原子操作")]),t._v("：使用原子性操作或工具类，如 Java 中的 "),a("code",[t._v("AtomicInteger")]),t._v("，可以确保线程间的操作是不可分割的，避免了竞态条件。")]),t._v(" "),a("li",[a("strong",[t._v("不可变对象")]),t._v("：如果数据本身是不可变的，那么它自然是线程安全的，因为任何线程都只能读取，而不会修改数据。")])])]),t._v(" "),a("p",[a("strong",[t._v("线程不安全：就是不提供数据访问保护，有可能出现多个线程先后更改数据造成所得到的数据是脏数据")])]),t._v(" "),a("p",[t._v("线程安全问题都是由全局变量及静态变量引起的。 若每个线程中对全局变量、静态变量只有读操作，而无写操作，一般来说，这个全局变量是线程安全的；若有多个线程同时执行写操作，一般都需要考虑线程同步，否则的话就可能影响线程安全。")]),t._v(" "),a("h3",{attrs:{id:"🎯-哪些场景需要额外注意线程安全问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-哪些场景需要额外注意线程安全问题"}},[t._v("#")]),t._v(" 🎯 哪些场景需要额外注意线程安全问题？")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("共享资源访问")]),t._v("：当多个线程访问同一个可变对象或变量时，需要确保线程安全，防止数据不一致。")]),t._v(" "),a("li",[t._v("依赖时序的操作")]),t._v(" "),a("li",[a("strong",[t._v("可变对象的并发修改")]),t._v("：如果一个对象的状态可以被多个线程修改，需要同步访问以避免竞态条件。")]),t._v(" "),a("li",[a("strong",[t._v("集合的并发操作")]),t._v("：向集合添加、删除或修改元素时，如果集合是共享的，需要使用线程安全的集合类或同步机制。")]),t._v(" "),a("li",[a("strong",[t._v("静态字段和单例模式")]),t._v("：静态字段和单例实例可能被多个线程访问，需要特别注意初始化和访问的线程安全。")]),t._v(" "),a("li",[a("strong",[t._v("并发数据结构操作")]),t._v("：使用如"),a("code",[t._v("ConcurrentHashMap")]),t._v("等并发集合时，虽然提供了更好的线程安全性，但在某些复合操作上仍需注意同步。")]),t._v(" "),a("li",[a("strong",[t._v("资源池管理")]),t._v("：连接池、线程池等资源池的使用，需要确保资源的分配和释放是线程安全的。")]),t._v(" "),a("li",[a("strong",[t._v("锁的使用")]),t._v("：在使用锁（如"),a("code",[t._v("synchronized")]),t._v("或"),a("code",[t._v("ReentrantLock")]),t._v("）时，需要避免死锁、活锁和资源耗尽等问题。")]),t._v(" "),a("li",[a("strong",[t._v("原子操作")]),t._v("：对于需要原子性的操作，如计数器递增，需要使用原子变量类（如"),a("code",[t._v("AtomicInteger")]),t._v("）。")]),t._v(" "),a("li",[a("strong",[t._v("可见性问题")]),t._v("：确保一个线程对变量的修改对其他线程是可见的，可以通过 "),a("code",[t._v("volatile")]),t._v(" 关键字或 "),a("code",[t._v("synchronized")]),t._v(" 块来实现。")]),t._v(" "),a("li",[a("strong",[t._v("并发异常处理")]),t._v("：在处理异常时，需要确保资源的释放和状态的恢复不会影响线程安全。")]),t._v(" "),a("li",[a("strong",[t._v("发布-订阅模式")]),t._v("：在事件驱动的架构中，事件的发布和订阅需要同步，以避免事件处理的竞态条件。")])]),t._v(" "),a("p",[t._v("在设计系统时，应该始终考虑到线程安全问题，并采用适当的同步机制和并发工具来避免这些问题。此外，编写单元测试和集成测试时，也应该考虑到多线程环境下的行为。")]),t._v(" "),a("h3",{attrs:{id:"🎯-什么是上下文切换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-什么是上下文切换"}},[t._v("#")]),t._v(" 🎯 什么是上下文切换?")]),t._v(" "),a("p",[t._v("上下文切换（Context Switch）指的是 "),a("strong",[t._v("CPU 从一个线程/进程切换到另一个线程/进程运行时")]),t._v("，保存当前执行状态并恢复另一个的执行状态的过程。")]),t._v(" "),a("blockquote",[a("p",[t._v("多线程编程中一般线程的个数都大于 CPU 核心的个数，而一个 CPU 核心在任意时刻只能被一个线程使用，为了让这些线程都能得到有效执行，CPU 采取的策略是为每个线程分配时间片并轮转的形式。当一个线程的时间片用完的时候就会重新处于就绪状态让给其他线程使用，这个过程就属于一次上下文切换。")])]),t._v(" "),a("p",[t._v("这里的“上下文”包括：")]),t._v(" "),a("ul",[a("li",[t._v("程序计数器（PC）")]),t._v(" "),a("li",[t._v("寄存器")]),t._v(" "),a("li",[t._v("堆栈信息")]),t._v(" "),a("li",[t._v("内存映射等")])]),t._v(" "),a("p",[a("strong",[t._v("为什么会发生？")])]),t._v(" "),a("ul",[a("li",[t._v("线程时间片耗尽（操作系统调度）")]),t._v(" "),a("li",[t._v("有更高优先级线程需要运行")]),t._v(" "),a("li",[t._v("线程主动挂起（sleep、wait、IO 阻塞）")]),t._v(" "),a("li",[t._v("多核 CPU 上线程切换")])]),t._v(" "),a("p",[a("strong",[t._v("成本与影响")])]),t._v(" "),a("ul",[a("li",[t._v("上下文切换不是“免费”的：\n"),a("ul",[a("li",[t._v("保存/恢复寄存器和内存信息需要时间")]),t._v(" "),a("li",[t._v("缓存失效（Cache Miss），降低 CPU 利用率")])])]),t._v(" "),a("li",[a("strong",[t._v("过多的上下文切换会导致性能下降")]),t._v("，甚至“线程切换比工作还耗时”。")])]),t._v(" "),a("p",[a("strong",[t._v("如何减少？")])]),t._v(" "),a("ul",[a("li",[t._v("使用线程池，避免频繁创建/销毁线程")]),t._v(" "),a("li",[t._v("减少锁竞争（synchronized、ReentrantLock）")]),t._v(" "),a("li",[t._v("使用无锁数据结构（CAS、Atomic 类）")]),t._v(" "),a("li",[t._v("降低线程数量（通常 ≤ CPU 核心数 * 2）")])]),t._v(" "),a("h3",{attrs:{id:"🎯-用户线程和守护线程有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-用户线程和守护线程有什么区别"}},[t._v("#")]),t._v(" 🎯 用户线程和守护线程有什么区别?")]),t._v(" "),a("p",[t._v("当我们在 Java 程序中创建一个线程，它就被称为用户线程。将一个用户线程设置为守护线程的方法就是在调用 **start()**方法之前，调用对象的 "),a("code",[t._v("setDamon(true)")]),t._v(" 方法。一个守护线程是在后台执行并且不会阻止 JVM 终止的 线程，守护线程的作用是为其他线程的运行提供便利服务。当没有用户线程在 运行的时候，"),a("strong",[t._v("JVM")]),t._v(" 关闭程序并且退出。一个守护线程创建的子线程依然是守护线程。")]),t._v(" "),a("p",[t._v("守护线程的一个典型例子就是垃圾回收器。")]),t._v(" "),a("h3",{attrs:{id:"🎯-说说线程的生命周期和状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-说说线程的生命周期和状态"}},[t._v("#")]),t._v(" 🎯 说说线程的生命周期和状态?")]),t._v(" "),a("p",[t._v("Java 线程在运行的生命周期中的指定时刻只可能处于下面 6 种不同状态的其中一个状态")]),t._v(" "),a("p",[t._v("Java 通过 "),a("code",[t._v("Thread.State")]),t._v(" 枚举定义了线程的"),a("strong",[t._v("6 种状态")]),t._v("（JDK 1.5 后），可通过 "),a("code",[t._v("getState()")]),t._v(" 方法获取，需注意与生命周期阶段的对应关系：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("状态名称")]),t._v(" "),a("th",[a("strong",[t._v("说明")])]),t._v(" "),a("th",[a("strong",[t._v("对应生命周期阶段")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("NEW")])]),t._v(" "),a("td",[t._v("线程对象被创建（例如通过 "),a("code",[t._v("new Thread()")]),t._v("）之后，但在调用 "),a("code",[t._v("start()")]),t._v(" 方法之前的初始状态")]),t._v(" "),a("td",[t._v("新建")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("RUNNABLE")])]),t._v(" "),a("td",[t._v("线程调用了 "),a("code",[t._v("start()")]),t._v(" 方法之后的状态。"),a("strong",[t._v("这并不意味着线程正在CPU上执行，而是表示线程具备了运行的条件")])]),t._v(" "),a("td",[t._v("就绪、运行")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("BLOCKED")])]),t._v(" "),a("td",[t._v("阻塞状态，等待监视器锁（如 "),a("code",[t._v("synchronized")]),t._v(" 锁）。")]),t._v(" "),a("td",[t._v("阻塞（同步阻塞）")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("WAITING")])]),t._v(" "),a("td",[t._v("无限等待状态，需其他线程显式唤醒（如调用 "),a("code",[t._v("wait()")]),t._v(" 无超时参数）。")]),t._v(" "),a("td",[t._v("阻塞（主动阻塞 / 协作阻塞）")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("TIMED_WAITING")])]),t._v(" "),a("td",[t._v("限时等待状态，超时后自动唤醒（如 "),a("code",[t._v("wait(long ms)")]),t._v("、"),a("code",[t._v("sleep(long ms)")]),t._v("）。")]),t._v(" "),a("td",[t._v("阻塞（主动阻塞）")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("TERMINATED")])]),t._v(" "),a("td",[t._v("终止状态，线程执行完毕或异常结束（同生命周期的 “死亡”）。")]),t._v(" "),a("td",[t._v("死亡")])])])]),t._v(" "),a("p",[t._v("线程在生命周期中并不是固定处于某一个状态而是随着代码的执行在不同状态之间切换。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("┌─────────┐      start()      ┌─────────────────┐\n│  NEW    │ ───────────────→ │  RUNNABLE       │\n└─────────┘                 └─────────────────┘\n                               ↗        ↘\n                              ↙          ↘\n                      CPU调度获取时间片   主动放弃CPU（yield()）\n                              ↓          ↗\n┌─────────┐     run()完成     ┌─────────────────┐\n│TERMINATED←─────────────────│  RUNNING        │\n└─────────┘                  └─────────────────┘\n                               ↓         ↓         ↓\n                          ┌────┴────┐ ┌──┴────┐ ┌──┴────┐\n                          │          │ │       │ │       │\n              ┌───────────▼───┐ ┌───▼─────────▼─┴───────▼────┐\n              │               │ │                              │\n┌─────────────────┐ ┌─────────────────┐ ┌───────────────────────┐\n│   BLOCKED       │ │  WAITING        │ │  TIMED_WAITING        │\n│  (等待锁)       │ │  (无限等待)      │ │  (超时等待)            │\n└─────────────────┘ └─────────────────┘ └───────────────────────┘\n              ▲               ▲                     ▲\n              │               │                     │\n              │               │                     │\n┌─────────────┴───┐ ┌─────────┴──────────────┐ ┌───┴──────────────────┐\n│获取synchronized │ │notify()/notifyAll()    │ │时间到达或提前唤醒    │\n│锁               │ │join()线程结束          │ │notify()/notifyAll()  │\n└─────────────────┘ └────────────────────────┘ └───────────────────────┘\n")])])]),a("h3",{attrs:{id:"🎯-一个线程两次调用-start-方法会出现什么情况-谈谈线程的生命周期和状态转移"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-一个线程两次调用-start-方法会出现什么情况-谈谈线程的生命周期和状态转移"}},[t._v("#")]),t._v(" 🎯 一个线程两次调用 start() 方法会出现什么情况？谈谈线程的生命周期和状态转移")]),t._v(" "),a("p",[t._v("在 Java 中，线程对象一旦启动，不能再次启动。如果尝试对同一个线程对象调用两次 "),a("code",[t._v("start()")]),t._v(" 方法，会抛出 "),a("code",[t._v("java.lang.IllegalThreadStateException")]),t._v(" 异常。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("当线程对象第一次调用 "),a("code",[t._v("start()")]),t._v(" 时，线程从 "),a("strong",[t._v("NEW 状态")]),t._v(" 进入 "),a("strong",[t._v("RUNNABLE 状态")]),t._v("，JVM 会为其创建对应的操作系统线程并执行 "),a("code",[t._v("run()")]),t._v(" 方法。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("若再次调用 "),a("code",[t._v("start()")]),t._v("，会抛出 "),a("code",[t._v("IllegalThreadStateException")])]),t._v("，因为线程状态已不再是 NEW。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Running"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第一次调用，正常启动")]),t._v("\nt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第二次调用，抛出 IllegalThreadStateException")]),t._v("\n")])])])])]),t._v(" "),a("p",[a("strong",[t._v("状态流转的关键限制")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("NEW → RUNNABLE")]),t._v("：只能通过 "),a("strong",[t._v("一次 "),a("code",[t._v("start()")]),t._v(" 调用")]),t._v(" 触发。")]),t._v(" "),a("li",[a("strong",[t._v("RUNNABLE → 其他状态")]),t._v("：可通过锁竞争、等待 / 通知、超时等操作转换。")]),t._v(" "),a("li",[a("strong",[t._v("TERMINATED")]),t._v("：一旦进入，无法回到其他状态（线程生命周期结束）。")])]),t._v(" "),a("blockquote",[a("h4",{attrs:{id:"线程池如何复用线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程池如何复用线程"}},[t._v("#")]),t._v(" 线程池如何复用线程？")]),t._v(" "),a("p",[t._v("线程池通过 "),a("code",[t._v("execute(Runnable task)")]),t._v(" 方法复用线程，其核心原理是：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("Worker 线程循环")]),t._v("：线程池中的工作线程（Worker）会持续从任务队列中获取任务并执行。")]),t._v(" "),a("li",[a("strong",[t._v("任务替换")]),t._v("：当一个任务执行完毕后，Worker 不会终止，而是继续执行下一个任务。")]),t._v(" "),a("li",[a("strong",[t._v("状态维护")]),t._v("：Worker 线程本身不会被重复 "),a("code",[t._v("start()")]),t._v("，而是通过 "),a("code",[t._v("run()")]),t._v(" 方法的循环调用实现复用。")])])]),t._v(" "),a("h3",{attrs:{id:"🎯-说说-sleep-方法和-wait-方法区别和共同点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-说说-sleep-方法和-wait-方法区别和共同点"}},[t._v("#")]),t._v(" 🎯 说说 sleep() 方法和 wait() 方法区别和共同点?")]),t._v(" "),a("p",[t._v("sleep () 和 wait () 的核心区别在于锁的处理机制：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("锁释放")]),t._v("：sleep () 不释放锁，wait () 释放锁并进入等待队列；")]),t._v(" "),a("li",[a("strong",[t._v("唤醒方式")]),t._v("：sleep () 依赖时间或中断，wait () 依赖其他线程通知；")]),t._v(" "),a("li",[a("strong",[t._v("使用场景")]),t._v("：sleep () 用于线程暂停，wait () 用于线程协作（wait 方法必须在 synchronized 保护的代码中使用）。")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("wait ()")]),t._v("通常被用于线程间交互/通信（wait 方法必须在 synchronized 保护的代码中使用），sleep 通常被用于暂停执行。")]),t._v(" "),a("li",[a("code",[t._v("wait()")]),t._v(" 方法被调用后，线程不会自动苏醒，需要别的线程调用同一个对象上的 "),a("code",[t._v("notify()")]),t._v(" 或者 "),a("code",[t._v("notifyAll()")]),t._v(" 方法。"),a("code",[t._v("sleep()")]),t._v(" 方法执行完成后，线程会自动苏醒。或者可以使用 "),a("code",[t._v("wait(long timeout)")]),t._v(" 超时后线程会自动苏醒。")])]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("Thread.yield()")]),t._v(" 方法用于提示调度器当前线程愿意放弃对处理器的占用，并允许其他同优先级的线程运行。")]),t._v(" "),a("p",[t._v("yield() 方法和 sleep() 方法类似，也不会释放“锁标志”，区别在于，它没有参数，即 yield() 方法只是使当前线程重新回到可执行状态，所以执行 yield() 的线程有可能在进入到可执行状态后马上又被执行，另外 yield() 方法只能使同优先级或者高优先级的线程得到执行机会，这也和 sleep() 方法不同。")]),t._v(" "),a("p",[a("code",[t._v("Thread.join()")]),t._v(" 方法用于等待当前线程执行完毕。它可以用于确保某个线程在另一个线程完成之前不会继续执行。")])]),t._v(" "),a("h3",{attrs:{id:"🎯-为什么-wait-必须在-synchronized-块中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-为什么-wait-必须在-synchronized-块中"}},[t._v("#")]),t._v(" 🎯 为什么 wait () 必须在 synchronized 块中？")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("原子性保障")]),t._v("：避免线程安全问题（如生产者修改队列后，消费者未及时感知）。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("JVM 实现机制")]),t._v("：锁对象的 "),a("code",[t._v("monitor")]),t._v(" 记录等待线程，需通过 "),a("code",[t._v("synchronized")]),t._v(" 获取锁后才能操作 "),a("code",[t._v("monitor")])])])]),t._v(" "),a("h3",{attrs:{id:"🎯-为什么我们调用-start-方法时会执行-run-方法-为什么我们不能直接调用-run-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-为什么我们调用-start-方法时会执行-run-方法-为什么我们不能直接调用-run-方法"}},[t._v("#")]),t._v(" 🎯 为什么我们调用 start() 方法时会执行 run() 方法，为什么我们不能直接调用 run() 方法？")]),t._v(" "),a("p",[t._v("调用 "),a("code",[t._v("start()")]),t._v(" 方法最终会导致在新的执行路径上执行 "),a("code",[t._v("run()")]),t._v(" 方法中的代码，这是 Java 实现多线程的标准方式。直接调用 "),a("code",[t._v("run()")]),t._v(" 方法通常是一个错误，原因在于两者在行为、线程生命周期和底层执行机制上存在根本区别：")]),t._v(" "),a("ol",[a("li",[a("strong",[a("code",[t._v("start()")]),t._v(" 的本质：创建新执行流")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("核心职责：")]),t._v(" "),a("code",[t._v("start()")]),t._v(" 方法是 "),a("code",[t._v("Thread")]),t._v(" 类提供的，用于"),a("strong",[t._v("请求 Java 虚拟机 (JVM) 启动一个新的操作系统线程（或映射到内核调度实体）")]),t._v("。")]),t._v(" "),a("li",[t._v("底层机制：当调用 "),a("code",[t._v("start()")]),t._v("时：\n"),a("ul",[a("li",[t._v("JVM底层会通过一个 "),a("code",[t._v("native")]),t._v(" 方法（通常是 "),a("code",[t._v("start0()")]),t._v("）与操作系统交互，请求创建一个新的系统线程。")]),t._v(" "),a("li",[t._v("这个新创建的系统线程获得独立的执行上下文（包括程序计数器、栈空间）。")]),t._v(" "),a("li",[a("strong",[t._v("在操作系统准备好并调度这个新线程之后，由操作系统（或 JVM 线程调度器）自动调用该线程对象的 "),a("code",[t._v("run()")]),t._v(" 方法。")])])])]),t._v(" "),a("li",[a("strong",[t._v("结果：")]),t._v(" "),a("code",[t._v("run()")]),t._v(" 方法中的代码会在一个"),a("strong",[t._v("全新的、独立的执行线程")]),t._v("中运行，实现真正的并发或并行。")])])]),t._v(" "),a("li",[a("strong",[t._v("直接调用 "),a("code",[t._v("run()")]),t._v("：普通方法调用（非多线程）")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("行为：")]),t._v(" 直接调用 "),a("code",[t._v("run()")]),t._v(" 方法，就像调用任何其他 Java 类的普通实例方法一样。")]),t._v(" "),a("li",[a("strong",[t._v("执行上下文：")]),t._v(" "),a("code",[t._v("run()")]),t._v(" 方法会在"),a("strong",[t._v("当前调用它的线程")]),t._v("中执行（例如，很可能是在 "),a("code",[t._v("main")]),t._v(" 线程中执行）。")]),t._v(" "),a("li",[t._v("结果：\n"),a("ul",[a("li",[a("strong",[t._v("不会创建新的线程！")])]),t._v(" "),a("li",[a("code",[t._v("run()")]),t._v(" 方法中的代码在当前线程的栈帧中同步执行（按顺序执行，阻塞当前线程）。")]),t._v(" "),a("li",[t._v("完全丧失了多线程的意义，等同于单线程顺序执行。")])])])])])]),t._v(" "),a("blockquote",[a("ul",[a("li",[a("strong",[a("code",[t._v("start()")]),t._v(" 是线程的 “出生证”，JVM 见它才开新线程；"),a("code",[t._v("run()")]),t._v(" 是线程的 “工作内容”，直接调用只是普通方法")]),t._v("。")]),t._v(" "),a("li",[a("strong",[t._v("状态流转有规则，"),a("code",[t._v("NEW")]),t._v(" 到 "),a("code",[t._v("RUNNABLE")]),t._v(" 靠 "),a("code",[t._v("start()")]),t._v("，跳过它线程无法活")]),t._v("。")])])]),t._v(" "),a("h3",{attrs:{id:"🎯-java-线程启动的几种方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-java-线程启动的几种方式"}},[t._v("#")]),t._v(" 🎯 Java 线程启动的几种方式")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//第一种  直接通过Thread  MyThread 是继承了Thread对象的类  实现在下面")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyRun")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//第二种 Runnable")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//第三种  lambda")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello Lambda!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FutureTask")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyCall")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//第四种")]),t._v("\n  t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorService")]),t._v(" service "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Executors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newCachedThreadPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//第五种  使用Executor")]),t._v("\n  service"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("execute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello ThreadPool"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  service"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("shutdown")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"🎯-如何正确停止线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-如何正确停止线程"}},[t._v("#")]),t._v(" 🎯 如何正确停止线程？")]),t._v(" "),a("p",[t._v("通常情况下，我们不会手动停止一个线程，而是允许线程运行到结束，然后让它自然停止。但是依然会有许多特殊的情况需要我们提前停止线程，比如：用户突然关闭程序，或程序运行出错重启等。")]),t._v(" "),a("p",[t._v("在 Java 中，正确停止线程通常涉及到线程的协作和适当的关闭机制。由于Java没有提供直接停止线程的方法（如"),a("code",[t._v("stop()")]),t._v("方法已经被废弃，因为它太危险，容易造成数据不一致等问题），以下是一些常见的正确停止线程的方法：")]),t._v(" "),a("ol",[a("li",[a("p",[a("strong",[t._v("使用标志位")]),t._v("：使用标志位是停止线程的常见方法。在这种方法中，线程会定期检查一个标志位，如果标志位指示线程应该停止，那么线程会自行结束。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" stopRunning "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("stopThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stopRunning "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("stopRunning"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行任务")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 清理资源")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("中断状态（Interruption）")]),t._v("：使用线程的中断机制来优雅地停止线程。当需要停止线程时，调用"),a("code",[t._v("Thread.interrupt()")]),t._v("方法；在线程的执行过程中，检查中断状态，如果被中断，则退出。")]),t._v(" "),a("div",{staticClass:"language-JAVA extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在其他线程中调用此方法来中断线程")]),t._v("\nthread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("interrupt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在目标线程中检查中断状态")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isInterrupted")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行任务")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 线程被中断，可以选择重置中断状态或退出")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("interrupt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 清理资源")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("使用ExecutorService")]),t._v("：使用"),a("code",[t._v("ExecutorService")]),t._v("可以更容易地控制线程的生命周期。调用"),a("code",[t._v("shutdown()")]),t._v("方法开始关闭，调用"),a("code",[t._v("shutdownNow()")]),t._v("可以尝试立即停止所有正在执行的任务。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorService")]),t._v(" executorService "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Executors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newSingleThreadExecutor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Future")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" future "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" executorService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("submit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行任务")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 请求关闭线程池，不再接受新任务，尝试完成已提交的任务")]),t._v("\nexecutorService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("shutdown")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 尝试立即停止所有正在执行的任务列表，返回未完成的任务列表")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" notCompleted "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" executorService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("shutdownNow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等待线程池关闭，直到所有任务完成后")]),t._v("\nexecutorService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("awaitTermination")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SECONDS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("strong",[t._v("使用 "),a("code",[t._v("Future.cancel()")])]),t._v("： "),a("code",[t._v("ExecutorService")]),t._v(" 启动的话，也可以使用 "),a("code",[t._v("Future.cancel()")]),t._v(" 方法来停止线程。")])])]),t._v(" "),a("h3",{attrs:{id:"🎯-进程间的通信方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-进程间的通信方式"}},[t._v("#")]),t._v(" 🎯 进程间的通信方式？")]),t._v(" "),a("p",[t._v("进程间通信（Inter-Process Communication，IPC）是指在不同进程之间传递数据和信息的机制。不同操作系统提供了多种 IPC 方式，下面是常见的几种：")]),t._v(" "),a("ol",[a("li",[a("p",[a("strong",[t._v("管道（Pipe）")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("无名管道（Anonymous Pipe）：单向通信，只能用于有亲缘关系的进程（父进程与子进程）。")])]),t._v(" "),a("li",[a("p",[t._v("有名管道（Named Pipe 或 FIFO）：在 Unix/Linux 系统中，可以使用 "),a("code",[t._v("mkfifo")]),t._v(" 命令创建有名管道，支持双向通信。")])])])]),t._v(" "),a("li",[a("p",[t._v("消息队列（Message Queue）")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("特点")]),t._v("：消息队列是存储在内核中的消息链表，允许进程通过发送和接收消息进行通信，支持有序的消息传递。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("实现")]),t._v("：在 Unix/Linux 系统中，可以使用 "),a("code",[t._v("msgget")]),t._v("、"),a("code",[t._v("msgsnd")]),t._v("、"),a("code",[t._v("msgrcv")]),t._v(" 等系统调用进行消息队列的创建和操作。")])])])]),t._v(" "),a("li",[a("p",[t._v("共享内存（Shared Memory）")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("特点")]),t._v("：多个进程可以直接访问同一块内存区域，是最快的 IPC 方式之一，但需要同步机制来避免数据竞争。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("实现")]),t._v("：在 Unix/Linux 系统中，可以使用 "),a("code",[t._v("shmget")]),t._v("、"),a("code",[t._v("shmat")]),t._v("、"),a("code",[t._v("shmdt")]),t._v("、"),a("code",[t._v("shmctl")]),t._v(" 等系统调用进行共享内存的创建和管理。")])])])]),t._v(" "),a("li",[a("p",[t._v("信号（Signal）")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("特点")]),t._v("：信号是一种异步通信机制，用于通知进程某个事件已经发生。常用于进程间的简单通知。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("实现")]),t._v("：在 Unix/Linux 系统中，可以使用 "),a("code",[t._v("kill")]),t._v(" 系统调用发送信号，使用 "),a("code",[t._v("signal")]),t._v(" 或 "),a("code",[t._v("sigaction")]),t._v(" 设置信号处理程序。")])])])]),t._v(" "),a("li",[a("p",[t._v("信号量（Semaphore）")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("特点")]),t._v("：信号量是一种用于进程间同步的计数器，可以用来控制多个进程对共享资源的访问。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("实现")]),t._v("：在 Unix/Linux 系统中，可以使用 "),a("code",[t._v("semget")]),t._v("、"),a("code",[t._v("semop")]),t._v("、"),a("code",[t._v("semctl")]),t._v(" 等系统调用进行信号量的创建和操作。")])])])]),t._v(" "),a("li",[a("p",[t._v("套接字（Socket）")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("特点")]),t._v("：套接字是一种底层的网络通信机制，可以用于同一台机器上不同进程之间的通信，也可以用于不同机器上的进程之间的通信，支持双向通信。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("实现")]),t._v("：在 Unix/Linux 系统中，可以使用 "),a("code",[t._v("socket")]),t._v("、"),a("code",[t._v("bind")]),t._v("、"),a("code",[t._v("listen")]),t._v("、"),a("code",[t._v("accept")]),t._v("、"),a("code",[t._v("connect")]),t._v("、"),a("code",[t._v("send")]),t._v("、"),a("code",[t._v("recv")]),t._v(" 等系统调用进行套接字编程。")])])])]),t._v(" "),a("li",[a("p",[t._v("文件（File）")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("特点")]),t._v("：通过读写共享文件的方式进行通信，适用于数据量较大且不要求高实时性的场景。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("实现")]),t._v("：在所有操作系统中，进程可以通过标准的文件读写操作进行通信。")])])])]),t._v(" "),a("li",[a("p",[t._v("内存映射文件（Memory-Mapped File）")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("特点")]),t._v("：通过将文件映射到进程的地址空间，实现进程间的共享内存，适用于大数据量的共享。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("实现")]),t._v("：在 Unix/Linux 系统中，可以使用 "),a("code",[t._v("mmap")]),t._v(" 系统调用创建内存映射文件。")])])])])]),t._v(" "),a("h3",{attrs:{id:"🎯-java-多线程之间的通信方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-java-多线程之间的通信方式"}},[t._v("#")]),t._v(" 🎯 Java 多线程之间的通信方式？")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("通信方式")])]),t._v(" "),a("th",[a("strong",[t._v("核心机制")])]),t._v(" "),a("th",[a("strong",[t._v("适用场景")])]),t._v(" "),a("th",[a("strong",[t._v("关键类 / 方法")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("共享变量")]),t._v(" "),a("td",[a("code",[t._v("volatile")]),t._v("/"),a("code",[t._v("synchronized")]),t._v(" 保证可见性和原子性")]),t._v(" "),a("td",[t._v("简单状态通知和数据共享")]),t._v(" "),a("td",[a("code",[t._v("volatile")]),t._v(" 关键字、"),a("code",[t._v("synchronized")]),t._v(" 块")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("wait()")]),t._v("/"),a("code",[t._v("notify()")])]),t._v(" "),a("td",[t._v("对象监视器 + 等待 / 通知机制")]),t._v(" "),a("td",[t._v("条件等待和唤醒（如生产者 - 消费者）")]),t._v(" "),a("td",[a("code",[t._v("Object.wait()")]),t._v("、"),a("code",[t._v("Object.notify()")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("Lock")]),t._v(" + "),a("code",[t._v("Condition")])]),t._v(" "),a("td",[t._v("显式锁 + 多路等待队列")]),t._v(" "),a("td",[t._v("复杂同步逻辑（如多条件等待）")]),t._v(" "),a("td",[a("code",[t._v("ReentrantLock")]),t._v("、"),a("code",[t._v("Condition.await()")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("BlockingQueue")])]),t._v(" "),a("td",[t._v("阻塞队列实现线程安全的入队 / 出队")]),t._v(" "),a("td",[t._v("生产者 - 消费者模型简化")]),t._v(" "),a("td",[a("code",[t._v("ArrayBlockingQueue")]),t._v("、"),a("code",[t._v("put()")]),t._v("、"),a("code",[t._v("take()")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("CountDownLatch")])]),t._v(" "),a("td",[t._v("倒计时等待多个线程完成")]),t._v(" "),a("td",[t._v("主线程等待子线程集合")]),t._v(" "),a("td",[a("code",[t._v("CountDownLatch.await()")]),t._v("、"),a("code",[t._v("countDown()")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("CyclicBarrier")])]),t._v(" "),a("td",[t._v("线程集合后同步执行")]),t._v(" "),a("td",[t._v("多轮协作（如多阶段计算）")]),t._v(" "),a("td",[a("code",[t._v("CyclicBarrier.await()")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("Exchanger")])]),t._v(" "),a("td",[t._v("两个线程间数据交换")]),t._v(" "),a("td",[t._v("遗传算法、管道设计等一对一交换场景")]),t._v(" "),a("td",[a("code",[t._v("Exchanger.exchange()")])])])])]),t._v(" "),a("h3",{attrs:{id:"🎯-java-同步机制有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-java-同步机制有哪些"}},[t._v("#")]),t._v(" 🎯 Java 同步机制有哪些？")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("synchronized")]),t._v(" 关键字，这个相信大家很了解，最好能理解其中的原理")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Lock")]),t._v(" 接口及其实现类，如 ReentrantLock.ReadLock 和 ReentrantReadWriteLock.WriteLock")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Semaphore")]),t._v("：是一种计数器，用来保护一个或者多个共享资源的访问，它是并发编程的一种基础工具，大多数编程语言都提供这个机制，这也是操作系统中经常提到的")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("CountDownLatch")]),t._v("：是 Java 语言提供的同步辅助类，在完成一组正在其他线程中执行的操作之前，他允许线程一直等待")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("CyclicBarrier")]),t._v("：也是 java 语言提供的同步辅助类，他允许多个线程在某一个集合点处进行相互等待；")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Phaser")]),t._v("：也是 java 语言提供的同步辅助类，他把并发任务分成多个阶段运行，在开始下一阶段之前，当前阶段中所有的线程都必须执行完成，JAVA7 才有的特性。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Exchanger")]),t._v("：他提供了两个线程之间的数据交换点。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("StampedLock")]),t._v(" ：是一种改进的读写锁，提供了三种模式：写锁、悲观读锁和乐观读锁，适用于读多写少的场景。")])])]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"二、同步关键字-并发控制-🔒"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、同步关键字-并发控制-🔒"}},[t._v("#")]),t._v(" 二、同步关键字（并发控制）🔒")]),t._v(" "),a("h3",{attrs:{id:"🎯-synchronized-关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-synchronized-关键字"}},[t._v("#")]),t._v(" 🎯 synchronized 关键字?")]),t._v(" "),a("blockquote",[a("p",[t._v('"synchronized是Java最基础的同步机制，基于Monitor监视器实现：')]),t._v(" "),a("p",[a("strong",[t._v("实现原理")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("同步代码块：使用monitorenter和monitorexit字节码指令")]),t._v(" "),a("li",[t._v("同步方法：使用ACC_SYNCHRONIZED访问标志")]),t._v(" "),a("li",[t._v("基于对象头的Mark Word存储锁信息")])]),t._v(" "),a("p",[a("strong",[t._v("锁升级过程")]),t._v("：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("偏向锁")]),t._v("：只有一个线程访问时，在对象头记录线程ID")]),t._v(" "),a("li",[a("strong",[t._v("轻量级锁")]),t._v("：多线程竞争但无实际冲突，使用CAS操作")]),t._v(" "),a("li",[a("strong",[t._v("重量级锁")]),t._v("：存在真正竞争时，升级为Monitor锁，线程阻塞")])]),t._v(" "),a("p",[a("strong",[t._v("特点")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("可重入性：同一线程可以多次获得同一把锁")]),t._v(" "),a("li",[t._v("不可中断：等待锁的线程不能被中断")]),t._v(" "),a("li",[t._v("非公平锁：无法保证等待时间最长的线程优先获得锁")])]),t._v(" "),a("p",[t._v('JDK 6+的锁优化使synchronized性能大幅提升，在低竞争场景下甚至超过ReentrantLock。"')])]),t._v(" "),a("p",[a("strong",[t._v("1. 底层实现原理")])]),t._v(" "),a("p",[a("code",[t._v("synchronized")]),t._v(" 的底层实现基于 "),a("strong",[t._v("JVM 监视器锁（Monitor）")]),t._v(" 机制：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("同步代码块")]),t._v("：通过字节码指令 "),a("code",[t._v("monitorenter")]),t._v("（加锁）和 "),a("code",[t._v("monitorexit")]),t._v("（释放锁）实现")]),t._v(" "),a("li",[a("strong",[t._v("同步方法")]),t._v("：通过方法访问标志 "),a("code",[t._v("ACC_SYNCHRONIZED")]),t._v(" 隐式实现锁机制")]),t._v(" "),a("li",[a("strong",[t._v("核心数据结构")]),t._v("：每个对象关联一个 Monitor（包含 Owner 线程、EntryList 阻塞队列、WaitSet 等待队列）")])]),t._v(" "),a("blockquote",[a("p",[t._v("📌 "),a("strong",[t._v("关键点")]),t._v("：所有 Java 对象天生自带 Monitor，这是 "),a("code",[t._v("synchronized")]),t._v(" 能以任意对象作为锁的根本原因。")]),t._v(" "),a("p",[a("strong",[t._v("synchronized 关键字底层原理属于 JVM 层面。")])]),t._v(" "),a("p",[a("strong",[t._v("① synchronized 同步语句块的情况")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SynchronizedDemo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("method")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"synchronized 代码块"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("通过 JDK 自带的 javap 命令查看 SynchronizedDemo 类的相关字节码信息：首先切换到类的对应目录执行 "),a("code",[t._v("javac SynchronizedDemo.java")]),t._v(" 命令生成编译后的 .class 文件，然后执行"),a("code",[t._v("javap -c -s -v -l SynchronizedDemo.class")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("synchronized 同步语句块的实现使用的是 monitorenter 和 monitorexit 指令，其中 monitorenter 指令指向同步代码块的开始位置，monitorexit 指令则指明同步代码块的结束位置。")]),t._v(" 当执行 monitorenter 指令时，线程试图获取锁也就是获取 monitor(monitor对象存在于每个 Java 对象的对象头中，synchronized 锁便是通过这种方式获取锁的，也是为什么 Java 中任意对象可以作为锁的原因) 的持有权。当计数器为0则可以成功获取，获取后将锁计数器设为1也就是加1。相应的在执行 monitorexit 指令后，将锁计数器设为0，表明锁被释放。如果获取对象锁失败，那当前线程就要阻塞等待，直到锁被另外一个线程释放为止。")]),t._v(" "),a("ol",[a("li",[t._v("进入时，执行 monitorenter，将计数器 +1，释放锁 monitorexit 时，计数器-1；")]),t._v(" "),a("li",[t._v("当一个线程判断到计数器为 0 时，则当前锁空闲，可以占用；反之，当前线程进入等待状态。")])]),t._v(" "),a("p",[a("strong",[t._v("② synchronized 修饰方法的的情况")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SynchronizedDemo2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("method")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"synchronized 方法"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("synchronized 修饰的方法并没有 monitorenter 指令和 monitorexit 指令，取得代之的确实是 "),a("code",[t._v("ACC_SYNCHRONIZED")]),t._v(" 标识，该标识指明了该方法是一个同步方法，JVM 通过该 ACC_SYNCHRONIZED 访问标志来辨别一个方法是否声明为同步方法，从而执行相应的同步调用。")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("为什么方法的同步使用 "),a("code",[t._v("ACC_SYNCHRONIZED")]),t._v("？")])]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("简化字节码")]),t._v(" "),a("ul",[a("li",[t._v("同步方法的范围天然固定为整个方法体，直接用标志位表示更加简洁。")]),t._v(" "),a("li",[t._v("避免了显式插入指令的额外开销。")])])]),t._v(" "),a("li",[a("strong",[t._v("由 JVM 执行优化")]),t._v(" "),a("ul",[a("li",[t._v("JVM 可以直接识别 "),a("code",[t._v("ACC_SYNCHRONIZED")]),t._v(" 并在方法调用层面加锁，而无需用户手动控制。")]),t._v(" "),a("li",[t._v("更容易结合其他锁优化（如偏向锁、轻量级锁）。")])])])])])]),t._v(" "),a("p",[a("strong",[t._v("2. 使用方式与区别")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("使用方式")])]),t._v(" "),a("th",[a("strong",[t._v("锁对象")])]),t._v(" "),a("th",[a("strong",[t._v("作用范围")])]),t._v(" "),a("th",[a("strong",[t._v("特点")])]),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("同步实例方法")])]),t._v(" "),a("td",[a("code",[t._v("this")]),t._v("（当前对象实例）")]),t._v(" "),a("td",[t._v("整个方法体")]),t._v(" "),a("td",[t._v("影响同一对象的所有同步方法")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("同步静态方法")])]),t._v(" "),a("td",[a("code",[t._v("Class")]),t._v(" 对象（如 "),a("code",[t._v("User.class")]),t._v("）")]),t._v(" "),a("td",[t._v("整个方法体")]),t._v(" "),a("td",[t._v("全局锁，影响所有实例的调用")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("同步代码块")])]),t._v(" "),a("td",[t._v("指定任意对象")]),t._v(" "),a("td",[t._v("代码块内部")]),t._v(" "),a("td",[t._v("锁粒度最小，性能最优")]),t._v(" "),a("td",[a("code",[t._v("synchronized (lock) { ... }")])])])])]),t._v(" "),a("blockquote",[a("p",[t._v("⚠️ "),a("strong",[t._v("注意")]),t._v("：对类加锁（静态同步）时，"),a("strong",[t._v("调用非静态方法不会加锁")]),t._v("（因为锁对象不同）：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("staticMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 锁User.class")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("instanceMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 锁this实例")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("p",[a("strong",[t._v("3. 对象头与 Monitor")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("对象头（Object Header）")]),t._v("：\n每个 Java 对象在内存中都有对象头，包含 "),a("strong",[t._v("Mark Word")]),t._v(" 和 "),a("strong",[t._v("Klass Pointer")]),t._v("。\n"),a("ul",[a("li",[a("strong",[t._v("Mark Word")]),t._v("：存储对象的哈希码、GC 分代年龄、锁状态等信息。")]),t._v(" "),a("li",[a("strong",[t._v("Class Pointer")]),t._v("：指向对象所属类的元数据。")])])]),t._v(" "),a("li",[a("strong",[t._v("Monitor（监视器）")]),t._v("：\n每个对象都关联一个 Monitor，本质是操作系统的互斥量（Mutex），包含：\n"),a("ul",[a("li",[a("strong",[t._v("Owner")]),t._v("：记录当前持有锁的线程。")]),t._v(" "),a("li",[a("strong",[t._v("Entry List")]),t._v("：等待获取锁的线程队列。")]),t._v(" "),a("li",[a("strong",[t._v("Wait Set")]),t._v("：调用 "),a("code",[t._v("wait()")]),t._v(" 后阻塞的线程队列。")])])])]),t._v(" "),a("p",[a("strong",[t._v("4. 锁升级（JDK 1.6+ 优化）")])]),t._v(" "),a("p",[t._v("JVM 为减少锁竞争的性能开销，引入了"),a("strong",[t._v("锁升级机制")]),t._v("：\n"),a("strong",[t._v("无锁 → 偏向锁 → 轻量级锁 → 重量级锁")]),t._v("（状态不可逆）")]),t._v(" "),a("p",[t._v("对象头中包含了锁标志位（Lock Word），用于表示对象的锁状态。")]),t._v(" "),a("p",[a("code",[t._v("Mark Word")]),t._v(" 在锁的不同状态下会有不同的含义：")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("无锁（Normal）")]),t._v("：存储对象的哈希值。指没有对资源进行锁定，所有的线程都能访问并修改同一个资源，但同时只有一个线程能修改成功。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("偏向锁（Biased Lock）")]),t._v("：存储线程 ID，表示锁倾向于某个线程。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("适用场景")]),t._v("：单线程多次获取同一锁。")]),t._v(" "),a("li",[a("strong",[t._v("原理")]),t._v("：首次获取锁时，JVM 在对象头 Mark Word 中存储线程 ID（CAS 操作），后续该线程直接获取锁，无需同步开销。")]),t._v(" "),a("li",[a("strong",[t._v("升级条件")]),t._v("：当其他线程尝试获取锁时，偏向锁失效，升级为轻量级锁。")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("轻量级锁（Lightweight Lock）")]),t._v("（也叫自旋锁）：存储指向锁记录的指针。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("适用场景")]),t._v("：多线程交替执行，无锁竞争。")]),t._v(" "),a("li",[a("strong",[t._v("原理")]),t._v("：线程获取锁时，JVM 在当前线程栈帧中创建锁记录（Lock Record），通过 CAS 将 Mark Word 指向锁记录。若成功则获取锁，失败则升级为重量级锁。")]),t._v(" "),a("li",[a("strong",[t._v("特点")]),t._v("：未获取锁的线程"),a("strong",[t._v("自旋等待")]),t._v("，避免线程阻塞和唤醒的开销。长时间的自旋操作是非常消耗资源的，一个线程持有锁，其他线程就只能在原地空耗CPU，执行不了任何有效的任务，这种现象叫做忙等（busy-waiting）")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("重量级锁（Heavyweight Lock）")]),t._v("：存储指向 Monitor 对象的指针。")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("适用场景")]),t._v("：多线程竞争激烈。如果锁竞争情况严重，某个达到最大自旋次数的线程，会将轻量级锁升级为重量级锁（依然是CAS修改锁标志位，但不修改持有锁的线程ID）。当后续线程尝试获取锁时，发现被占用的锁是重量级锁，则直接将自己挂起（而不是忙等），等待将来被唤醒。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("原理")]),t._v("：依赖操作系统的互斥量（Mutex），未获取锁的线程"),a("strong",[t._v("进入内核态阻塞")]),t._v("，锁释放后需唤醒线程（性能开销大）。")])]),t._v(" "),a("li",[a("p",[t._v("重量级锁是指当有一个线程获取锁之后，其余所有等待获取该锁的线程都会处于阻塞状态。")]),t._v(" "),a("p",[t._v("简言之，就是所有的控制权都交给了操作系统，由操作系统来负责线程间的调度和线程的状态变更。而这样会出现频繁地对线程运行状态的切换，线程的挂起和唤醒，从而消耗大量的系统资源")])])])])]),t._v(" "),a("h3",{attrs:{id:"🎯-volatile关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-volatile关键字"}},[t._v("#")]),t._v(" 🎯 volatile关键字？")]),t._v(" "),a("blockquote",[a("p",[t._v("谈谈你对 volatile 的理解？")]),t._v(" "),a("p",[t._v("你知道 volatile 底层的实现机制吗？")]),t._v(" "),a("p",[t._v("volatile 变量和 atomic 变量有什么不同？")]),t._v(" "),a("p",[t._v("volatile 的使用场景，你能举两个例子吗？")]),t._v(" "),a("p",[t._v("volatile 能使得一个非原子操作变成原子操作吗？")])]),t._v(" "),a("p",[a("strong",[t._v("volatile是什么？")])]),t._v(" "),a("p",[t._v("在谈及线程安全时，常会说到一个变量——volatile。在《Java并发编程实战》一书中是这么定义volatile的——“Java语言提供了一种稍弱的同步机制，即volatile变量，用来确保将变量的更新操作通知到其他线程”。")]),t._v(" "),a("p",[t._v("这句话说明了两点：")]),t._v(" "),a("ol",[a("li",[t._v("volatile变量是一种同步机制；")]),t._v(" "),a("li",[t._v("volatile能够确保可见性。")])]),t._v(" "),a("p",[t._v("这两点和我们探讨“volatile变量是否能够保证线程安全性”息息相关。")]),t._v(" "),a("p",[t._v("volatile 是 Java 虚拟机提供的轻量级的同步机制，保证了 Java 内存模型的两个特性，可见性、有序性（禁止指令重排）、不能保证原子性。")]),t._v(" "),a("p",[a("strong",[t._v("场景")]),t._v("：")]),t._v(" "),a("p",[t._v("DCL 版本的单例模式就用到了volatile，因为 DCL 也不一定是线程安全的，"),a("code",[t._v("instance = new Singleton();")]),t._v("并不是一个原子操作，会分为 3 部分执行，")]),t._v(" "),a("ol",[a("li",[t._v("给 instance 分配内存")]),t._v(" "),a("li",[t._v("调用 instance 的构造函数来初始化对象")]),t._v(" "),a("li",[t._v("将 instance 对象指向分配的内存空间（执行完这步 instance 就为非 null 了）")])]),t._v(" "),a("p",[t._v("步骤 2 和 3 不存在数据依赖关系，如果虚拟机存在指令重排序优化，则步骤 2和 3 的顺序是无法确定的")]),t._v(" "),a("p",[t._v("一句话："),a("mark",[t._v("在需要保证原子性的场景，不要使用 volatile")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"🎯-volatile-底层的实现机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-volatile-底层的实现机制"}},[t._v("#")]),t._v(" 🎯 volatile 底层的实现机制？")]),t._v(" "),a("p",[t._v("volatile 可以保证线程可见性且提供了一定的有序性，但是无法保证原子性。在 JVM 底层是基于内存屏障实现的。")]),t._v(" "),a("ul",[a("li",[t._v("当对非 volatile 变量进行读写的时候，每个线程先从内存拷贝变量到 CPU 缓存中。如果计算机有多个CPU，每个线程可能在不同的 CPU 上被处理，这意味着每个线程可以拷贝到不同的 CPU cache 中")]),t._v(" "),a("li",[t._v("而声明变量是 volatile 的，JVM 保证了每次读变量都从内存中读，跳过 CPU cache 这一步，所以就不会有可见性问题\n"),a("ul",[a("li",[t._v("对 volatile 变量进行写操作时，会在写操作后加一条 store 屏障指令，将工作内存中的共享变量刷新回主内存；")]),t._v(" "),a("li",[t._v("对 volatile 变量进行读操作时，会在写操作后加一条 load 屏障指令，从主内存中读取共享变量；")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("基于 "),a("strong",[t._v("内存屏障指令")]),t._v("：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("写操作屏障")]),t._v(" "),a("div",{staticClass:"language-Asm extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("StoreStoreBarrier\nvolatile写操作\nStoreLoadBarrier  // 强制刷新到主存\n")])])])]),t._v(" "),a("li",[a("p",[t._v("读操作屏障")]),t._v(" "),a("div",{staticClass:"language-Asm extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("volatile读操作\nLoadLoadBarrier\nLoadStoreBarrier  // 禁止后续读写重排序\n")])])])])]),t._v(" "),a("p",[a("strong",[t._v("硬件级实现")]),t._v("： x86 平台使用 "),a("code",[t._v("lock")]),t._v(" 前缀指令（如 "),a("code",[t._v("lock addl $0,0(%rsp)")]),t._v("）实现内存屏障效果。")])]),t._v(" "),a("h3",{attrs:{id:"🎯-volatile-是线程安全的吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-volatile-是线程安全的吗"}},[t._v("#")]),t._v(" 🎯 volatile 是线程安全的吗")]),t._v(" "),a("p",[a("strong",[t._v("因为volatile不能保证变量操作的原子性，所以试图通过volatile来保证线程安全性是不靠谱的")])]),t._v(" "),a("h3",{attrs:{id:"🎯-volatile-变量和-atomic-变量有什么不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-volatile-变量和-atomic-变量有什么不同"}},[t._v("#")]),t._v(" 🎯 volatile 变量和 atomic 变量有什么不同？")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("特性")])]),t._v(" "),a("th",[a("strong",[t._v("volatile")])]),t._v(" "),a("th",[a("strong",[t._v("AtomicXXX")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("可见性")])]),t._v(" "),a("td",[t._v("✅ 保证")]),t._v(" "),a("td",[t._v("✅ 保证")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("有序性")])]),t._v(" "),a("td",[t._v("✅ 保证")]),t._v(" "),a("td",[t._v("✅ 保证")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("原子性")])]),t._v(" "),a("td",[t._v("❌ 不保证（如 "),a("code",[t._v("count++")]),t._v("）")]),t._v(" "),a("td",[t._v("✅ 保证（CAS 实现）")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("底层实现")])]),t._v(" "),a("td",[t._v("内存屏障")]),t._v(" "),a("td",[t._v("CAS + volatile")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("性能开销")])]),t._v(" "),a("td",[t._v("低（无锁）")]),t._v(" "),a("td",[t._v("中等（CAS 自旋）")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("适用场景")])]),t._v(" "),a("td",[t._v("状态标志、DCL 单例")]),t._v(" "),a("td",[t._v("计数器、累加操作")])])])]),t._v(" "),a("h3",{attrs:{id:"🎯-synchronized-关键字和-volatile-关键字的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-synchronized-关键字和-volatile-关键字的区别"}},[t._v("#")]),t._v(" 🎯 synchronized 关键字和 volatile 关键字的区别?")]),t._v(" "),a("p",[a("code",[t._v("synchronized")]),t._v(" 关键字和 "),a("code",[t._v("volatile")]),t._v(" 关键字是两个互补的存在，而不是对立的存在：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("volatile关键字")]),t._v("是线程同步的"),a("strong",[t._v("轻量级实现")]),t._v("，所以"),a("strong",[t._v("volatile性能肯定比synchronized关键字要好")]),t._v("。但是"),a("strong",[t._v("volatile关键字只能用于变量而synchronized关键字可以修饰方法以及代码块")]),t._v("。synchronized关键字在JavaSE1.6之后进行了主要包括为了减少获得锁和释放锁带来的性能消耗而引入的偏向锁和轻量级锁以及其它各种优化之后执行效率有了显著提升，"),a("strong",[t._v("实际开发中使用 synchronized 关键字的场景还是更多一些")]),t._v("。")]),t._v(" "),a("li",[a("strong",[t._v("多线程访问volatile关键字不会发生阻塞，而synchronized关键字可能会发生阻塞")])]),t._v(" "),a("li",[a("strong",[t._v("volatile关键字能保证数据的可见性，但不能保证数据的原子性。synchronized关键字两者都能保证。")])]),t._v(" "),a("li",[a("strong",[t._v("volatile关键字主要用于解决变量在多个线程之间的可见性，而 synchronized关键字解决的是多个线程之间访问资源的同步性。")])])]),t._v(" "),a("h2",{attrs:{id:"三、锁机制-🏛️"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、锁机制-🏛️"}},[t._v("#")]),t._v(" 三、锁机制 🏛️")]),t._v(" "),a("h3",{attrs:{id:"🎯-你知道哪几种锁-分别有什么特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-你知道哪几种锁-分别有什么特点"}},[t._v("#")]),t._v(" 🎯 你知道哪几种锁？分别有什么特点？")]),t._v(" "),a("p",[t._v("根据分类标准我们把锁分为以下 7 大类别，分别是：")]),t._v(" "),a("ul",[a("li",[t._v("偏向锁/轻量级锁/重量级锁：偏向锁/轻量级锁/重量级锁，这三种锁特指 synchronized 锁的状态，通过在对象头中的 mark word 来表明锁的状态。")]),t._v(" "),a("li",[t._v("可重入锁/非可重入锁：可重入锁指的是线程当前已经持有这把锁了，能在不释放这把锁的情况下，再次获取这把锁")]),t._v(" "),a("li",[t._v("共享锁/独占锁：共享锁指的是我们同一把锁可以被多个线程同时获得，而独占锁指的就是，这把锁只能同时被一个线程获得。我们的读写锁，就最好地诠释了共享锁和独占锁的理念。读写锁中的读锁，是共享锁，而写锁是独占锁。")]),t._v(" "),a("li",[t._v("公平锁/非公平锁：公平锁的公平的含义在于如果线程现在拿不到这把锁，那么线程就都会进入等待，开始排队，在等待队列里等待时间长的线程会优先拿到这把锁，有先来先得的意思。而非公平锁就不那么“完美”了，它会在一定情况下，忽略掉已经在排队的线程，发生插队现象")]),t._v(" "),a("li",[t._v("悲观锁/乐观锁：悲观锁假定并发冲突"),a("strong",[t._v("一定会发生")]),t._v("，因此在操作共享数据前"),a("strong",[t._v("先加锁")]),t._v("（独占资源）。乐观锁是假定并发冲突"),a("strong",[t._v("很少发生")]),t._v("，操作共享数据时"),a("strong",[t._v("不加锁")]),t._v("，在提交更新时检测是否发生冲突（通常通过版本号或 CAS 机制）")]),t._v(" "),a("li",[t._v("自旋锁/非自旋锁：自旋锁的理念是如果线程现在拿不到锁，并不直接陷入阻塞或者释放 CPU 资源，而是开始利用循环，不停地尝试获取锁，这个循环过程被形象地比喻为“自旋”")]),t._v(" "),a("li",[t._v("可中断锁/不可中断锁：synchronized 关键字修饰的锁代表的是不可中断锁，一旦线程申请了锁，就没有回头路了，只能等到拿到锁以后才能进行其他的逻辑处理。而我们的 ReentrantLock 是一种典型的可中断锁")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("锁类型")])]),t._v(" "),a("th",[a("strong",[t._v("特点")])]),t._v(" "),a("th",[a("strong",[t._v("典型实现")])]),t._v(" "),a("th",[a("strong",[t._v("适用场景")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("乐观锁")]),t._v(" "),a("td",[t._v("无锁，通过 CAS 更新")]),t._v(" "),a("td",[a("code",[t._v("AtomicInteger")]),t._v("、数据库版本号")]),t._v(" "),a("td",[t._v("读多写少、冲突少")])]),t._v(" "),a("tr",[a("td",[t._v("悲观锁")]),t._v(" "),a("td",[t._v("操作前加锁")]),t._v(" "),a("td",[a("code",[t._v("synchronized")]),t._v("、"),a("code",[t._v("ReentrantLock")])]),t._v(" "),a("td",[t._v("写多、竞争激烈")])]),t._v(" "),a("tr",[a("td",[t._v("公平锁")]),t._v(" "),a("td",[t._v("按请求顺序获取锁")]),t._v(" "),a("td",[a("code",[t._v("ReentrantLock(true)")])]),t._v(" "),a("td",[t._v("防止线程饥饿")])]),t._v(" "),a("tr",[a("td",[t._v("可重入锁")]),t._v(" "),a("td",[t._v("同一线程可重复加锁")]),t._v(" "),a("td",[a("code",[t._v("synchronized")]),t._v("、"),a("code",[t._v("ReentrantLock")])]),t._v(" "),a("td",[t._v("嵌套同步块")])]),t._v(" "),a("tr",[a("td",[t._v("读写锁")]),t._v(" "),a("td",[t._v("读锁共享，写锁排他")]),t._v(" "),a("td",[a("code",[t._v("ReentrantReadWriteLock")])]),t._v(" "),a("td",[t._v("读多写少")])]),t._v(" "),a("tr",[a("td",[t._v("偏向锁")]),t._v(" "),a("td",[t._v("单线程优化，无锁竞争")]),t._v(" "),a("td",[t._v("JVM 对 "),a("code",[t._v("synchronized")]),t._v(" 的优化")]),t._v(" "),a("td",[t._v("单线程场景")])]),t._v(" "),a("tr",[a("td",[t._v("自旋锁")]),t._v(" "),a("td",[t._v("循环尝试获取锁")]),t._v(" "),a("td",[t._v("CAS 操作")]),t._v(" "),a("td",[t._v("锁持有时间短")])])])]),t._v(" "),a("h3",{attrs:{id:"🎯-reentrantlock-可重入锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-reentrantlock-可重入锁"}},[t._v("#")]),t._v(" 🎯 ReentrantLock (可重入锁)")]),t._v(" "),a("p",[a("code",[t._v("ReentrantLock")]),t._v(" 是 Java 并发包（"),a("code",[t._v("java.util.concurrent.locks")]),t._v("）中实现的"),a("strong",[t._v("可重入显式锁")]),t._v("，功能上与 "),a("code",[t._v("synchronized")]),t._v(" 类似，但提供更灵活的锁控制（如可中断锁、公平锁、条件变量）。")]),t._v(" "),a("p",[a("strong",[t._v("核心特性")]),t._v("：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("可重入性")]),t._v("：同一线程可多次获取同一把锁而不会死锁（通过内部计数器实现）。\n"),a("ul",[a("li",[t._v("实现原理：锁内部维护一个"),a("strong",[t._v("持有锁的线程标识")]),t._v("和"),a("strong",[t._v("重入次数计数器")]),t._v("，线程再次获取锁时，计数器加 1，释放锁时计数器减 1，直至为 0 时真正释放锁。")])])]),t._v(" "),a("li",[a("strong",[t._v("显式锁管理")]),t._v("：需手动调用 "),a("code",[t._v("lock()")]),t._v(" 和 "),a("code",[t._v("unlock()")]),t._v("（必须在 "),a("code",[t._v("finally")]),t._v(" 块中释放）。")]),t._v(" "),a("li",[a("strong",[t._v("公平锁支持")]),t._v("：通过构造参数 "),a("code",[t._v("new ReentrantLock(true)")]),t._v(" 实现线程按请求顺序获取锁。")]),t._v(" "),a("li",[t._v("灵活的锁获取方式：\n"),a("ul",[a("li",[a("code",[t._v("lock()")]),t._v("：阻塞式获取锁。")]),t._v(" "),a("li",[a("code",[t._v("tryLock()")]),t._v("：非阻塞式尝试获取锁（立即返回结果）。")]),t._v(" "),a("li",[a("code",[t._v("tryLock(timeout, unit)")]),t._v("：带超时的获取锁。")]),t._v(" "),a("li",[a("code",[t._v("lockInterruptibly()")]),t._v("：可响应中断的获取锁。")])])]),t._v(" "),a("li",[a("strong",[t._v("条件变量（Condition）")]),t._v("：替代 "),a("code",[t._v("wait()")]),t._v("/"),a("code",[t._v("notify()")]),t._v("，支持多路等待队列（如生产者 - 消费者模型）。")])]),t._v(" "),a("h3",{attrs:{id:"🎯-reetrantlock有用过吗-怎么实现重入的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-reetrantlock有用过吗-怎么实现重入的"}},[t._v("#")]),t._v(" 🎯 ReetrantLock有用过吗，怎么实现重入的？")]),t._v(" "),a("p",[t._v("ReentrantLock 的可重入性是 AQS 很好的应用之一。在 ReentrantLock 里面，不管是公平锁还是非公平锁，都有一段逻辑。")]),t._v(" "),a("p",[t._v("公平锁：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// java.util.concurrent.locks.ReentrantLock.FairSync#tryAcquire")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//在公平锁中，线程获取锁时会检查等待队列，只有当没有其他线程等待时，才会获取锁，这保证了线程按照请求的顺序获取锁。")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasQueuedPredecessors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareAndSetState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" acquires"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setExclusiveOwnerThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("current"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("current "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getExclusiveOwnerThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" nextc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" acquires"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Maximum lock count exceeded"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("非公平锁：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// java.util.concurrent.locks.ReentrantLock.Sync#nonfairTryAcquire")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareAndSetState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" acquires"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setExclusiveOwnerThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("current"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("current "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getExclusiveOwnerThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" nextc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" acquires"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// overflow")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Maximum lock count exceeded"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("从上面这两段都可以看到，有一个同步状态State来控制整体可重入的情况。State 是 volatile 修饰的，用于保证一定的可见性和有序性。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// java.util.concurrent.locks.AbstractQueuedSynchronizer")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("接下来看 State 这个字段主要的过程：")]),t._v(" "),a("ol",[a("li",[t._v("State 初始化的时候为 0，表示没有任何线程持有锁。")]),t._v(" "),a("li",[t._v("当有线程持有该锁时，值就会在原来的基础上 +1，同一个线程多次获得锁是，就会多次 +1，这里就是可重入的概念。")]),t._v(" "),a("li",[t._v("解锁也是对这个字段 -1，一直到 0，此线程对锁释放。")])]),t._v(" "),a("p",[t._v("还会通过 "),a("code",[t._v("getExclusiveOwnerThread()")]),t._v("、"),a("code",[t._v("setExclusiveOwnerThread(current)")]),t._v("进行当前线程的设置")]),t._v(" "),a("h3",{attrs:{id:"🎯-谈谈-synchronized和-reentrantlock-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-谈谈-synchronized和-reentrantlock-的区别"}},[t._v("#")]),t._v(" 🎯 谈谈 synchronized和 ReentrantLock 的区别？")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("特性")])]),t._v(" "),a("th",[a("strong",[t._v("synchronized")])]),t._v(" "),a("th",[a("strong",[t._v("ReentrantLock")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("锁类型")])]),t._v(" "),a("td",[t._v("隐式锁（JVM 控制）")]),t._v(" "),a("td",[t._v("显式锁（手动获取 / 释放）")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("可重入性")])]),t._v(" "),a("td",[t._v("支持")]),t._v(" "),a("td",[t._v("支持")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("公平性")])]),t._v(" "),a("td",[t._v("非公平（无法设置）")]),t._v(" "),a("td",[t._v("可通过构造方法设置公平 / 非公平")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("锁获取方式")])]),t._v(" "),a("td",[t._v("阻塞式")]),t._v(" "),a("td",[t._v("支持阻塞、非阻塞、超时、可中断")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("线程通信")])]),t._v(" "),a("td",[t._v("使用 "),a("code",[t._v("wait()")]),t._v("/"),a("code",[t._v("notify()")])]),t._v(" "),a("td",[t._v("使用 "),a("code",[t._v("Condition")]),t._v(" 对象")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("性能")])]),t._v(" "),a("td",[t._v("早期版本性能较差，JDK 6+ 优化后接近 ReentrantLock")]),t._v(" "),a("td",[t._v("优化后性能高，尤其在竞争激烈时")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("适用场景")])]),t._v(" "),a("td",[t._v("简单场景（自动释放锁）")]),t._v(" "),a("td",[t._v("复杂场景（需要灵活控制锁逻辑）")])])])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("两者都是可重入锁")])]),t._v(" "),a("li",[a("p",[t._v("synchronized 依赖于 JVM 而 ReentrantLock 依赖于 API")]),t._v(" "),a("p",[t._v("synchronized 是依赖于 JVM 实现的，虚拟机团队在 JDK1.6 为 synchronized 关键字进行了很多优化，但是这些优化都是在虚拟机层面实现的，并没有直接暴露给我们。ReentrantLock 是 JDK 层面实现的（也就是 API 层面，需要 lock() 和 unlock() 方法配合 try/finally 语句块来完成），所以我们可以通过查看它的源代码，来看它是如何实现的。")])]),t._v(" "),a("li",[a("p",[t._v("ReentrantLock 比 synchronized 增加了一些高级功能。主要来说主要有三点："),a("strong",[t._v("①等待可中断；②可实现公平锁；③可实现选择性通知（锁可以绑定多个条件）")])]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("ReentrantLock提供了一种能够中断等待锁的线程的机制")]),t._v("，通过 "),a("code",[t._v("lock.lockInterruptibly()")]),t._v(" 来实现这个机制。也就是说正在等待的线程可以选择放弃等待，改为处理其他事情。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("ReentrantLock可以指定是公平锁还是非公平锁。而synchronized只能是非公平锁。所谓的公平锁就是先等待的线程先获得锁。")]),t._v(" ReentrantLock 默认情况是非公平的，可以通过 ReentrantLock 类的 "),a("code",[t._v("ReentrantLock(boolean fair)")]),t._v(" 构造方法来制定是否是公平的。")])]),t._v(" "),a("li",[a("p",[t._v("synchronized 关键字与 "),a("code",[t._v("wait()")]),t._v(" 和 "),a("code",[t._v("notify()/notifyAll()")]),t._v(" 方法相结合可以实现等待/通知机制，ReentrantLock 类当然也可以实现，但是需要借助于 Condition 接口与 "),a("code",[t._v("newCondition()")]),t._v(" 方法。Condition 是 JDK1.5 之后才有的，它具有很好的灵活性，比如可以实现多路通知功能也就是在一个Lock对象中可以创建多个Condition实例（即对象监视器），"),a("strong",[t._v("线程对象可以注册在指定的Condition中，从而可以有选择性的进行线程通知，在调度线程上更加灵活。 在使用notify()/notifyAll()方法进行通知时，被通知的线程是由 JVM 选择的，用ReentrantLock类结合Condition实例可以实现“选择性通知”")]),t._v(" ，这个功能非常重要，而且是Condition接口默认提供的。而synchronized关键字就相当于整个Lock对象中只有一个Condition实例，所有的线程都注册在它一个身上。如果执行notifyAll()方法的话就会通知所有处于等待状态的线程这样会造成很大的效率问题，而Condition实例的signalAll()方法 只会唤醒注册在该Condition实例中的所有等待线程。")])])])])]),t._v(" "),a("h3",{attrs:{id:"🎯-读写锁-reentrantreadwritelock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-读写锁-reentrantreadwritelock"}},[t._v("#")]),t._v(" 🎯 读写锁 ReentrantReadWriteLock")]),t._v(" "),a("p",[t._v('"ReadWriteLock实现了读写分离，适用于读多写少的场景：')]),t._v(" "),a("p",[a("strong",[t._v("核心特点")]),t._v("：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("读锁共享")]),t._v("：多个线程可同时持有读锁")]),t._v(" "),a("li",[a("strong",[t._v("写锁独占")]),t._v("：写锁与任何锁互斥")]),t._v(" "),a("li",[a("strong",[t._v("锁降级")]),t._v("：持有写锁时可获取读锁")]),t._v(" "),a("li",[a("strong",[t._v("不支持锁升级")]),t._v("：持有读锁时不能获取写锁”")])]),t._v(" "),a("h3",{attrs:{id:"🎯-什么是线程死锁-如何避免死锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-什么是线程死锁-如何避免死锁"}},[t._v("#")]),t._v(" 🎯 什么是线程死锁? 如何避免死锁?")]),t._v(" "),a("p",[t._v("线程死锁描述的是这样一种情况：多个线程同时被阻塞，它们中的一个或者全部都在等待某个资源被释放。由于线程被无限期地阻塞，因此程序不可能正常终止。")]),t._v(" "),a("p",[t._v("如下图所示，线程 A 持有资源 2，线程 B 持有资源 1，他们同时都想申请对方的资源，所以这两个线程就会互相等待而进入死锁状态。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ask.qcloudimg.com/http-save/5876652/1t73ossag1.jpeg",alt:"img"}})]),t._v(" "),a("p",[t._v("下面通过一个例子来说明线程死锁,代码模拟了上图的死锁的情况 (代码来源于《并发编程之美》)：")]),t._v(" "),a("div",{staticClass:"language-JAVA extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DeadLockDemo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" resource1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//资源 1")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" resource2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//资源 2")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("resource1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"get resource1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"waiting get resource2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("resource2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"get resource2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"线程 1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("resource2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"get resource2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"waiting get resource1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("resource1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"get resource1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"线程 2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("Output")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Thread[线程 1,5,main]get resource1\nThread[线程 2,5,main]get resource2\nThread[线程 1,5,main]waiting get resource2\nThread[线程 2,5,main]waiting get resource1\n")])])]),a("p",[t._v("线程 A 通过 synchronized (resource1) 获得 resource1 的监视器锁，然后通过 "),a("code",[t._v("Thread.sleep(1000);")]),t._v("让线程 A 休眠 1s 为的是让线程 B 得到执行然后获取到 resource2 的监视器锁。线程 A 和线程 B 休眠结束了都开始企图请求获取对方的资源，然后这两个线程就会陷入互相等待的状态，这也就产生了死锁。上面的例子符合产生死锁的四个必要条件。学过操作系统的朋友都知道产生死锁必须具备以下四个条件：")]),t._v(" "),a("ul",[a("li",[t._v("互斥条件：该资源任意一个时刻只由一个线程占用。")]),t._v(" "),a("li",[t._v("占有且等待：一个进程因请求资源而阻塞时，对已获得的资源保持不放。")]),t._v(" "),a("li",[t._v("不可强行占有：线程已获得的资源在末使用完之前不能被其他线程强行剥夺，只有自己使用完毕后才释放资源")]),t._v(" "),a("li",[t._v("循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。")])]),t._v(" "),a("h3",{attrs:{id:"🎯-如何避免线程死锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-如何避免线程死锁"}},[t._v("#")]),t._v(" 🎯 如何避免线程死锁?")]),t._v(" "),a("p",[t._v("我上面说了产生死锁的四个必要条件，为了避免死锁，我们只要破坏产生死锁的四个条件中的其中一个就可以了。现在我们来挨个分析一下：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("破坏互斥条件")]),t._v(" ：这个条件我们没有办法破坏，因为我们用锁本来就是想让他们互斥的（临界资源需要互斥访问）。")]),t._v(" "),a("li",[a("strong",[t._v("破坏请求与保持条件")]),t._v("  ：一次性申请所有的资源。")]),t._v(" "),a("li",[a("strong",[t._v("破坏不剥夺条件")]),t._v(" ：占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放它占有的资源。")]),t._v(" "),a("li",[a("strong",[t._v("破坏循环等待条件")]),t._v(" ：靠按序申请资源来预防。按某一顺序申请资源，释放资源则反序释放。破坏循环等待条件。")])]),t._v(" "),a("p",[t._v("我们对线程 2 的代码修改成下面这样就不会产生死锁了。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("resource1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"get resource1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"waiting get resource2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("resource2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"get resource2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"线程 2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("Output")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Thread[线程 1,5,main]get resource1\nThread[线程 1,5,main]waiting get resource2\nThread[线程 1,5,main]get resource2\nThread[线程 2,5,main]get resource1\nThread[线程 2,5,main]waiting get resource2\nThread[线程 2,5,main]get resource2\n\nProcess finished with exit code 0\n")])])]),a("p",[t._v("我们分析一下上面的代码为什么避免了死锁的发生?")]),t._v(" "),a("p",[t._v("线程 1 首先获得到 resource1 的监视器锁，这时候线程 2 就获取不到了。然后线程 1 再去获取 resource2 的监视器锁，可以获取到。然后线程 1 释放了对 resource1、resource2 的监视器锁的占用，线程 2 获取到就可以执行了。这样就破坏了破坏循环等待条件，因此避免了死锁。")]),t._v(" "),a("h3",{attrs:{id:"🎯-如何排查死锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-如何排查死锁"}},[t._v("#")]),t._v(" 🎯 如何排查死锁?")]),t._v(" "),a("p",[t._v("定位死锁最常见的方式就是利用 jstack 等工具获取线程栈，然后定位互相之间的依赖关系，进而找到死锁。如果是比较明显的死锁，往往 jstack 等就能直接定位，类似 JConsole 甚至可以在图形界面进行有限的死锁检测。")]),t._v(" "),a("p",[t._v("如果程序运行时发生了死锁，绝大多数情况下都是无法在线解决的，只能重启、修正程序本身问题。所以，代码开发阶段互相审查，或者利用工具进行预防性排查，往往也是很重要的。")]),t._v(" "),a("h4",{attrs:{id:"死锁预防"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#死锁预防"}},[t._v("#")]),t._v(" 死锁预防")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("以确定的顺序获得锁")]),t._v(" "),a("p",[t._v("如果必须获取多个锁，那么在设计的时候需要充分考虑不同线程之前获得锁的顺序")])]),t._v(" "),a("li",[a("p",[t._v("超时放弃")]),t._v(" "),a("p",[t._v("当使用 synchronized 关键词提供的内置锁时，只要线程没有获得锁，那么就会永远等待下去，然而Lock接口提供了"),a("code",[t._v("boolean tryLock(long time, TimeUnit unit) throws InterruptedException")]),t._v("方法，该方法可以按照固定时长等待锁，因此线程可以在获取锁超时以后，主动释放之前已经获得的所有的锁。通过这种方式，也可以很有效地避免死锁。")])])]),t._v(" "),a("h3",{attrs:{id:"🎯-哲学家就餐问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-哲学家就餐问题"}},[t._v("#")]),t._v(" 🎯 哲学家就餐问题？")]),t._v(" "),a("blockquote",[a("p",[t._v("这题我刚毕业那会，遇见过一次，笔试题")]),t._v(" "),a("p",[t._v("哲学家就餐问题（The Dining Philosophers Problem）是计算机科学中经典的同步问题之一，由 Edsger Dijkstra 于 1965 年提出。问题描述如下：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("有五个哲学家围坐在圆桌旁，每个哲学家前面有一盘意大利面。")])]),t._v(" "),a("li",[a("p",[t._v("在每两位哲学家之间有一只叉子（共五只叉子）。")])]),t._v(" "),a("li",[a("p",[t._v("哲学家需要两只叉子才能吃意大利面。")])]),t._v(" "),a("li",[a("p",[t._v("哲学家可以进行两个动作：思考和吃饭。")])]),t._v(" "),a("li",[a("p",[t._v("当哲学家思考时，他们不占用任何叉子；当哲学家准备吃饭时，他们必须先拿起左右两边的叉子。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img.starfish.ink/algorithm/philosopher.jpeg",alt:"1226. 哲学家进餐- 力扣（LeetCode）"}})])])])]),t._v(" "),a("p",[t._v("问题的关键在于如何避免死锁（Deadlock），确保每个哲学家都有机会吃饭，同时也要避免资源饥饿（Starvation）")]),t._v(" "),a("p",[a("strong",[t._v("解决方案")])]),t._v(" "),a("p",[t._v("对于这个问题我们该如何解决呢？有多种解决方案，这里我们讲讲其中的几种。前面我们讲过，要想解决死锁问题，只要破坏死锁四个必要条件的任何一个都可以。")]),t._v(" "),a("p",[a("strong",[t._v("1. 服务员检查")])]),t._v(" "),a("p",[t._v("第一个解决方案就是引入服务员检查机制。比如我们引入一个服务员，当每次哲学家要吃饭时，他需要先询问服务员：我现在能否去拿筷子吃饭？此时，服务员先判断他拿筷子有没有发生死锁的可能，假如有的话，服务员会说：现在不允许你吃饭。这是一种解决方案。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("concurrent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Semaphore")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("concurrent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("locks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Lock")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("concurrent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("locks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReentrantLock")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DiningPhilosophers")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" forks "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReentrantLock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Semaphore")]),t._v(" waiter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Semaphore")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DiningPhilosophers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" forks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            forks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReentrantLock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" philosopher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        waiter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("acquire")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" leftFork "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" philosopher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" rightFork "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("philosopher "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        forks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("leftFork"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        forks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("rightFork"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("eat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("philosopher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            forks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("leftFork"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            forks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("rightFork"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            waiter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("release")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("eat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" philosopher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Philosopher "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" philosopher "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" is eating"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Simulate eating")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Philosopher "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" philosopher "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" finished eating"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DiningPhilosophers")]),t._v(" dp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DiningPhilosophers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" philosopher "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    dp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("philosopher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("interrupt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("2. 领导调节")])]),t._v(" "),a("p",[t._v("基于死锁"),a("strong",[t._v("检测和恢复策略")]),t._v("，可以引入一个领导，这个领导进行定期巡视。如果他发现已经发生死锁了，就会剥夺某一个哲学家的筷子，让他放下。这样一来，由于这个人的牺牲，其他的哲学家就都可以吃饭了。这也是一种解决方案。")]),t._v(" "),a("p",[a("strong",[t._v("3. 改变一个哲学家拿筷子的顺序")])]),t._v(" "),a("p",[t._v("我们还可以利用"),a("strong",[t._v("死锁避免")]),t._v("策略，那就是从逻辑上去避免死锁的发生，比如改变其中一个哲学家拿筷子的顺序。我们可以让 4 个哲学家都先拿左边的筷子再拿右边的筷子，但是"),a("strong",[t._v("有一名哲学家与他们相反，他是先拿右边的再拿左边的")]),t._v("，这样一来就不会出现循环等待同一边筷子的情况，也就不会发生死锁了。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("concurrent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("locks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Lock")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("concurrent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("locks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReentrantLock")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DiningPhilosophers")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" forks "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReentrantLock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DiningPhilosophers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" forks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            forks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReentrantLock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" philosopher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" leftFork "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" philosopher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" rightFork "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("philosopher "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("philosopher "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            forks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("leftFork"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            forks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("rightFork"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            forks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("rightFork"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            forks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("leftFork"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("eat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("philosopher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            forks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("leftFork"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            forks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("rightFork"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("eat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" philosopher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Philosopher "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" philosopher "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" is eating"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Simulate eating")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Philosopher "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" philosopher "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" finished eating"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DiningPhilosophers")]),t._v(" dp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DiningPhilosophers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" philosopher "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    dp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("philosopher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("interrupt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"🎯-何谓悲观锁与乐观锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-何谓悲观锁与乐观锁"}},[t._v("#")]),t._v(" 🎯 何谓悲观锁与乐观锁?")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("悲观锁")])]),t._v(" "),a("p",[t._v("总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿 数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁(共享资 源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程)。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。Java 中 synchronized 和 ReentrantLock 等独占锁就是悲观锁思想的实现。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("乐观锁")])]),t._v(" "),a("p",[t._v("总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号机制和 CAS 算法实现。乐观锁适用于多读的应用类型，这样可以提 高吞吐量，像数据库提供的类似于 "),a("strong",[t._v("write_condition")]),t._v(" 机制，其实都是提供的乐 观锁。在 Java 中 "),a("code",[t._v("java.util.concurrent.atomic")]),t._v(" 包下面的原子变量类就是使用了 乐观锁的一种实现方式 "),a("strong",[t._v("CAS")]),t._v(" 实现的。")])])]),t._v(" "),a("p",[a("strong",[t._v("两种锁的使用场景")])]),t._v(" "),a("p",[t._v("从上面对两种锁的介绍，我们知道两种锁各有优缺点，不可认为一种好于另一 种，像"),a("strong",[t._v("乐观锁适用于写比较少的情况下(多读场景)")]),t._v("，即冲突真的很少发生的 时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。但如果是多写的情况，一般会经常产生冲突，这就会导致上层应用会不断的进行 retry，这样反倒是降低了性能，所以"),a("strong",[t._v("一般多写的场景下用悲观锁就比较合适")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"🎯-对比公平和非公平的优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-对比公平和非公平的优缺点"}},[t._v("#")]),t._v(" 🎯 对比公平和非公平的优缺点?")]),t._v(" "),a("p",[t._v("公平锁的优点在于各个线程公平平等，每个线程等待一段时间后，都有执行的机会，而它的缺点就在于整体执行速度更慢，吞吐量更小，相反非公平锁的优势就在于整体执行速度更快，吞吐量更大，但同时也可能产生线程饥饿问题，也就是说如果一直有线程插队，那么在等待队列中的线程可能长时间得不到运行")]),t._v(" "),a("h2",{attrs:{id:"四、原子操作与cas-无锁编程-⚛️"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、原子操作与cas-无锁编程-⚛️"}},[t._v("#")]),t._v(" 四、原子操作与CAS（无锁编程）⚛️")]),t._v(" "),a("p",[t._v("在编程中，具备原子性的操作被称为原子操作。原子操作是指一系列的操作，要么全部发生，要么全部不发生，不会出现执行一半就终止的情况。")]),t._v(" "),a("blockquote",[a("p",[t._v("下面我们举一个不具备原子性的例子，比如 i++ 这一行代码在 CPU 中执行时，可能会从一行代码变为以下的 3 个指令：")]),t._v(" "),a("ul",[a("li",[t._v("第一个步骤是读取；")]),t._v(" "),a("li",[t._v("第二个步骤是增加；")]),t._v(" "),a("li",[t._v("第三个步骤是保存。")])]),t._v(" "),a("p",[t._v("这就说明 i++ 是不具备原子性的，同时也证明了 i++ 不是线程安全的")])]),t._v(" "),a("p",[t._v("Java 中的以下几种操作是具备原子性的，属于原子操作：")]),t._v(" "),a("ul",[a("li",[t._v("除了 long 和 double 之外的基本类型（int、byte、boolean、short、char、float）的读/写操作，都天然的具备原子性；")]),t._v(" "),a("li",[t._v("所有引用 reference 的读/写操作；")]),t._v(" "),a("li",[t._v("加了 volatile 后，所有变量的读/写操作（包含 long 和 double）。这也就意味着 long 和 double 加了 volatile 关键字之后，对它们的读写操作同样具备原子性；")]),t._v(" "),a("li",[t._v("在 java.concurrent.Atomic 包中的一部分类的一部分方法是具备原子性的，比如 AtomicInteger 的 incrementAndGet 方法。")])]),t._v(" "),a("blockquote",[a("p",[t._v("在 Java 中，"),a("code",[t._v("long")]),t._v(" 和 "),a("code",[t._v("double")]),t._v(" 变量的原子性取决于具体的硬件和 JVM 实现，但通常情况下，对 "),a("code",[t._v("long")]),t._v(" 和 "),a("code",[t._v("double")]),t._v(" 类型变量的读和写操作不是原子的。这是因为 "),a("code",[t._v("long")]),t._v(" 和 "),a("code",[t._v("double")]),t._v(" 在 JVM 中占用 64 位，而在 32 位的 JVM 实现中，对 64 位的操作可能需要分两步进行：每次操作 32 位。因此，如果没有额外的同步措施，多个线程可能会看到部分更新的值，这会导致数据不一致。")]),t._v(" "),a("p",[a("strong",[t._v("实际开发中")]),t._v("，目前各种平台下的主流虚拟机的实现中，几乎都会把 64 位数据的读写操作作为原子操作来对待，因此我们在编写代码时一般不需要为了避免读到“半个变量”而把 long 和 double 声明为 volatile 的")])]),t._v(" "),a("p",[a("strong",[t._v("原子类的作用")]),t._v("和锁有类似之处，是为了保证并发情况下线程安全。不过原子类相比于锁，有一定的优势：")]),t._v(" "),a("ul",[a("li",[t._v("粒度更细：原子变量可以把竞争范围缩小到变量级别，通常情况下，锁的粒度都要大于原子变量的粒度。")]),t._v(" "),a("li",[t._v("效率更高：除了高度竞争的情况之外，使用原子类的效率通常会比使用同步互斥锁的效率更高，因为原子类底层利用了 CAS 操作，不会阻塞线程。")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("类型")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("具体类")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Atomic* 基本类型原子类")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("AtomicInteger、AtomicLong、AtomicBoolean")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Atomic*Array 数组类型原子类")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("AtomicIntegerArray、AtomicLongArray、AtomicReferenceArray")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Atomic*Reference 引用类型原子类")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("AtomicReference、AtomicStampedReference、AtomicMarkableReference")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Atomic*FieldUpdater 升级类型原子类")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("AtomicIntegerfieldupdater、AtomicLongFieldUpdater、AtomicReferenceFieldUpdater")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Adder 累加器")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("LongAdder、DoubleAdder")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Accumulator 积累器")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("LongAccumulator、DoubleAccumulator")])])])]),t._v(" "),a("h3",{attrs:{id:"🎯-atomicinteger-底层实现原理是什么-如何在自己的产品代码中应用-cas-操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-atomicinteger-底层实现原理是什么-如何在自己的产品代码中应用-cas-操作"}},[t._v("#")]),t._v(" 🎯 AtomicInteger 底层实现原理是什么？如何在自己的产品代码中应用 CAS 操作？")]),t._v(" "),a("p",[t._v("AtomicIntger 是对 int 类型的一个封装，提供原子性的访问和更新操作，其原子性操作的实现是基于 CAS（"),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Compare-and-swap",target:"_blank",rel:"noopener noreferrer"}},[t._v("compare-and-swap"),a("OutboundLink")],1),t._v("）技术。")]),t._v(" "),a("p",[t._v("所谓 CAS，表征的是一系列操作的集合，获取当前数值，进行一些运算，利用 CAS 指令试图进行更新。如果当前数值未变，代表没有其他线程进行并发修改，则成功更新。否则，可能出现不同的选择，要么进行重试，要么就返回一个成功或者失败的结果。")]),t._v(" "),a("p",[t._v("从 AtomicInteger 的内部属性可以看出，它依赖于 Unsafe 提供的一些底层能力，进行底层操作；以 volatile 的 value 字段，记录数值，以保证可见性。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("jdk"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("internal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("misc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("Unsafe")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("U")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("jdk"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("internal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("misc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("Unsafe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getUnsafe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VALUE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("U")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("objectFieldOffset")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AtomicInteger")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("具体的原子操作细节，可以参考任意一个原子更新方法，比如下面的 getAndIncrement。")]),t._v(" "),a("p",[t._v("Unsafe 会利用 value 字段的内存地址偏移，直接完成操作。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAndIncrement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("U")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAndAddInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VALUE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("因为 getAndIncrement 需要返归数值，所以需要添加失败重试逻辑。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAndAddInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" offset"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" delta"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        v "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getIntVolatile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" offset"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("weakCompareAndSetInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" offset"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" delta"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("而类似 compareAndSet 这种返回 boolean 类型的函数，因为其返回值表现的就是成功与否，所以不需要重试。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareAndSet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" expectedValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" newValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("CAS 是 Java 并发中所谓 lock-free 机制的基础。")]),t._v(" "),a("p",[t._v("Java 虚拟机又提供了一个轻量级的同步机制——volatile，但是 volatile 算是乞丐版的 synchronized，并不能保证原子性 ，所以，又增加了"),a("code",[t._v("java.util.concurrent.atomic")]),t._v("包， 这个包下提供了一系列原子类。")]),t._v(" "),a("h3",{attrs:{id:"🎯-cas-知道吗-如何实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-cas-知道吗-如何实现"}},[t._v("#")]),t._v(" 🎯 CAS 知道吗，如何实现？")]),t._v(" "),a("ul",[a("li",[t._v("CAS：全称 "),a("code",[t._v("Compare and swap")]),t._v("，即"),a("strong",[t._v("比较并交换")]),t._v("，它是一条 "),a("strong",[t._v("CPU 同步原语")]),t._v("。 是一种硬件对并发的支持，针对多处理器操作而设计的一种特殊指令，用于管理对共享数据的并发访问。")]),t._v(" "),a("li",[t._v("CAS 是一种无锁的非阻塞算法的实现。")]),t._v(" "),a("li",[t._v("CAS 包含了 3 个操作数：\n"),a("ul",[a("li",[t._v("需要读写的内存值 V")]),t._v(" "),a("li",[t._v("旧的预期值 A")]),t._v(" "),a("li",[t._v("要修改的更新值 B")])])]),t._v(" "),a("li",[t._v("当且仅当 V 的值等于 A 时，CAS 通过原子方式用新值 B 来更新 V 的 值，否则不会执行任何操作（他的功能是判断内存某个位置的值是否为预期值，如果是则更改为新的值，这个过程是原子的。）")]),t._v(" "),a("li",[t._v("缺点\n"),a("ul",[a("li",[t._v("自旋时间过长：由于单次 CAS 不一定能执行成功，所以 "),a("strong",[t._v("CAS 往往是配合着循环来实现的")]),t._v("，有的时候甚至是死循环，不停地进行重试，直到线程竞争不激烈的时候，才能修改成功")]),t._v(" "),a("li",[t._v("只能保证一个共享变量的原子操作：不能灵活控制线程安全的范围，我们不能针对多个共享变量同时进行 CAS 操作，因为这多个变量之间是独立的，简单的把原子操作组合到一起，并不具备原子性")]),t._v(" "),a("li",[t._v("ABA 问题（用 AtomicReference 避免）")])])])]),t._v(" "),a("h3",{attrs:{id:"🎯-cas-底层原理-谈谈你对-unsafe-的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-cas-底层原理-谈谈你对-unsafe-的理解"}},[t._v("#")]),t._v(" 🎯 CAS 底层原理，谈谈你对 UnSafe 的理解？")]),t._v(" "),a("blockquote",[a("p",[t._v('"CAS（Compare and Swap）是一种硬件支持的原子操作：')]),t._v(" "),a("p",[a("strong",[t._v("基本原理")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("包含3个操作数：内存值V、预期值A、更新值B")]),t._v(" "),a("li",[t._v("当且仅当V==A时，才将V更新为B")]),t._v(" "),a("li",[t._v("CPU硬件保证整个操作的原子性")])]),t._v(" "),a("p",[a("strong",[t._v("优势与问题")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("优势：无锁化，避免线程阻塞")]),t._v(" "),a("li",[t._v("ABA问题：可用AtomicStampedReference解决")]),t._v(" "),a("li",[t._v('自旋开销：高竞争下可能CPU空转"')])])]),t._v(" "),a("p",[t._v("CAS 并发原语体现在 Java 语言中的 "),a("code",[t._v("sum.misc.Unsafe")]),t._v(" 类中的各个方法。调用 Unsafe 类中的 CAS 方法， JVM 会帮助我们实现出 CAS 汇编指令。")]),t._v(" "),a("p",[t._v("是 CAS 的核心类，由于 Java 方法无法直接访问底层系统，需要通过本地（native）方法来访问，UnSafe 相当于一个后门，UnSafe 类中的所有方法都是 native 修饰的，也就是说该类中的方法都是直接调用操作系统底层资源执行相应任务。")]),t._v(" "),a("h3",{attrs:{id:"🎯-讲一讲atomicinteger-为什么要用-cas-而不是-synchronized"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-讲一讲atomicinteger-为什么要用-cas-而不是-synchronized"}},[t._v("#")]),t._v(" 🎯 讲一讲AtomicInteger，为什么要用 CAS 而不是 synchronized？")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("高效的线程安全")]),t._v("：CAS 能在多线程下提供线程安全的操作，而不需要像 "),a("code",[t._v("synchronized")]),t._v(" 一样使用锁。CAS 的自旋机制在短时间内是非常高效的，因为大多数情况下操作会在几次尝试内成功。")]),t._v(" "),a("li",[a("strong",[t._v("无锁优化")]),t._v("：CAS 不会引发线程的阻塞和挂起，避免了线程在获取锁时的开销。这对于高并发场景特别重要，"),a("code",[t._v("AtomicInteger")]),t._v(" 能在高并发场景下提供更好的性能表现。")]),t._v(" "),a("li",[a("strong",[t._v("避免锁的竞争和开销")]),t._v("："),a("code",[t._v("synchronized")]),t._v(" 在多线程竞争时，失败的线程会被挂起并等待唤醒，涉及到线程上下文切换，开销较大。而 CAS 通过乐观锁的思想，只在冲突发生时重试，避免了不必要的线程切换。")])]),t._v(" "),a("p",[a("strong",[t._v("CAS 的问题：")])]),t._v(" "),a("p",[t._v("虽然 CAS 比 "),a("code",[t._v("synchronized")]),t._v(" 更高效，但它也有一些缺点：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("ABA 问题")]),t._v("：CAS 会比较当前值是否等于期望值，但如果一个变量的值从 A 变为 B，再变回 A，CAS 会认为它没有改变，从而通过比较。为了解决这个问题，可以引入版本号。")]),t._v(" "),a("li",[a("strong",[t._v("自旋开销")]),t._v("：如果线程不断尝试修改变量，但总是失败，自旋的开销会变得很高。在高竞争环境下，CAS 的性能优势可能会减小。")]),t._v(" "),a("li",[a("strong",[t._v("只能保证一个变量的原子性")]),t._v("：CAS 只能操作单个变量，对于复杂的并发操作场景，仍然需要使用锁或其他同步机制。")])]),t._v(" "),a("h3",{attrs:{id:"🎯-为什么高并发下-longadder-比-atomiclong-效率更高"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-为什么高并发下-longadder-比-atomiclong-效率更高"}},[t._v("#")]),t._v(" 🎯 为什么高并发下 LongAdder 比 AtomicLong 效率更高？")]),t._v(" "),a("blockquote",[a("p",[t._v('"LongAdder采用分段累加思想：')]),t._v(" "),a("p",[a("strong",[t._v("核心机制")]),t._v("：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("base变量")]),t._v("：竞争不激烈时直接累加")]),t._v(" "),a("li",[a("strong",[t._v("Cell[]数组")]),t._v("：竞争激烈时分散累加")]),t._v(" "),a("li",[a("strong",[t._v("hash分配")]),t._v("：线程按hash值分配到不同Cell")])]),t._v(" "),a("p",[a("strong",[t._v("性能优势")]),t._v('：空间换时间，减少CAS竞争"')])]),t._v(" "),a("p",[t._v("LongAdder 引入了分段累加的概念，内部一共有两个参数参与计数：第一个叫作 base，它是一个变量，第二个是 Cell[] ，是一个数组。")]),t._v(" "),a("p",[t._v("其中的 base 是用在竞争不激烈的情况下的，可以直接把累加结果改到 base 变量上。")]),t._v(" "),a("p",[t._v("那么，当竞争激烈的时候，就要用到我们的 Cell[] 数组了。一旦竞争激烈，各个线程会分散累加到自己所对应的那个 Cell[] 数组的某一个对象中，而不会大家共用同一个。")]),t._v(" "),a("p",[t._v("这样一来，LongAdder 会把不同线程对应到不同的 Cell 上进行修改，降低了冲突的概率，这是一种分段的理念，提高了并发性，这就和 Java 7 的 ConcurrentHashMap 的 16 个 Segment 的思想类似。")]),t._v(" "),a("p",[t._v("竞争激烈的时候，LongAdder 会通过计算出每个线程的 hash 值来给线程分配到不同的 Cell 上去，每个 Cell 相当于是一个独立的计数器，这样一来就不会和其他的计数器干扰，Cell 之间并不存在竞争关系，所以在自加的过程中，就大大减少了刚才的 flush 和 refresh，以及降低了冲突的概率，这就是为什么 LongAdder 的吞吐量比 AtomicLong 大的原因，本质是空间换时间，因为它有多个计数器同时在工作，所以占用的内存也要相对更大一些。")]),t._v(" "),a("h2",{attrs:{id:"五、并发工具类-同步辅助-🛠️"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、并发工具类-同步辅助-🛠️"}},[t._v("#")]),t._v(" 五、并发工具类（同步辅助）🛠️")]),t._v(" "),a("h3",{attrs:{id:"🎯-aqs-原理分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-aqs-原理分析"}},[t._v("#")]),t._v(" 🎯 AQS 原理分析")]),t._v(" "),a("blockquote",[a("p",[t._v("AQS 是 JUC 的核心框架，其原理可概括为：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("状态管理")]),t._v("：通过 "),a("code",[t._v("volatile int state")]),t._v(" 和 CAS 操作保证原子性。")]),t._v(" "),a("li",[a("strong",[t._v("队列设计")]),t._v("：CLH 变体双向链表，管理等待线程。")]),t._v(" "),a("li",[a("strong",[t._v("模板方法")]),t._v("：子类通过重写 "),a("code",[t._v("tryAcquire()")]),t._v("/"),a("code",[t._v("tryRelease()")]),t._v(" 实现独占或共享锁。")]),t._v(" "),a("li",[t._v("核心机制：\n"),a("ul",[a("li",[t._v("独占模式（如 "),a("code",[t._v("ReentrantLock")]),t._v("）：线程竞争失败则入队阻塞。")]),t._v(" "),a("li",[t._v("共享模式（如 "),a("code",[t._v("CountDownLatch")]),t._v("）：允许多线程同时访问。")])])]),t._v(" "),a("li",[a("strong",[t._v("应用场景")]),t._v("：锁、信号量、倒计时器等同步工具的基础。")])])]),t._v(" "),a("p",[t._v("AQS的全称为（AbstractQueuedSynchronizer），这个类在 "),a("code",[t._v("java.util.concurrent.locks")]),t._v(" 包下面。")]),t._v(" "),a("p",[t._v("AQS是一个用来构建锁和同步器的框架，使用AQS能简单且高效地构造出应用广泛的大量的同步器，比如我们提到的ReentrantLock，Semaphore，其他的诸如ReentrantReadWriteLock，SynchronousQueue，FutureTask 等等皆是基于 AQS 的。当然，我们自己也能利用 AQS 非常轻松容易地构造出符合我们自己需求的同步器。")]),t._v(" "),a("p",[t._v("AQS 是 Java 并发包（JUC）的核心框架，用于构建锁（如 "),a("code",[t._v("ReentrantLock")]),t._v("）和同步器（如 "),a("code",[t._v("CountDownLatch")]),t._v("）。")]),t._v(" "),a("p",[t._v("下面大部分内容其实在AQS类注释上已经给出了，不过是英语看着比较吃力一点，感兴趣的话可以看看源码。")]),t._v(" "),a("p",[a("strong",[t._v("AQS核心思想是，如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制AQS是用CLH队列锁实现的，即将暂时获取不到锁的线程加入到队列中。")])]),t._v(" "),a("blockquote",[a("p",[t._v("CLH(Craig,Landin,and Hagersten)队列是一个虚拟的双向队列（虚拟的双向队列即不存在队列实例，仅存在结点之间的关联关系）。AQS 是将每条请求共享资源的线程封装成一个 CLH 锁队列的一个结点（Node）来实现锁的分配。")])]),t._v(" "),a("p",[t._v("看个 AQS(AbstractQueuedSynchronizer)原理图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://blog-1300588375.cos.ap-chengdu.myqcloud.com/image_1624029202628.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("AQS 使用一个 int 成员变量来表示同步状态，通过内置的 FIFO 队列来完成获取资源线程的排队工作。AQS 使用 CAS 对该同步状态进行原子操作实现对其值的修改。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//共享变量，使用volatile修饰保证线程可见性")]),t._v("\n")])])]),a("p",[t._v("状态信息通过 protected 类型的 getState，setState，compareAndSetState 进行操作")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回同步状态的当前值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置同步状态的值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" newState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n        state "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//原子地（CAS操作）将同步状态值设置为给定值update如果当前同步状态的值等于expect（期望值）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareAndSetState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" expect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" update"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" unsafe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareAndSwapInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stateOffset"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" expect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" update"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("而 state 的含义并不是一成不变的，它会"),a("strong",[t._v("根据具体实现类的作用不同而表示不同的含义")]),t._v("。")]),t._v(" "),a("p",[t._v("比如说在信号量里面，state 表示的是剩余"),a("strong",[t._v("许可证的数量")]),t._v("。如果我们最开始把 state 设置为 10，这就代表许可证初始一共有 10 个，然后当某一个线程取走一个许可证之后，这个 state 就会变为 9，所以信号量的 state 相当于是一个内部计数器。")]),t._v(" "),a("p",[t._v("再比如，在 CountDownLatch 工具类里面，state 表示的是"),a("strong",[t._v("需要“倒数”的数量")]),t._v("。一开始我们假设把它设置为 5，当每次调用 CountDown 方法时，state 就会减 1，一直减到 0 的时候就代表这个门闩被放开。")]),t._v(" "),a("p",[t._v("下面我们再来看一下 state 在 ReentrantLock 中是什么含义，在 ReentrantLock 中它表示的是"),a("strong",[t._v("锁的占有情况")]),t._v("。最开始是 0，表示没有任何线程占有锁；如果 state 变成 1，则就代表这个锁已经被某一个线程所持有了。")])]),t._v(" "),a("p",[a("strong",[t._v("AQS 定义两种资源共享方式")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Exclusive（独占）：只有一个线程能执行，如 ReentrantLock。又可分为公平锁和非公平锁：")]),t._v(" "),a("ul",[a("li",[t._v("公平锁：按照线程在队列中的排队顺序，先到者先拿到锁")]),t._v(" "),a("li",[t._v("非公平锁：当线程要获取锁时，无视队列顺序直接去抢锁，谁抢到就是谁的")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Share")]),t._v("（共享）：多个线程可同时执行，如 Semaphore/CountDownLatch。Semaphore、CountDownLatch、 CyclicBarrier、ReadWriteLock。")])])]),t._v(" "),a("p",[t._v("ReentrantReadWriteLock 可以看成是组合式，因为ReentrantReadWriteLock 也就是读写锁允许多个线程同时对某一资源进行读。")]),t._v(" "),a("p",[t._v("不同的自定义同步器争用共享资源的方式也不同。自定义同步器在实现时只需要实现共享资源 state 的获取与释放方式即可，至于具体线程等待队列的维护（如获取资源失败入队/唤醒出队等），AQS已经在顶层实现好了。")]),t._v(" "),a("p",[a("strong",[t._v("AQS底层使用了模板方法模式")])]),t._v(" "),a("p",[t._v("同步器的设计是基于模板方法模式的，如果需要自定义同步器一般的方式是这样（模板方法模式很经典的一个应用）：")]),t._v(" "),a("ol",[a("li",[t._v("使用者继承AbstractQueuedSynchronizer并重写指定的方法。（这些重写方法很简单，无非是对于共享资源state的获取和释放）")]),t._v(" "),a("li",[t._v("将AQS组合在自定义同步组件的实现中，并调用其模板方法，而这些模板方法会调用使用者重写的方法。")])]),t._v(" "),a("p",[t._v("这和我们以往通过实现接口的方式有很大区别，这是模板方法模式很经典的一个运用。")]),t._v(" "),a("p",[a("strong",[t._v("AQS使用了模板方法模式，自定义同步器时需要重写下面几个AQS提供的模板方法：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("isHeldExclusively()//该线程是否正在独占资源。只有用到condition才需要去实现它。\ntryAcquire(int)//独占方式。尝试获取资源，成功则返回true，失败则返回false。\ntryRelease(int)//独占方式。尝试释放资源，成功则返回true，失败则返回false。\ntryAcquireShared(int)//共享方式。尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。\ntryReleaseShared(int)//共享方式。尝试释放资源，成功则返回true，失败则返回false。\n")])])]),a("p",[t._v("默认情况下，每个方法都抛出 "),a("code",[t._v("UnsupportedOperationException")]),t._v("。 这些方法的实现必须是内部线程安全的，并且通常应该简短而不是阻塞。AQS类中的其他方法都是final ，所以无法被其他类使用，只有这几个方法可以被其他类使用。")]),t._v(" "),a("p",[t._v("以ReentrantLock为例，state初始化为0，表示未锁定状态。A线程lock()时，会调用tryAcquire()独占该锁并将state+1。此后，其他线程再tryAcquire()时就会失败，直到A线程unlock()到state=0（即释放锁）为止，其它线程才有机会获取该锁。当然，释放锁之前，A线程自己是可以重复获取此锁的（state会累加），这就是可重入的概念。但要注意，获取多少次就要释放多么次，这样才能保证state是能回到零态的。")]),t._v(" "),a("p",[t._v("再以CountDownLatch以例，任务分为N个子线程去执行，state也初始化为N（注意N要与线程个数一致）。这N个子线程是并行执行的，每个子线程执行完后countDown()一次，state会CAS(Compare and Swap)减1。等到所有子线程都执行完后(即state=0)，会unpark()主调用线程，然后主调用线程就会从await()函数返回，继续后余动作。")]),t._v(" "),a("p",[t._v("一般来说，自定义同步器要么是独占方法，要么是共享方式，他们也只需实现"),a("code",[t._v("tryAcquire-tryRelease")]),t._v("、"),a("code",[t._v("tryAcquireShared-tryReleaseShared")]),t._v("中的一种即可。但AQS也支持自定义同步器同时实现独占和共享两种方式，如"),a("code",[t._v("ReentrantReadWriteLock")]),t._v("。")]),t._v(" "),a("p",[t._v("推荐两篇 AQS 原理和相关源码分析的文章：")]),t._v(" "),a("ul",[a("li",[t._v("http://www.cnblogs.com/waterystone/p/4920797.html")]),t._v(" "),a("li",[t._v("https://www.cnblogs.com/chengxiao/archive/2017/07/24/7141160.html")])]),t._v(" "),a("h3",{attrs:{id:"🎯-aqs-组件总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-aqs-组件总结"}},[t._v("#")]),t._v(" 🎯 AQS 组件总结")]),t._v(" "),a("p",[t._v("“AQS 衍生的同步组件可分为：")]),t._v(" "),a("ol",[a("li",[t._v("独占模式：\n"),a("ul",[a("li",[a("code",[t._v("ReentrantLock")]),t._v("：可重入锁，支持公平 / 非公平，手动控制加解锁。")]),t._v(" "),a("li",[a("code",[t._v("ReentrantReadWriteLock")]),t._v("：读写分离，读锁共享、写锁独占。")])])]),t._v(" "),a("li",[t._v("共享模式：\n"),a("ul",[a("li",[a("code",[t._v("Semaphore")]),t._v("：信号量，控制并发线程数（如限流）。")]),t._v(" "),a("li",[a("code",[t._v("CountDownLatch")]),t._v("：倒计时门栓，一次性等待多线程完成。")]),t._v(" "),a("li",[a("code",[t._v("CyclicBarrier")]),t._v("：循环屏障，可重复使用，等待所有线程同步。\n选择时需根据场景特性（互斥 / 共享、是否可重复、同步类型）合理选用，例如接口限流用 "),a("code",[t._v("Semaphore")]),t._v("，任务汇总用 "),a("code",[t._v("CountDownLatch")]),t._v("。”")])])])]),t._v(" "),a("h3",{attrs:{id:"🎯-aqs是如何唤醒下一个线程的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-aqs是如何唤醒下一个线程的"}},[t._v("#")]),t._v(" 🎯 AQS是如何唤醒下一个线程的？")]),t._v(" "),a("p",[t._v("当需要阻塞或者唤醒一个线程的时候，AQS都是使用 LockSupport 这个工具类来完成的。")]),t._v(" "),a("p",[t._v("AQS（AbstractQueuedSynchronizer）的核心功能之一是"),a("strong",[t._v("线程的阻塞与唤醒")]),t._v("。当持有锁的线程释放资源后，AQS 需要精确地唤醒等待队列中的下一个线程，以确保同步逻辑的正确性。下面从源码角度深入分析这一过程：")]),t._v(" "),a("p",[t._v("一、唤醒线程的触发点")]),t._v(" "),a("p",[t._v("AQS 唤醒线程主要发生在两种场景：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("释放锁时")]),t._v("：独占模式下调用 "),a("code",[t._v("release()")]),t._v("，共享模式下调用 "),a("code",[t._v("releaseShared()")]),t._v("。")]),t._v(" "),a("li",[a("strong",[t._v("取消等待时")]),t._v("：当线程被中断或超时，会从队列中移除并尝试唤醒后继节点。")])]),t._v(" "),a("p",[t._v("二、唤醒线程的核心方法："),a("code",[t._v("unparkSuccessor()")])]),t._v(" "),a("p",[t._v("这是 AQS 唤醒线程的核心实现，其逻辑如下：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unparkSuccessor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取当前节点的等待状态")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ws "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("waitStatus"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果状态为 SIGNAL(-1) 或 CONDITION(-2) 或 PROPAGATE(-3)，尝试将其设为 0")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ws "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareAndSetWaitStatus")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ws"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 找到有效的后继节点（排除状态为 CANCELLED(1) 的节点）")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("waitStatus "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从尾部向前遍历，找到最靠前的有效节点")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tail"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("waitStatus "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 唤醒找到的有效后继节点")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LockSupport")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unpark")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"🎯-aqs-中独占锁和共享锁的操作流程大体描述一下"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-aqs-中独占锁和共享锁的操作流程大体描述一下"}},[t._v("#")]),t._v(" 🎯 AQS 中独占锁和共享锁的操作流程大体描述一下")]),t._v(" "),a("h5",{attrs:{id:"独占锁与共享锁的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#独占锁与共享锁的区别"}},[t._v("#")]),t._v(" "),a("strong",[t._v("独占锁与共享锁的区别")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("独占锁是持有锁的线程释放锁之后才会去唤醒下一个线程。")])]),t._v(" "),a("li",[a("strong",[t._v("共享锁是线程获取到锁后，就会去唤醒下一个线程，所以共享锁在获取锁和释放锁的时候都会调用doReleaseShared方法唤醒下一个线程，当然这会受共享线程数量的限制")]),t._v("。")])]),t._v(" "),a("h3",{attrs:{id:"🎯-countdownlatch-cyclibarries-semaphore使用过吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-countdownlatch-cyclibarries-semaphore使用过吗"}},[t._v("#")]),t._v(" 🎯 countDownLatch/CycliBarries/Semaphore使用过吗")]),t._v(" "),a("h4",{attrs:{id:"cyclibarries"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cyclibarries"}},[t._v("#")]),t._v(" CycliBarries")]),t._v(" "),a("p",[t._v("CycliBarries 的字面意思是可循环（cycli）使用的屏障（Barries）。它主要做的事情是，让一组线程达到一个屏障（也可以叫同步点）时被阻塞，知道最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活，线程进入屏障通过 CycliBarries 的 await() 方法。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CyclieBarrierDemo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// public CyclicBarrier(int parties, Runnable barrierAction) {")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CyclicBarrier")]),t._v(" cyclicBarrier "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CyclicBarrier")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"召唤神龙"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" temp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"收集到第"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("temp"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"颗龙珠"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    cyclicBarrier"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("await")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BrokenBarrierException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"semaphore"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#semaphore"}},[t._v("#")]),t._v(" Semaphore")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/Java%20%e5%b9%b6%e5%8f%91%e7%bc%96%e7%a8%8b%2078%20%e8%ae%b2-%e5%ae%8c/assets/Cgq2xl5fiViAS1xOAADHimTjAp0576.png",alt:"img"}})]),t._v(" "),a("p",[t._v("信号量主要用于两个目的，一个是用于多个共享资源的互斥使用，另一个用于并发线程数的控制。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * @description: 模拟抢车位\n * @author: starfish\n * @data: 2020-04-04 10:29\n **/")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SemaphoreDemo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//模拟 3 个车位")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Semaphore")]),t._v(" semaphore "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Semaphore")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//7 辆车去争抢")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    semaphore"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("acquire")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//抢到车位")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\t抢到车位"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SECONDS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\t 停车 3 秒后离开"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    semaphore"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("release")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\t抢到车位"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"countdownlatch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#countdownlatch"}},[t._v("#")]),t._v(" CountDownLatch")]),t._v(" "),a("p",[t._v("用于等待其他线程完成操作")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://learn.lianglianglee.com/%e4%b8%93%e6%a0%8f/Java%20%e5%b9%b6%e5%8f%91%e7%bc%96%e7%a8%8b%2078%20%e8%ae%b2-%e5%ae%8c/assets/Cgq2xl5h8oSAKLBQAABld2EcD7Q385.png",alt:"img"}})]),t._v(" "),a("h2",{attrs:{id:"六、线程池详解-任务调度核心-🏊"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、线程池详解-任务调度核心-🏊"}},[t._v("#")]),t._v(" 六、线程池详解（任务调度核心）🏊")]),t._v(" "),a("blockquote",[a("p",[t._v("线程池原理，拒绝策略，核心线程数")]),t._v(" "),a("p",[t._v("为什么要用线程池，优势是什么？")]),t._v(" "),a("p",[t._v("线程池的工作原理，几个重要参数，给了具体几个参数分析线程池会怎么做，阻塞队列的作用是什么？")]),t._v(" "),a("p",[t._v("说说几种常见的线程池及使用场景?")]),t._v(" "),a("p",[t._v("线程池的构造类的方法的 5 个参数的具体意义是什么")]),t._v(" "),a("p",[t._v("按线程池内部机制，当提交新任务时，有哪些异常要考虑")]),t._v(" "),a("p",[t._v("单机上一个线程池正在处理服务，如果忽然断电怎么办（正在处理和阻塞队列里的请求怎么处理）？")]),t._v(" "),a("p",[t._v("生产上如何合理设置参数？")])]),t._v(" "),a("h3",{attrs:{id:"🎯-为什么要用线程池-优势是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-为什么要用线程池-优势是什么"}},[t._v("#")]),t._v(" 🎯 为什么要用线程池，优势是什么？")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("池化技术相比大家已经屡见不鲜了，线程池、数据库连接池、Http 连接池等等都是对这个思想的应用。池化技术的思想主要是为了减少每次获取资源的消耗，提高对资源的利用率。")])]),t._v(" "),a("p",[t._v("如果每个任务都创建一个线程会带来哪些问题：")]),t._v(" "),a("ol",[a("li",[t._v("第一点，反复创建线程系统开销比较大，每个线程创建和销毁都需要时间，如果任务比较简单，那么就有可能导致创建和销毁线程消耗的资源比线程执行任务本身消耗的资源还要大。")]),t._v(" "),a("li",[t._v("第二点，过多的线程会占用过多的内存等资源，还会带来过多的上下文切换，同时还会导致系统不稳定。")])])]),t._v(" "),a("p",[t._v("线程池是一种基于池化思想管理线程的工具。")]),t._v(" "),a("p",[t._v("线程池做的工作主要是控制运行的线程数量，处理过程中将任务放入队列，然后在线程创建后启动这些任务，如果线程数量超过了最大数量，超出数量的线程排队等候，等其他线程执行完毕，再从队列中取出任务来执行。")]),t._v(" "),a("p",[t._v("主要优点：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("降低资源消耗")]),t._v("：线程复用，通过重复利用已创建的线程减低线程创建和销毁造成的消耗")]),t._v(" "),a("li",[a("strong",[t._v("提高响应速度")]),t._v("：当任务到达时，任务可以不需要等到线程创建就能立即执行")]),t._v(" "),a("li",[a("strong",[t._v("提高线程的可管理性")]),t._v("：线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。")]),t._v(" "),a("li",[a("strong",[t._v("提供更多更强大的功能")]),t._v("：线程池具备可拓展性，允许开发人员向其中增加更多的功能。比如延时定时线程池ScheduledThreadPoolExecutor，就允许任务延期执行或定期执行。")])]),t._v(" "),a("h3",{attrs:{id:"🎯-java-并发类库提供的线程池有哪几种-分别有什么特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-java-并发类库提供的线程池有哪几种-分别有什么特点"}},[t._v("#")]),t._v(" 🎯 Java 并发类库提供的线程池有哪几种？ 分别有什么特点？")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("FixedThreadPool")]),t._v("：固定线程数，无界队列，适合稳定负载；")]),t._v(" "),a("li",[a("code",[t._v("SingleThreadExecutor")]),t._v("：单线程顺序执行，避免竞争；")]),t._v(" "),a("li",[a("code",[t._v("CachedThreadPool")]),t._v("：动态创建线程，适合短任务；线程数不固定，可动态创建新线程（最大为 Integer.MAX_VALUE）。工作队列是 "),a("strong",[t._v("SynchronousQueue（无存储能力）")])]),t._v(" "),a("li",[a("code",[t._v("ScheduledThreadPool")]),t._v("：支持定时 / 周期任务；工作队列是 "),a("strong",[t._v("DelayedWorkQueue")]),t._v("，按任务执行时间排序")]),t._v(" "),a("li",[a("code",[t._v("WorkStealingPool")]),t._v("（Java 8+）：基于 ForkJoinPool，利用工作窃取算法提升多核性能。内部使用 "),a("strong",[t._v("双端队列（WorkQueue）")]),t._v("，任务按 LIFO 顺序执行。")])]),t._v(" "),a("p",[t._v("实际开发中建议自定义 "),a("code",[t._v("ThreadPoolExecutor")]),t._v("，避免无界队列导致 OOM，根据任务类型（CPU/IO 密集）设置核心参数")]),t._v(" "),a("h3",{attrs:{id:"🎯-线程池的几个重要参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-线程池的几个重要参数"}},[t._v("#")]),t._v(" 🎯 线程池的几个重要参数？")]),t._v(" "),a("p",[t._v("常用的构造线程池方法其实最后都是通过 "),a("strong",[t._v("ThreadPoolExecutor")]),t._v(" 实例来创建的，且该构造器有 7 大参数。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" corePoolSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                              "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" maximumPoolSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                              "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" keepAliveTime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                              "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),t._v(" unit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                              "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BlockingQueue")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" workQueue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                              "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadFactory")]),t._v(" threadFactory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                              "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RejectedExecutionHandler")]),t._v(" handler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...}")]),t._v("\n")])])]),a("ul",[a("li",[a("p",[a("strong",[a("code",[t._v("corePoolSize")]),t._v("（核心线程数）")])]),t._v(" "),a("ul",[a("li",[t._v("线程池初始创建时的线程数量，即使线程空闲也不会被销毁（除非设置 "),a("code",[t._v("allowCoreThreadTimeOut")]),t._v(" 为 "),a("code",[t._v("true")]),t._v("）")]),t._v(" "),a("li",[t._v("创建线程池后，当有请求任务进来之后，就会安排池中的线程去执行请求任务，近似理解为近日当值线程")]),t._v(" "),a("li",[t._v("当线程池中的线程数目达到 corePoolSize 后，就会把到达的任务放到缓存队列中")])])]),t._v(" "),a("li",[a("p",[a("strong",[a("code",[t._v("maximumPoolSize")]),t._v("（最大线程数）")]),t._v("： 线程池允许创建的最大线程数量，必须 ≥ "),a("code",[t._v("corePoolSize")]),t._v("。")])]),t._v(" "),a("li",[a("p",[a("strong",[a("code",[t._v("keepAliveTime")]),t._v("（线程存活时间）")]),t._v("： 非核心线程（超过 "),a("code",[t._v("corePoolSize")]),t._v(" 的线程）在空闲时的存活时间")])]),t._v(" "),a("li",[a("p",[a("strong",[a("code",[t._v("unit")]),t._v("（时间单位）")]),t._v("： "),a("code",[t._v("keepAliveTime")]),t._v(" 的时间单位（如 "),a("code",[t._v("TimeUnit.SECONDS")]),t._v("、"),a("code",[t._v("MILLISECONDS")]),t._v("）")])]),t._v(" "),a("li",[a("p",[a("strong",[a("code",[t._v("workQueue")]),t._v("（工作队列）")]),t._v("： 存储等待执行的任务，必须是 "),a("code",[t._v("BlockingQueue")]),t._v(" 实现类")])]),t._v(" "),a("li",[a("p",[a("strong",[a("code",[t._v("threadFactory")]),t._v("（线程工厂）")]),t._v("：用于设置创建线程的工厂，可以给创建的线程设置有意义的名字，可方便排查问题")])]),t._v(" "),a("li",[a("p",[a("strong",[a("code",[t._v("handler")]),t._v("（拒绝策略）")]),t._v("：拒绝策略，表示当队列满了且工作线程大于等于线程池的最大线程数（maximumPoolSize）时如何来拒绝请求执行的线程的策略，主要有四种类型。")]),t._v(" "),a("p",[t._v("等待队列也已经满了，再也塞不下新任务。同时，线程池中的 max 线程也达到了，无法继续为新任务服务，这时候我们就需要拒绝策略合理的处理这个问题了。")]),t._v(" "),a("ul",[a("li",[t._v("AbortPolicy   直接抛出 RegectedExcutionException 异常阻止系统正常进行，"),a("strong",[t._v("默认策略")])]),t._v(" "),a("li",[t._v("DiscardPolicy  直接丢弃任务，不予任何处理也不抛出异常，如果允许任务丢失，这是最好的一种方案")]),t._v(" "),a("li",[t._v("DiscardOldestPolicy  抛弃队列中等待最久的任务，然后把当前任务加入队列中尝试再次提交当前任务")]),t._v(" "),a("li",[t._v("CallerRunsPolicy  交给线程池调用所在的线程进行处理，“调用者运行”的一种调节机制，该策略既不会抛弃任务，也不会抛出异常，而是将某些任务回退到调用者，从而降低新任务的流量")])]),t._v(" "),a("p",[t._v("以上内置拒绝策略均实现了 "),a("code",[t._v("RejectExcutionHandler")]),t._v(" 接口")])])]),t._v(" "),a("h3",{attrs:{id:"🎯-线程池工作原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-线程池工作原理"}},[t._v("#")]),t._v(" 🎯 线程池工作原理？")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p0.meituan.net/travelcube/77441586f6b312a54264e3fcf5eebe2663494.png",alt:"Java线程池实现原理及其在美团业务中的实践- 美团技术团队"}})]),t._v(" "),a("p",[a("strong",[t._v("线程池在内部实际上构建了一个生产者消费者模型，将线程和任务两者解耦，并不直接关联，从而良好的缓冲任务，复用线程")]),t._v("。线程池的运行主要分成两部分："),a("strong",[t._v("任务管理、线程管理")]),t._v("。")]),t._v(" "),a("p",[t._v("任务管理部分充当生产者的角色，当任务提交后（通过 "),a("code",[t._v("execute()")]),t._v(" 或 "),a("code",[t._v("submit()")]),t._v(" 方法提交任务），线程池会判断该任务后续的流转：")]),t._v(" "),a("ul",[a("li",[t._v("直接申请线程执行该任务；")]),t._v(" "),a("li",[t._v("缓冲到队列中等待线程执行；")]),t._v(" "),a("li",[t._v("拒绝该任务。")])]),t._v(" "),a("p",[t._v("线程管理部分是消费者角色，它们被统一维护在线程池内，根据任务请求进行线程的分配，当线程执行完任务后则会继续获取新的任务去执行，最终当线程获取不到任务的时候，线程就会被回收。")]),t._v(" "),a("p",[t._v("流程：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("在创建线程池后，等待提交过来的任务请求")])]),t._v(" "),a("li",[a("p",[t._v("当调用 execute() 方法添加一个请求任务时，线程池会做如下判断：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("判断核心线程数")]),t._v("：如果正在运行的线程数量小于 corePoolSize，那么马上创建线程运行这个任务（即使有空闲线程）\n"),a("ul",[a("li",[t._v("示例：核心线程数为 5，前 5 个任务会立即创建 5 个线程执行。")])])]),t._v(" "),a("li",[a("strong",[t._v("判断工作队列")]),t._v("：如果正在运行的线程数量大于或等于 corePoolSize，任务进入 "),a("strong",[t._v("工作队列（workQueue）")]),t._v(" 等待\n"),a("ul",[a("li",[t._v("若队列为 "),a("strong",[t._v("无界队列")]),t._v("（如 "),a("code",[t._v("LinkedBlockingQueue")]),t._v("），任务会无限排队，"),a("code",[t._v("maximumPoolSize")]),t._v(" 失效。")]),t._v(" "),a("li",[t._v("若队列为 "),a("strong",[t._v("有界队列")]),t._v("（如 "),a("code",[t._v("ArrayBlockingQueue")]),t._v("），队列满时进入下一步。")])])]),t._v(" "),a("li",[a("strong",[t._v("判断最大线程数")]),t._v("：如果这个时候队列已满且线程数 < "),a("code",[t._v("maximumPoolSize")]),t._v("，"),a("strong",[t._v("创建非核心线程执行任务")]),t._v(" "),a("ul",[a("li",[t._v("示例：核心线程数 5，最大线程数 10，队列容量 100。当提交第 106 个任务时（前 5 个线程 + 100 个队列任务），创建第 6 个线程。")])])]),t._v(" "),a("li",[a("strong",[t._v("触发拒绝策略")]),t._v("：如果队列满了且正在运行的线程数量大于或等于 maximumPoolSize，那么线程池"),a("strong",[t._v("会启动饱和拒绝策略来执行")]),t._v(" "),a("ul",[a("li",[t._v("若队列已满且线程数 ≥ "),a("code",[t._v("maximumPoolSize")]),t._v("，调用 "),a("code",[t._v("RejectedExecutionHandler")]),t._v(" 处理任务。")]),t._v(" "),a("li",[t._v("默认策略 "),a("code",[t._v("AbortPolicy")]),t._v(" 直接抛异常，其他策略包括回退给调用者（"),a("code",[t._v("CallerRunsPolicy")]),t._v("）、丢弃最老任务（"),a("code",[t._v("DiscardOldestPolicy")]),t._v("）等。")])])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("提交任务 → 线程数 < corePoolSize？→ 是：创建核心线程执行\n                     ↓ 否\n                 队列未满？→ 是：入队等待\n                     ↓ 否\n                 线程数 < maxPoolSize？→ 是：创建非核心线程执行\n                         ↓ 否\n                     触发拒绝策略\n")])])])]),t._v(" "),a("li",[a("p",[t._v("当一个线程完成任务时，它会从队列中取下一个任务来执行")])]),t._v(" "),a("li",[a("p",[t._v("当一个线程无事可做超过一定的时间（keepAliveTime）时，线程池会判断：")]),t._v(" "),a("ul",[a("li",[t._v("如果当前运行的线程数大于 corePoolSize，那么这个线程就被停掉")]),t._v(" "),a("li",[t._v("所以线程池的所有任务完成后它"),a("strong",[t._v("最终会收缩到 corePoolSize 的大小")])])])])]),t._v(" "),a("blockquote",[a("p",[t._v("在线程池中，同一个线程可以从 BlockingQueue 中不断提取新任务来执行，其核心原理在于线程池对 Thread 进行了封装，并不是每次执行任务都会调用 Thread.start() 来创建新线程，而是让每个线程去执行一个“循环任务”，在这个“循环任务”中，不停地检查是否还有任务等待被执行，如果有则直接去执行这个任务，也就是调用任务的 run 方法，把 run 方法当作和普通方法一样的地位去调用，相当于把每个任务的 run() 方法串联了起来，所以线程数量并不增加。")])]),t._v(" "),a("h2",{attrs:{id:"🎯-线程生命周期管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-线程生命周期管理"}},[t._v("#")]),t._v(" 🎯 线程生命周期管理")]),t._v(" "),a("p",[t._v("线程池中的线程通过 "),a("code",[t._v("Worker")]),t._v(" 类封装，其生命周期如下：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("Worker 初始化")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Worker")]),t._v(" 继承 "),a("code",[t._v("AbstractQueuedSynchronizer")]),t._v("（AQS），实现锁机制，避免任务执行期间被中断。")]),t._v(" "),a("li",[t._v("每个 "),a("code",[t._v("Worker")]),t._v(" 持有一个 "),a("code",[t._v("Thread")]),t._v("，启动时执行 "),a("code",[t._v("runWorker()")]),t._v(" 方法。")])])]),t._v(" "),a("li",[a("strong",[t._v("任务循环执行")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("runWorker()")]),t._v("方法通过 "),a("code",[t._v("getTask()")]),t._v("从队列获取任务：\n"),a("ul",[a("li",[t._v("若为核心线程，"),a("code",[t._v("getTask()")]),t._v(" 会阻塞等待（除非 "),a("code",[t._v("allowCoreThreadTimeOut=true")]),t._v("）。")]),t._v(" "),a("li",[t._v("若非核心线程，"),a("code",[t._v("getTask()")]),t._v(" 超时（"),a("code",[t._v("keepAliveTime")]),t._v("）后返回 "),a("code",[t._v("null")]),t._v("，线程终止。")])])])])]),t._v(" "),a("li",[a("strong",[t._v("线程回收")]),t._v(" "),a("ul",[a("li",[t._v("当 "),a("code",[t._v("getTask()")]),t._v(" 返回 "),a("code",[t._v("null")]),t._v(" 时，"),a("code",[t._v("runWorker()")]),t._v(" 退出循环，"),a("code",[t._v("Worker")]),t._v(" 被移除，线程销毁。")]),t._v(" "),a("li",[t._v("最终线程池收缩到 "),a("code",[t._v("corePoolSize")]),t._v(" 大小（除非设置核心线程超时）。")])])])]),t._v(" "),a("h4",{attrs:{id:"源码级机制解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#源码级机制解析"}},[t._v("#")]),t._v(" "),a("strong",[t._v("源码级机制解析")])]),t._v(" "),a("ol",[a("li",[a("p",[a("strong",[t._v("线程池状态与线程数的原子管理")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("线程池使用一个 "),a("code",[t._v("AtomicInteger")]),t._v("变量 "),a("code",[t._v("ctl")]),t._v(" 同时存储线程池状态和当前线程数：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ctl 的高 3 位表示状态，低 29 位表示线程数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AtomicInteger")]),t._v(" ctl "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AtomicInteger")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ctlOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RUNNING")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("状态包括："),a("code",[t._v("RUNNING")]),t._v("（接收新任务）、"),a("code",[t._v("SHUTDOWN")]),t._v("（不接收新任务但处理队列任务）、"),a("code",[t._v("STOP")]),t._v("（不接收新任务且不处理队列任务）等。")])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("任务窃取与阻塞唤醒")])]),t._v(" "),a("ul",[a("li",[t._v("线程池使用 "),a("code",[t._v("ReentrantLock")]),t._v(" 保护内部状态，通过 "),a("code",[t._v("Condition")]),t._v(" 实现线程间通信。")]),t._v(" "),a("li",[t._v("当队列为空时，线程通过 "),a("code",[t._v("notEmpty.await()")]),t._v(" 阻塞；当有新任务入队时，通过 "),a("code",[t._v("notEmpty.signal()")]),t._v(" 唤醒等待线程。")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("动态调整线程数")])]),t._v(" "),a("ul",[a("li",[t._v("线程池提供 "),a("code",[t._v("setCorePoolSize()")]),t._v(" 和 "),a("code",[t._v("setMaximumPoolSize()")]),t._v(" 方法动态调整参数，适应负载变化。")])])])]),t._v(" "),a("h3",{attrs:{id:"🎯-java线程池-5核心、10最大、20队列-第6个任务来了是什么状态-第26个任务来了是什么状态-队列满了以后执行队列的任务是从队列头-or-队尾取-核心线程和非核心线程执行结束后-谁先执行队列里的任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-java线程池-5核心、10最大、20队列-第6个任务来了是什么状态-第26个任务来了是什么状态-队列满了以后执行队列的任务是从队列头-or-队尾取-核心线程和非核心线程执行结束后-谁先执行队列里的任务"}},[t._v("#")]),t._v(" 🎯 Java线程池，5核心、10最大、20队列，第6个任务来了是什么状态？第26个任务来了是什么状态？队列满了以后执行队列的任务是从队列头 or 队尾取？核心线程和非核心线程执行结束后，谁先执行队列里的任务？")]),t._v(" "),a("p",[a("strong",[t._v("问题1：第6个任务的状态")])]),t._v(" "),a("p",[t._v("当第6个任务到来时，假设前5个任务已经填满了核心线程，线程池的行为如下：")]),t._v(" "),a("ol",[a("li",[t._v("前5个任务由核心线程处理，核心线程数为 5。")]),t._v(" "),a("li",[t._v("第6个任务将被放入任务队列中，因为此时队列还没有满。")])]),t._v(" "),a("p",[t._v("因此，第6个任务将处于等待状态，在任务队列中等待被执行。")]),t._v(" "),a("p",[a("strong",[t._v("问题2：第26个任务的状态")])]),t._v(" "),a("p",[t._v("当第26个任务到来时，假设前面的任务已经按照规则被处理过，线程池的行为如下：")]),t._v(" "),a("ol",[a("li",[t._v("核心线程处理了前5个任务。")]),t._v(" "),a("li",[t._v("任务队列大小为 20，因此第6到第25个任务会被放入队列中。")]),t._v(" "),a("li",[t._v("当第26个任务到来时，核心线程数为 5，任务队列已经满（20 个任务），此时当前线程数小于最大线程数（10），线程池将创建新的线程来处理任务。")])]),t._v(" "),a("p",[t._v("因此，第26个任务将由新创建的线程（非核心线程）来处理。")]),t._v(" "),a("p",[a("strong",[t._v("问题3：队列任务的取出顺序")])]),t._v(" "),a("p",[t._v("Java 中的 "),a("code",[t._v("ThreadPoolExecutor")]),t._v(" 默认使用 "),a("code",[t._v("LinkedBlockingQueue")]),t._v(" 作为任务队列，这个队列是一个先进先出（FIFO）的队列。因此，当任务队列中的任务被取出执行时，是从队列头部取出。")]),t._v(" "),a("p",[a("strong",[t._v("问题4：核心线程和非核心线程执行结束后，谁先执行队列里的任务？")])]),t._v(" "),a("p",[t._v("在 "),a("code",[t._v("ThreadPoolExecutor")]),t._v(" 中，当核心线程和非核心线程执行完任务后，如果队列中有等待的任务，以下是任务执行的顺序：")]),t._v(" "),a("ol",[a("li",[t._v("如果核心线程有空闲，则由核心线程优先从队列头部取任务执行。")]),t._v(" "),a("li",[t._v("如果没有空闲的核心线程，而有空闲的非核心线程，则由非核心线程从队列头部取任务执行。")])]),t._v(" "),a("p",[t._v("换句话说，线程池会尽量保持核心线程忙碌，并优先使用核心线程来处理任务。当核心线程忙碌时，非核心线程才会处理队列中的任务。")]),t._v(" "),a("blockquote",[a("ol",[a("li",[a("strong",[t._v("第 6 个任务")]),t._v("：核心线程已满，任务进入队列（队列大小 = 1），线程数保持 5。")]),t._v(" "),a("li",[a("strong",[t._v("第 26 个任务")]),t._v("：队列已满（20/20），创建第 6 个线程（非核心）执行，线程数 = 6。")]),t._v(" "),a("li",[a("strong",[t._v("队列取出顺序")]),t._v("：默认 FIFO（从队列头部取），除非使用优先级队列。")]),t._v(" "),a("li",[a("strong",[t._v("线程优先级")]),t._v("：核心 / 非核心线程无优先级差异，先空闲的线程先获取任务，但非核心线程可能因超时被回收。")])])]),t._v(" "),a("h3",{attrs:{id:"🎯-执行execute-方法和submit-方法的区别是什么呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-执行execute-方法和submit-方法的区别是什么呢"}},[t._v("#")]),t._v(" 🎯 执行execute()方法和submit()方法的区别是什么呢？")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("execute()方法用于提交不需要返回值的任务，所以无法判断任务是否被线程池执行成功与否；")])]),t._v(" "),a("li",[a("strong",[t._v("submit()方法用于提交需要返回值的任务。线程池会返回一个 Future 类型的对象，通过这个 Future 对象可以判断任务是否执行成功")]),t._v("，并且可以通过 "),a("code",[t._v("Future")]),t._v(" 的 "),a("code",[t._v("get()")]),t._v("方法来获取返回值，"),a("code",[t._v("get()")]),t._v("方法会阻塞当前线程直到任务完成，而使用 "),a("code",[t._v("get（long timeout，TimeUnit unit）")]),t._v("方法则会阻塞当前线程一段时间后立即返回，这时候有可能任务没有执行完。")])]),t._v(" "),a("p",[t._v("我们以**"),a("code",[t._v("AbstractExecutorService")]),t._v("**接口中的一个 "),a("code",[t._v("submit")]),t._v(" 方法为例子来看看源代码：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Future")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("submit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),t._v(" task"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("task "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NullPointerException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RunnableFuture")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" ftask "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newTaskFor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("task"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("execute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ftask"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ftask"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("上面方法调用的 "),a("code",[t._v("newTaskFor")]),t._v(" 方法返回了一个 "),a("code",[t._v("FutureTask")]),t._v(" 对象。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RunnableFuture")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newTaskFor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),t._v(" runnable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FutureTask")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("runnable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("我们再来看看"),a("code",[t._v("execute()")]),t._v("方法：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("execute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),t._v(" command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"🎯-线程池常用的阻塞队列有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-线程池常用的阻塞队列有哪些"}},[t._v("#")]),t._v(" 🎯 线程池常用的阻塞队列有哪些？")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("阻塞队列类型")])]),t._v(" "),a("th",[a("strong",[t._v("存储结构")])]),t._v(" "),a("th",[a("strong",[t._v("有界 / 无界")])]),t._v(" "),a("th",[a("strong",[t._v("特点")])]),t._v(" "),a("th",[a("strong",[t._v("适用场景")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("ArrayBlockingQueue")])]),t._v(" "),a("td",[t._v("数组")]),t._v(" "),a("td",[t._v("有界")]),t._v(" "),a("td",[t._v("- 初始化时指定容量，满后插入操作阻塞 - 按 FIFO 顺序处理元素 - 支持公平 / 非公平锁（默认非公平）")]),t._v(" "),a("td",[t._v("任务量可预估、需要控制内存占用的场景")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("LinkedBlockingQueue")])]),t._v(" "),a("td",[t._v("链表")]),t._v(" "),a("td",[t._v("可选有界 / 无界（默认 Integer.MAX_VALUE）")]),t._v(" "),a("td",[t._v("- 无界时理论上可存储无限任务 - 按 FIFO 顺序处理元素 - 吞吐量高于 ArrayBlockingQueue")]),t._v(" "),a("td",[t._v("任务量不确定、希望自动缓冲的场景")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("SynchronousQueue")])]),t._v(" "),a("td",[t._v("不存储元素")]),t._v(" "),a("td",[t._v("无界（逻辑上）")]),t._v(" "),a("td",[t._v("- 不存储任何元素，插入操作必须等待消费者接收 - 适合任务与线程直接移交，无缓冲需求")]),t._v(" "),a("td",[t._v("要求任务立即执行、避免队列积压的场景")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("PriorityBlockingQueue")])]),t._v(" "),a("td",[t._v("堆结构")]),t._v(" "),a("td",[t._v("无界")]),t._v(" "),a("td",[t._v("- 按元素优先级排序（实现 "),a("code",[t._v("Comparable")]),t._v(" 或自定义 "),a("code",[t._v("Comparator")]),t._v("） - 支持获取优先级最高的任务")]),t._v(" "),a("td",[t._v("任务有优先级差异的场景（如紧急任务）")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("DelayQueue")])]),t._v(" "),a("td",[t._v("优先队列（基于堆）")]),t._v(" "),a("td",[t._v("无界")]),t._v(" "),a("td",[t._v("- 元素需实现 "),a("code",[t._v("Delayed")]),t._v(" 接口，按延迟时间排序 - 仅到期任务可被取出执行")]),t._v(" "),a("td",[t._v("定时任务、延迟执行场景（如超时处理）")])])])]),t._v(" "),a("ul",[a("li",[t._v("对于 FixedThreadPool 和 SingleThreadExector 而言，它们使用的阻塞队列是容量为 Integer.MAX_VALUE 的 LinkedBlockingQueue，可以认为是无界队列")]),t._v(" "),a("li",[t._v("SynchronousQueue，对应的线程池是 CachedThreadPool。线程池 CachedThreadPool 的最大线程数是 Integer 的最大值，可以理解为线程数是可以无限扩展的")]),t._v(" "),a("li",[t._v("DelayedWorkQueue，它对应的线程池分别是 ScheduledThreadPool 和 SingleThreadScheduledExecutor，这两种线程池的最大特点就是可以延迟执行任务。DelayedWorkQueue 的特点是内部元素并不是按照放入的时间排序，而是会按照延迟的时间长短对任务进行排序，内部采用的是“堆”的数据结构")])]),t._v(" "),a("h3",{attrs:{id:"🎯-如何创建线程池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-如何创建线程池"}},[t._v("#")]),t._v(" 🎯 如何创建线程池？")]),t._v(" "),a("blockquote",[a("p",[t._v("为什么不应该自动创建线程池？")])]),t._v(" "),a("p",[t._v("创建线程池应直接使用 "),a("code",[t._v("ThreadPoolExecutor")]),t._v(" 构造函数，避免 "),a("code",[t._v("Executors")]),t._v(" 工厂方法的风险：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("拒绝无界队列")]),t._v("："),a("code",[t._v("FixedThreadPool")]),t._v(" 默认使用无界队列，可能导致 OOM。")]),t._v(" "),a("li",[a("strong",[t._v("控制线程数")]),t._v("："),a("code",[t._v("CachedThreadPool")]),t._v(" 允许创建无限线程，可能耗尽资源。")]),t._v(" "),a("li",[a("strong",[t._v("自定义参数")]),t._v("：根据任务特性（CPU/IO 密集）设置核心线程数、队列类型（如有界队列）和拒绝策略（如 "),a("code",[t._v("CallerRunsPolicy")]),t._v("）。")]),t._v(" "),a("li",[a("strong",[t._v("监控与命名")]),t._v("：使用 "),a("code",[t._v("ThreadFactory")]),t._v(" 命名线程，便于问题排查")])]),t._v(" "),a("blockquote",[a("p",[t._v("《阿里巴巴Java开发手册》中强制线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险")]),t._v(" "),a("p",[t._v("Executors 返回线程池对象的弊端如下：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("FixedThreadPool 和 SingleThreadExecutor")]),t._v(" ： 允许请求的队列长度为 Integer.MAX_VALUE ，可能堆积大量的请求，从而导致OOM。")]),t._v(" "),a("li",[a("strong",[t._v("CachedThreadPool 和 ScheduledThreadPool")]),t._v(" ： 允许创建的线程数量为 Integer.MAX_VALUE ，可能会创建大量线程，从而导致OOM。")])])]),t._v(" "),a("h3",{attrs:{id:"🎯-合理配置线程池你是如何考虑的-创建多少个线程合适"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-合理配置线程池你是如何考虑的-创建多少个线程合适"}},[t._v("#")]),t._v(" 🎯 合理配置线程池你是如何考虑的？（创建多少个线程合适）")]),t._v(" "),a("p",[t._v("合理配置线程池的核心是确定线程数量，这需要结合任务类型、系统资源、硬件特性等多维度综合考量。")]),t._v(" "),a("p",[a("strong",[t._v("一、线程池核心参数与线程数量的关系")])]),t._v(" "),a("p",[t._v("线程池的关键参数中，"),a("strong",[a("code",[t._v("corePoolSize")]),t._v("（核心线程数）")]),t._v(" 是线程数量配置的核心，它决定了线程池的基础处理能力。而"),a("code",[t._v("maximumPoolSize")]),t._v("（最大线程数）则作为流量高峰时的补充，两者需配合队列大小共同调整。")]),t._v(" "),a("p",[a("strong",[t._v("二、任务类型分类与线程数计算")])]),t._v(" "),a("p",[t._v("根据任务的 IO 密集型、CPU 密集型特性，可采用不同的计算模型：")]),t._v(" "),a("ol",[a("li",[a("p",[a("strong",[t._v("CPU 密集型任务（计算密集型）")])]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("特点")]),t._v("：任务主要消耗 CPU 资源（如加密、压缩、数学计算），几乎没有 IO 等待。")])]),t._v(" "),a("li",[a("p",[t._v("公式："),a("code",[t._v("corePoolSize = CPU核心数 + 1")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("解释：CPU 核心数可通过"),a("code",[t._v("Runtime.getRuntime().availableProcessors()")]),t._v("获取，+1 是为了应对线程偶发的上下文切换开销，避免 CPU 空闲。")]),t._v(" "),a("blockquote",[a("p",[t._v("为什么 +1 呢？")]),t._v(" "),a("p",[t._v("《Java并发编程实战》一书中给出的原因是："),a("strong",[t._v("即使当计算（CPU）密集型的线程偶尔由于页缺失故障或者其他原因而暂停时，这个“额外”的线程也能确保 CPU 的时钟周期不会被浪费。")])]),t._v(" "),a("p",[t._v("比如加密、解密、压缩、计算等一系列需要大量耗费 CPU 资源的任务，因为计算任务非常重，会占用大量的 CPU 资源，所以这时 CPU 的每个核心工作基本都是满负荷的，而我们又设置了过多的线程，每个线程都想去利用 CPU 资源来执行自己的任务，这就会造成不必要的上下文切换，此时线程数的增多并没有让性能提升，反而由于线程数量过多会导致性能下降。")])])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("示例")]),t._v("：4 核 CPU 的服务器，核心线程数设为 5。")])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("IO 密集型任务（读写 / 网络请求等）")])]),t._v(" "),a("p",[t._v("IO 密集型则是系统运行时，大部分时间都在进行 I/O 操作，CPU 占用率不高。比如像 MySQL 数据库、文件的读写、网络通信等任务，这类任务"),a("strong",[t._v("不会特别消耗 CPU 资源，但是 IO 操作比较耗时，会占用比较多时间")]),t._v("。")]),t._v(" "),a("p",[t._v("在单线程上运行 IO 密集型的任务会导致浪费大量的 CPU 运算能力浪费在等待。")]),t._v(" "),a("p",[t._v("所以在 IO 密集型任务中使用多线程可以大大的加速程序运行，即使在单核 CPU 上，这种加速主要就是利用了被浪费调的阻塞时间。")]),t._v(" "),a("p",[t._v("IO 密集型时，大部分线程都阻塞，故需要多配置线程数：")]),t._v(" "),a("p",[t._v("IO 密集型任务：")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("特点")]),t._v("：任务频繁等待 IO 操作（如数据库查询、文件读写、网络通信），CPU 利用率低。")])]),t._v(" "),a("li",[a("p",[t._v("公式：这个公式有很多种观点，")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("CPU 核心数 × 2（IO 等待时线程可复用）")])]),t._v(" "),a("li",[a("code",[t._v("CPU 核心数 × （1 + 平均IO等待时间/平均CPU处理时间）")])]),t._v(" "),a("li",[a("code",[t._v("CPU 核心数 * (1 + 阻塞系数)")])]),t._v(" "),a("li",[t._v("解释：IO 等待时间越长，需要越多线程来 “切换执行” 以充分利用 CPU。")])]),t._v(" "),a("blockquote",[a("p",[t._v("《Java并发编程实战》的作者 Brain Goetz 推荐的计算方法：")]),t._v(" "),a("div",{staticClass:"language-undefined extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("线程数 = CPU 核心数 *（1+平均等待时间/平均工作时间）\n")])])]),a("p",[t._v("太少的线程数会使得程序整体性能降低，而过多的线程也会消耗内存等其他资源，所以如果想要更准确的话，可以进行压测，监控 JVM 的线程情况以及 CPU 的负载情况，根据实际情况衡量应该创建的线程数，合理并充分利用资源。")])])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("混合型任务（兼具 CPU 和 IO 操作）")])]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("方案 1")]),t._v("：拆分为独立线程池，分别处理 CPU 和 IO 任务（推荐）。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("方案 2")]),t._v("：若无法拆分，按 IO 密集型任务计算，并通过监控调整。")])])])])]),t._v(" "),a("p",[a("strong",[t._v("三、其他影响因素与实践策略")])]),t._v(" "),a("ol",[a("li",[a("p",[a("strong",[t._v("系统资源限制")])]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("内存约束")]),t._v("：线程数过多会导致内存溢出（每个线程默认栈大小约 1MB）。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("IO 资源")]),t._v("：如数据库连接数限制，线程数不应超过数据库最大连接数。")])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("任务队列大小")])]),t._v(" "),a("ul",[a("li",[t._v("线程数需与队列容量配合：\n"),a("ul",[a("li",[t._v("若"),a("code",[t._v("corePoolSize")]),t._v("较小，队列可设为中等大小（如 100），应对流量波动；")]),t._v(" "),a("li",[t._v("若"),a("code",[t._v("corePoolSize")]),t._v("较大，队列可设为较小值（如 20），避免任务堆积。")])])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("动态调整策略")])]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("自适应线程池")]),t._v("：通过监控 CPU 利用率、任务队列长度动态调整线程数（如使用"),a("code",[t._v("ScheduledExecutorService")]),t._v("定期检测）。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("示例代码")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 动态线程池实现示例（Spring Boot）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Bean")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolTaskExecutor")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dynamicExecutor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolTaskExecutor")]),t._v(" executor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolTaskExecutor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    executor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setCorePoolSize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    executor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setMaxPoolSize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    executor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setQueueCapacity")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 开启监控自动调整")]),t._v("\n    executor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setAllowCoreThreadTimeOut")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    executor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setKeepAliveSeconds")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 添加监控指标")]),t._v("\n    executor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setThreadPoolExecutor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 参数同上")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("afterExecute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),t._v(" r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Throwable")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("monitorAndAdjust")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 监控回调")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" executor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("monitorAndAdjust")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 基于队列堆积情况调整")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("queueSize "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("800")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 队列堆积警告阈值")]),t._v("\n        executor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setMaxPoolSize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Math")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("min")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" executor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMaxPoolSize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("queueSize "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" executor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMaxPoolSize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        executor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setMaxPoolSize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("executor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMaxPoolSize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("压测与监控")])]),t._v(" "),a("ul",[a("li",[t._v("压测验证：通过 JMeter 等工具模拟不同并发量，观察线程池的：\n"),a("ul",[a("li",[t._v("任务处理耗时（响应时间）；")]),t._v(" "),a("li",[t._v("CPU、内存利用率；")]),t._v(" "),a("li",[t._v("队列堆积情况（是否触发拒绝策略）。")])])])])])]),t._v(" "),a("ul",[a("li",[t._v("关键监控指标：\n"),a("ul",[a("li",[a("code",[t._v("taskCount")]),t._v("（总任务数）、"),a("code",[t._v("completedTaskCount")]),t._v("（完成任务数）；")]),t._v(" "),a("li",[t._v("线程活跃数、队列剩余容量；")]),t._v(" "),a("li",[t._v("拒绝任务数（是否触发"),a("code",[t._v("RejectedExecutionHandler")]),t._v("）。")])])])]),t._v(" "),a("h3",{attrs:{id:"🎯-当提交新任务时-异常如何处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-当提交新任务时-异常如何处理"}},[t._v("#")]),t._v(" 🎯 当提交新任务时，异常如何处理?")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("在任务代码try/catch捕获异常")])]),t._v(" "),a("li",[a("p",[t._v("通过Future对象的get方法接收抛出的异常，再处理")])]),t._v(" "),a("li",[a("p",[t._v("为工作者线程设置UncaughtExceptionHandler，在uncaughtException方法中处理异常")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorService")]),t._v(" threadPool "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Executors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newFixedThreadPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setUncaughtExceptionHandler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"线程抛出的异常"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n           "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        threadPool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("execute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" object "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"result## "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("重写ThreadPoolExecutor的afterExecute方法，处理传递的异常引用")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExtendedExecutor")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这可是jdk文档里面给的例子。。")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("afterExecute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),t._v(" r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Throwable")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("afterExecute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" r "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Future")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Future")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CancellationException")]),t._v(" ce"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ce"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutionException")]),t._v(" ee"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ee"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getCause")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" ie"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("interrupt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ignore/reset")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])])])]),t._v(" "),a("h2",{attrs:{id:"七、java内存模型-jmm-🧠"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#七、java内存模型-jmm-🧠"}},[t._v("#")]),t._v(" 七、Java内存模型（JMM）🧠")]),t._v(" "),a("blockquote",[a("p",[t._v("指令重排")]),t._v(" "),a("p",[t._v("内存屏障")]),t._v(" "),a("p",[t._v("单核CPU有可见性问题吗")])]),t._v(" "),a("h3",{attrs:{id:"🎯-为什么需要-jmm-java-memory-model-java-内存模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-为什么需要-jmm-java-memory-model-java-内存模型"}},[t._v("#")]),t._v(" 🎯 为什么需要 JMM（Java Memory Model，Java 内存模型）？")]),t._v(" "),a("blockquote",[a("p",[t._v('"JMM解决了跨平台的内存访问一致性问题：')]),t._v(" "),a("p",[a("strong",[t._v("解决的问题")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("不同处理器内存模型差异")]),t._v(" "),a("li",[t._v("编译器优化导致的指令重排")]),t._v(" "),a("li",[t._v("多线程下的可见性、原子性、有序性")])]),t._v(" "),a("p",[a("strong",[t._v("组成")]),t._v("：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("主内存")]),t._v("：所有线程共享")]),t._v(" "),a("li",[a("strong",[t._v("工作内存")]),t._v('：每个线程私有"')])])]),t._v(" "),a("p",[t._v("为了理解 Java 内存模型的作用，我们首先就来回顾一下从 Java 代码到最终执行的 CPU 指令的大致流程：")]),t._v(" "),a("ul",[a("li",[t._v("最开始，我们编写的 Java 代码，是 *.java 文件；")]),t._v(" "),a("li",[t._v("在编译（包含词法分析、语义分析等步骤）后，在刚才的 "),a("em",[t._v(".java 文件之外，会多出一个新的 Java 字节码文件（")]),t._v(".class）；")]),t._v(" "),a("li",[t._v("JVM 会分析刚才生成的字节码文件（*.class），并根据平台等因素，把字节码文件转化为具体平台上的"),a("strong",[t._v("机器指令；")])]),t._v(" "),a("li",[t._v("机器指令则可以直接在 CPU 上运行，也就是最终的程序执行。")])]),t._v(" "),a("p",[t._v("所以程序最终执行的效果会依赖于具体的处理器，而不同的处理器的规则又不一样，不同的处理器之间可能差异很大，因此同样的一段代码，可能在处理器 A 上运行正常，而在处理器 B 上运行的结果却不一致。同理，在没有 JMM 之前，不同的 JVM 的实现，也会带来不一样的“翻译”结果。")]),t._v(" "),a("p",[t._v("所以 Java 非常需要一个标准，来让 Java 开发者、编译器工程师和 JVM 工程师能够达成一致。达成一致后，我们就可以很清楚的知道什么样的代码最终可以达到什么样的运行效果，让多线程运行结果可以预期，这个标准就是 JMM**，**这就是需要 JMM 的原因。")]),t._v(" "),a("p",[a("strong",[t._v("Java 内存模型（Java Memory Model, JMM）")]),t._v(" 是 Java 虚拟机规范中定义的一组规则，规定了 "),a("strong",[t._v("多线程环境下如何访问共享变量")]),t._v("，以及 "),a("strong",[t._v("线程之间如何通过内存进行通信")]),t._v("。")]),t._v(" "),a("p",[t._v("换句话说：JMM 决定了一个线程写入的变量值，"),a("strong",[t._v("何时、对哪些线程可见")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"🎯-jmm三大特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-jmm三大特性"}},[t._v("#")]),t._v(" 🎯 JMM三大特性")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("特性")])]),t._v(" "),a("th",[a("strong",[t._v("含义")])]),t._v(" "),a("th",[a("strong",[t._v("实现方式")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("原子性")])]),t._v(" "),a("td",[t._v("操作不可分割")]),t._v(" "),a("td",[t._v("synchronized、Lock")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("可见性")])]),t._v(" "),a("td",[t._v("修改对其他线程可见")]),t._v(" "),a("td",[t._v("volatile、synchronized")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("有序性")])]),t._v(" "),a("td",[t._v("禁止指令重排序")]),t._v(" "),a("td",[t._v("volatile、synchronized")])])])]),t._v(" "),a("h3",{attrs:{id:"🎯-谈谈-java-内存模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-谈谈-java-内存模型"}},[t._v("#")]),t._v(" 🎯 谈谈 Java 内存模型？")]),t._v(" "),a("p",[t._v("Java 虚拟机规范中试图定义一种「 "),a("strong",[t._v("Java 内存模型")]),t._v("」来"),a("strong",[t._v("屏蔽掉各种硬件和操作系统的内存访问差异")]),t._v("，以实现"),a("strong",[t._v("让 Java 程序在各种平台下都能达到一致的内存访问效果")])]),t._v(" "),a("p",[a("strong",[t._v("JMM组成")]),t._v("：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("主内存：Java 内存模型规定了所有变量都存储在主内存中（此处的主内存与物理硬件的主内存 RAM 名字一样，两者可以互相类比，但此处仅是虚拟机内存的一部分）。")])]),t._v(" "),a("li",[a("p",[t._v("工作内存：每条线程都有自己的工作内存，线程的工作内存中保存了该线程使用到的主内存中的共享变量的副本拷贝。"),a("strong",[t._v("线程对变量的所有操作都必须在工作内存进行，而不能直接读写主内存中的变量")]),t._v("。"),a("strong",[t._v("工作内存是 JMM 的一个抽象概念，并不真实存在")]),t._v("。")])])]),t._v(" "),a("blockquote",[a("p",[t._v("线程之间不能直接访问对方的工作内存，只能通过 "),a("strong",[t._v("主内存")]),t._v(" 传递。")])]),t._v(" "),a("p",[a("strong",[t._v("特性")]),t._v("：")]),t._v(" "),a("p",[t._v("JMM 就是用来解决如上问题的。 "),a("strong",[t._v("JMM是围绕着并发过程中如何处理可见性、原子性和有序性这 3 个 特征建立起来的")])]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("可见性")]),t._v("：可见性是指当一个线程修改了共享变量的值，其他线程能够立即得知这个修改。")]),t._v(" "),a("ul",[a("li",[t._v("Java 中的 volatile、synchronzied、final 都可以实现可见性")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("原子性")]),t._v("：操作是否可以“一次完成，不可分割”。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("synchronized")]),t._v("、"),a("code",[t._v("Lock")]),t._v(" 保证复合操作原子性；"),a("code",[t._v("AtomicInteger")]),t._v(" 通过 CAS 保证。")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("有序性")]),t._v("：")]),t._v(" "),a("p",[t._v("计算机在执行程序时，为了提高性能，编译器和处理器常常会对指令做重排，一般分为以下 3 种")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("源代码 -> 编译器优化的重排 -> 指令并行的重排 -> 内存系统的重排 -> 最终执行指令\n")])])]),a("p",[t._v("单线程环境里确保程序最终执行结果和代码顺序执行的结果一致；")]),t._v(" "),a("p",[t._v("处理器在进行重排序时必须要考虑指令之间的"),a("strong",[t._v("数据依赖性")]),t._v("；")]),t._v(" "),a("p",[t._v("多线程环境中线程交替执行，由于编译器优化重排的存在，两个线程中使用的变量能否保证一致性是无法确定的，结果无法预测")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("volatile")]),t._v(" 禁止指令重排，"),a("code",[t._v("synchronized/Lock")]),t._v(" 也能保证。")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("JMM 是不区分 JVM 到底是运行在单核处理器、多核处理器的，Java 内存模型是对 CPU 内存模型的抽象，这是一个 High-Level 的概念，与具体的 CPU 平台没啥关系")])]),t._v(" "),a("h3",{attrs:{id:"🎯-java-内存模型-jmm-的底层规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-java-内存模型-jmm-的底层规则"}},[t._v("#")]),t._v(" 🎯 Java 内存模型（JMM）的底层规则？")]),t._v(" "),a("p",[a("strong",[t._v("1.工作内存与主内存的隔离")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("主内存")]),t._v("：所有线程共享的公共内存，存储对象实例和类静态变量。")]),t._v(" "),a("li",[a("strong",[t._v("工作内存")]),t._v("：每个线程私有的内存，存储主内存变量的副本（线程对变量的操作必须在工作内存中进行）。")]),t._v(" "),a("li",[a("strong",[t._v("问题")]),t._v("：线程 A 修改工作内存中的变量后，若未同步到主内存，线程 B 的工作内存可能仍持有旧值，导致可见性问题。")])]),t._v(" "),a("p",[a("strong",[t._v("2. 变量操作的八大原子指令")])]),t._v(" "),a("p",[t._v("JMM 定义了以下操作（需成对出现），用于规范主内存与工作内存的交互：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("指令")])]),t._v(" "),a("th",[a("strong",[t._v("作用")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("lock")])]),t._v(" "),a("td",[t._v("锁定主内存变量，标识为线程独占（一个变量同一时刻只能被一个线程 "),a("code",[t._v("lock")]),t._v("）。")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("unlock")])]),t._v(" "),a("td",[t._v("解锁主内存变量，允许其他线程 "),a("code",[t._v("lock")]),t._v("。")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("read")])]),t._v(" "),a("td",[t._v("从主内存读取变量值到工作内存。")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("load")])]),t._v(" "),a("td",[t._v("将 "),a("code",[t._v("read")]),t._v(" 读取的值存入工作内存的变量副本。")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("use")])]),t._v(" "),a("td",[t._v("将工作内存的变量副本值传递给线程的计算引擎（用于运算）。")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("assign")])]),t._v(" "),a("td",[t._v("将计算引擎的结果赋值给工作内存的变量副本。")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("store")])]),t._v(" "),a("td",[t._v("将工作内存的变量副本值传递到主内存，准备写入。")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("write")])]),t._v(" "),a("td",[t._v("将 "),a("code",[t._v("store")]),t._v(" 传递的值写入主内存的变量。")])])])]),t._v(" "),a("h3",{attrs:{id:"🎯-java-内存模型中的-happen-before-是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-java-内存模型中的-happen-before-是什么"}},[t._v("#")]),t._v(" 🎯 Java 内存模型中的 happen-before 是什么？")]),t._v(" "),a("blockquote",[a("p",[t._v("happen-before定义操作间的偏序关系：")]),t._v(" "),a("p",[a("strong",[t._v("核心规则")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("程序次序规则：线程内按顺序执行")]),t._v(" "),a("li",[t._v("锁定规则：unlock happen-before lock")]),t._v(" "),a("li",[t._v("volatile规则：写 happen-before 读")]),t._v(" "),a("li",[t._v('传递性：A→B，B→C，则A→C"')])])]),t._v(" "),a("p",[t._v("happens-before 先行发生，是 Java 内存模型中定义的两项操作之间的偏序关系，"),a("strong",[t._v("如果操作 A 先行发生于操作 B，那么 A 的结果对 B 可见")]),t._v("。")]),t._v(" "),a("p",[t._v("内存屏障是被插入两个 CPU 指令之间的一种指令，用来禁止处理器指令发生重排序（像屏障一样），从而保障"),a("strong",[t._v("有序性")]),t._v("的。")]),t._v(" "),a("p",[t._v("Happen-before 关系，是 Java 内存模型中保证多线程操作可见性的机制，也是对早期语言规范中含糊的可见性概念的一个精确定义。")]),t._v(" "),a("p",[t._v("它的具体表现形式，包括但远不止是我们直觉中的 synchronized、volatile、lock 操作顺序等方面，例如：")]),t._v(" "),a("ul",[a("li",[t._v("线程内执行的每个操作，都保证 happen-before 后面的操作，这就保证了基本的程序顺序规则，这是开发者在书写程序时的基本约定。")]),t._v(" "),a("li",[t._v("对于 volatile 变量，对它的写操作，保证 happen-before 在随后对该变量的读取操作。")]),t._v(" "),a("li",[t._v("对于一个锁的解锁操作，保证 happen-before 加锁操作。")]),t._v(" "),a("li",[t._v("对象构建完成，保证 happen-before 于 finalizer 的开始动作。")]),t._v(" "),a("li",[t._v("甚至是类似线程内部操作的完成，保证 happen-before 其他 Thread.join() 的线程等。")])]),t._v(" "),a("p",[t._v("这些 happen-before 关系是存在着传递性的，如果满足 a happen-before b 和 b happen-before c，那么 a happen-before c 也成立。")]),t._v(" "),a("p",[t._v("前面我一直用 happen-before，而不是简单说前后，是因为它不仅仅是对执行时间的保证，也包括对内存读、写操作顺序的保证。仅仅是时钟顺序上的先后，并不能保证线程交互的可见性。")]),t._v(" "),a("h2",{attrs:{id:"八、并发容器-线程安全集合-📦"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#八、并发容器-线程安全集合-📦"}},[t._v("#")]),t._v(" 八、并发容器（线程安全集合）📦")]),t._v(" "),a("h3",{attrs:{id:"🎯-java-并发包提供了哪些并发工具类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-java-并发包提供了哪些并发工具类"}},[t._v("#")]),t._v(" 🎯 Java 并发包提供了哪些并发工具类？")]),t._v(" "),a("p",[t._v("我们通常所说的并发包也就是 "),a("code",[t._v("java.util.concurrent")]),t._v(" 及其子包，集中了 Java 并发的各种基础工具类，具体主要包括几个方面：")]),t._v(" "),a("ul",[a("li",[t._v("提供了比 synchronized 更加高级的各种同步结构，包括 CountDownLatch、CyclicBarrier、Semaphore 等，可以实现更加丰富的多线程操作，比如利用 Semaphore 作为资源控制器，限制同时进行工作的线程数量。")]),t._v(" "),a("li",[t._v("各种线程安全的容器，比如最常见的 ConcurrentHashMap、有序的 ConcunrrentSkipListMap，或者通过类似快照机制，实现线程安全的动态数组 CopyOnWriteArrayList 等。")]),t._v(" "),a("li",[t._v("各种并发队列实现，如各种 BlockedQueue 实现，比较典型的 ArrayBlockingQueue、 SynchorousQueue 或针对特定场景的 PriorityBlockingQueue 等。")]),t._v(" "),a("li",[t._v("强大的 Executor 框架，可以创建各种不同类型的线程池，调度任务运行等，绝大部分情况下，不再需要自己从头实现线程池和任务调度器。")])]),t._v(" "),a("h3",{attrs:{id:"🎯-concurrenthashmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-concurrenthashmap"}},[t._v("#")]),t._v(" 🎯 ConcurrentHashMap？")]),t._v(" "),a("p",[t._v("ConcurrentHashMap 是 Java 中的一个"),a("strong",[t._v("线程安全且高效的HashMap实现")]),t._v("。平时涉及高并发如果要用map结构，那第一时间想到的就是它。相对于hashmap来说，ConcurrentHashMap就是线程安全的map，其中利用了锁分段的思想提高了并发度。")]),t._v(" "),a("p",[t._v("那么它到底是如何实现线程安全的？")]),t._v(" "),a("p",[t._v("JDK 1.6版本关键要素：")]),t._v(" "),a("ul",[a("li",[t._v("segment继承了ReentrantLock充当锁的角色，为每一个segment提供了线程安全的保障；")]),t._v(" "),a("li",[t._v("segment维护了哈希散列表的若干个桶，每个桶由HashEntry构成的链表。")])]),t._v(" "),a("p",[t._v("JDK1.8后，ConcurrentHashMap抛弃了原有的"),a("strong",[t._v("Segment 分段锁，而采用了 CAS + synchronized 来保证并发安全性")]),t._v("。")]),t._v(" "),a("h5",{attrs:{id:"concurrenthashmap-的并发度是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashmap-的并发度是什么"}},[t._v("#")]),t._v(" ConcurrentHashMap 的并发度是什么？")]),t._v(" "),a("p",[t._v("ConcurrentHashMap 把实际 map 划分成若干部分来实现它的可扩展性和线程安全。这种划分是使用并发度获得的，它是 ConcurrentHashMap 类构造函数的一个可选参数，默认值为 16，这样在多线程情况下就能避免争用。")]),t._v(" "),a("p",[t._v("在 JDK8 后，它摒弃了 Segment（锁段）的概念，而是启用了一种全新的方式实现,利用 CAS 算法。同时加入了更多的辅助变量来提高并发度")]),t._v(" "),a("h3",{attrs:{id:"🎯-java-中的同步集合与并发集合有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-java-中的同步集合与并发集合有什么区别"}},[t._v("#")]),t._v(" 🎯 Java 中的同步集合与并发集合有什么区别？")]),t._v(" "),a("p",[t._v("同步集合是通过**在集合的每个方法上使用同步锁（"),a("code",[t._v("synchronized")]),t._v("）**来确保线程安全的。Java 提供了一些同步集合类，例如：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Collections.synchronizedList(List list)")]),t._v("：返回一个线程安全的 "),a("code",[t._v("List")]),t._v(" 实现。")]),t._v(" "),a("li",[a("code",[t._v("Collections.synchronizedMap(Map map)")]),t._v("：返回一个线程安全的 "),a("code",[t._v("Map")]),t._v(" 实现。")])]),t._v(" "),a("p",[t._v("这些同步集合类通过对所有操作加锁，来保证只有一个线程能够在同一时刻访问或修改集合。")]),t._v(" "),a("p",[t._v("并发集合是 Java 5 引入的，它们是专门为高并发环境设计的，能够在多线程环境中提供更高效的操作。Java 提供了多个并发集合类：")]),t._v(" "),a("ul",[a("li",[a("strong",[a("code",[t._v("ConcurrentHashMap")])]),t._v("：线程安全的哈希表，提供高效的并发读写操作。")]),t._v(" "),a("li",[a("strong",[a("code",[t._v("CopyOnWriteArrayList")])]),t._v("：适用于读操作远远多于写操作的场景，它在修改时复制整个数组。")]),t._v(" "),a("li",[a("strong",[a("code",[t._v("ConcurrentLinkedQueue")])]),t._v("：高效的无界非阻塞并发队列。")])]),t._v(" "),a("p",[t._v("这些并发集合通过更加细粒度的锁（如分段锁或无锁算法）实现线程安全，避免了同步集合中的全局锁定问题。")]),t._v(" "),a("h3",{attrs:{id:"🎯-synchronizedmap-和-concurrenthashmap-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-synchronizedmap-和-concurrenthashmap-有什么区别"}},[t._v("#")]),t._v(" 🎯 SynchronizedMap 和 ConcurrentHashMap 有什么区别？")]),t._v(" "),a("p",[t._v("SynchronizedMap 一次锁住整张表来保证线程安全，所以每次只能有一个线程来访为 map。")]),t._v(" "),a("p",[t._v("ConcurrentHashMap 使用分段锁来保证在多线程下的性能。")]),t._v(" "),a("p",[t._v("ConcurrentHashMap 中则是一次锁住一个桶。ConcurrentHashMap 默认将 hash 表分为 16 个桶，诸如 get，put，remove 等常用操作只锁当前需要用到的桶。")]),t._v(" "),a("p",[t._v("这样，原来只能一个线程进入，现在却能同时有 16 个写线程执行，并发性能的提升是显而易见的。")]),t._v(" "),a("p",[t._v("另外 ConcurrentHashMap 使用了一种不同的迭代方式。在这种迭代方式中，当 iterator 被创建后集合再发生改变就不再是抛出ConcurrentModificationException，取而代之的是在改变时 new 新的数据从而不影响原有的数据，iterator 完成后再将头指针替换为新的数据 ，这样 iterator线程可以使用原来老的数据，而写线程也可以并发的完成改变")]),t._v(" "),a("h3",{attrs:{id:"🎯-copyonwritearraylist-是什么-可以用于什么应用场景-有哪些优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-copyonwritearraylist-是什么-可以用于什么应用场景-有哪些优缺点"}},[t._v("#")]),t._v(" 🎯 CopyOnWriteArrayList 是什么，可以用于什么应用场景？有哪些优缺点？")]),t._v(" "),a("p",[t._v("CopyOnWriteArrayList 是一个并发容器。有很多人称它是线程安全的，我认为这句话不严谨，缺少一个前提条件，那就是非复合场景下操作它是线程安全的。")]),t._v(" "),a("p",[t._v("CopyOnWriteArrayList(免锁容器)的好处之一是当多个迭代器同时遍历和修改这个列表时，不会抛出 ConcurrentModificationException。在 CopyOnWriteArrayList 中，写入将导致创建整个底层数组的副本，而源数组将保留在原地，使得复制的数组在被修改时，读取操作可以安全地执行。")]),t._v(" "),a("p",[t._v("CopyOnWriteArrayList 的使用场景:")]),t._v(" "),a("p",[t._v("通过源码分析，我们看出它的优缺点比较明显，所以使用场景也就比较明显。就是合适读多写少的场景。")]),t._v(" "),a("p",[t._v("CopyOnWriteArrayList 的缺点：")]),t._v(" "),a("ol",[a("li",[t._v("由于写操作的时候，需要拷贝数组，会消耗内存，如果原数组的内容比较多的情况下，可能导致 young gc 或者 full gc。")]),t._v(" "),a("li",[t._v("不能用于实时读的场景，像拷贝数组、新增元素都需要时间，所以调用一个 set 操作后，读取到数据可能还是旧的，虽然CopyOnWriteArrayList 能做到最终一致性，但是还是没法满足实时性要求。")]),t._v(" "),a("li",[t._v("由于实际使用中可能没法保证 CopyOnWriteArrayList 到底要放置多少数据，万一数据稍微有点多，每次 add/set 都要重新复制数组，这个代价实在太高昂了。在高性能的互联网应用中，这种操作分分钟引起故障。")])]),t._v(" "),a("p",[t._v("CopyOnWriteArrayList 的设计思想：")]),t._v(" "),a("ol",[a("li",[t._v("读写分离，读和写分开")]),t._v(" "),a("li",[t._v("最终一致性")]),t._v(" "),a("li",[t._v("使用另外开辟空间的思路，来解决并发冲突")])]),t._v(" "),a("h3",{attrs:{id:"🎯-并发包中的-concurrentlinkedqueue-和-linkedblockingqueue-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-并发包中的-concurrentlinkedqueue-和-linkedblockingqueue-有什么区别"}},[t._v("#")]),t._v(" 🎯 并发包中的 ConcurrentLinkedQueue 和 LinkedBlockingQueue 有什么区别？")]),t._v(" "),a("p",[t._v("有时候我们把并发包下面的所有容器都习惯叫作并发容器，但是严格来讲，类似 ConcurrentLinkedQueue 这种“Concurrent*”容器，才是真正代表并发。")]),t._v(" "),a("p",[t._v("关于问题中它们的区别：")]),t._v(" "),a("ul",[a("li",[t._v("Concurrent 类型基于 lock-free，在常见的多线程访问场景，一般可以提供较高吞吐量。")]),t._v(" "),a("li",[t._v("而 LinkedBlockingQueue 内部则是基于锁，并提供了 BlockingQueue 的等待性方法。")])]),t._v(" "),a("p",[t._v("不知道你有没有注意到，java.util.concurrent 包提供的容器（Queue、List、Set）、Map，从命名上可以大概区分为 Concurrent*、CopyOnWrite"),a("em",[t._v("和 Blocking")]),t._v("等三类，同样是线程安全容器，可以简单认为：")]),t._v(" "),a("ul",[a("li",[t._v("Concurrent 类型没有类似 CopyOnWrite 之类容器相对较重的修改开销。")]),t._v(" "),a("li",[t._v("但是，凡事都是有代价的，Concurrent 往往提供了较低的遍历一致性。你可以这样理解所谓的弱一致性，例如，当利用迭代器遍历时，如果容器发生修改，迭代器仍然可以继续进行遍历。")]),t._v(" "),a("li",[t._v("与弱一致性对应的，就是我介绍过的同步容器常见的行为“fail-fast”，也就是检测到容器在遍历过程中发生了修改，则抛出 ConcurrentModificationException，不再继续遍历。")]),t._v(" "),a("li",[t._v("弱一致性的另外一个体现是，size 等操作准确性是有限的，未必是 100% 准确。")]),t._v(" "),a("li",[t._v("与此同时，读取的性能具有一定的不确定性。")])]),t._v(" "),a("h3",{attrs:{id:"🎯-什么是阻塞队列-阻塞队列的实现原理是什么-如何使用阻塞队列来实现生产者-消费者模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-什么是阻塞队列-阻塞队列的实现原理是什么-如何使用阻塞队列来实现生产者-消费者模型"}},[t._v("#")]),t._v(" 🎯 什么是阻塞队列？阻塞队列的实现原理是什么？如何使用阻塞队列来实现生产者-消费者模型？")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("哪些队列是有界的，哪些是无界的？")]),t._v(" "),a("li",[t._v("针对特定场景需求，如何选择合适的队列实现？")]),t._v(" "),a("li",[t._v("从源码的角度，常见的线程安全队列是如何实现的，并进行了哪些改进以提高性能表现？")])])]),t._v(" "),a("p",[t._v("阻塞队列（BlockingQueue）是一个支持两个附加操作的队列。")]),t._v(" "),a("p",[t._v("这两个附加的操作是：")]),t._v(" "),a("ul",[a("li",[t._v("在队列为空时，获取元素的线程会等待队列变为非空。")]),t._v(" "),a("li",[t._v("当队列满时，存储元素的线程会等待队列可用。")])]),t._v(" "),a("p",[t._v("阻塞队列常用于生产者和消费者的场景，生产者是往队列里添加元素的线程，消费者是从队列里拿元素的线程。阻塞队列就是生产者存放元素的容器，而消费者也只从容器里拿元素。")]),t._v(" "),a("p",[t._v("JDK7 提供了 7 个阻塞队列。分别是：")]),t._v(" "),a("ul",[a("li",[t._v("ArrayBlockingQueue ：一个由数组结构组成的有界阻塞队列。")]),t._v(" "),a("li",[t._v("LinkedBlockingQueue ：一个由链表结构组成的有界阻塞队列。")]),t._v(" "),a("li",[t._v("PriorityBlockingQueue ：一个支持优先级排序的无界阻塞队列。")]),t._v(" "),a("li",[t._v("DelayQueue：一个使用优先级队列实现的无界阻塞队列。")]),t._v(" "),a("li",[t._v("SynchronousQueue：一个不存储元素的阻塞队列。")]),t._v(" "),a("li",[t._v("LinkedTransferQueue：一个由链表结构组成的无界阻塞队列。")]),t._v(" "),a("li",[t._v("LinkedBlockingDeque：一个由链表结构组成的双向阻塞队列。")])]),t._v(" "),a("p",[t._v("Java 5 之前实现同步存取时，可以使用普通的一个集合，然后在使用线程的协作和线程同步可以实现生产者，消费者模式，主要的技术就是用好，wait，notify，notifyAll，sychronized 这些关键字。而在 java 5 之后，可以使用阻塞队列来实现，此方式大大简少了代码量，使得多线程编程更加容易，安全方面也有保障。")]),t._v(" "),a("p",[t._v("BlockingQueue 接口是 Queue 的子接口，它的主要用途并不是作为容器，而是作为线程同步的的工具，因此他具有一个很明显的特性，当生产者线程试图向 BlockingQueue 放入元素时，如果队列已满，则线程被阻塞，当消费者线程试图从中取出一个元素时，如果队列为空，则该线程会被阻塞，正是因为它所具有这个特性，所以在程序中多个线程交替向 BlockingQueue 中放入元素，取出元素，它可以很好的控制线程之间的通信。")]),t._v(" "),a("p",[t._v("阻塞队列使用最经典的场景就是 socket 客户端数据的读取和解析，读取数据的线程不断将数据放入队列，然后解析线程不断从队列取数据解析。")]),t._v(" "),a("h3",{attrs:{id:"🎯-如何设计一个阻塞队列-都需要考虑哪些点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-如何设计一个阻塞队列-都需要考虑哪些点"}},[t._v("#")]),t._v(" 🎯 如何设计一个阻塞队列，都需要考虑哪些点?")]),t._v(" "),a("blockquote",[a("p",[t._v("要是让你用数组实现一个阻塞队列该怎么实现（ArrayBlockQueue）")]),t._v(" "),a("p",[t._v("手写阻塞队列的add 和take方法")])]),t._v(" "),a("p",[t._v("阻塞队列相比于普通队列，区别在于当队列为空时获取被阻塞，当队列为满时插入被阻塞。")]),t._v(" "),a("p",[t._v("这个问题其实涉及到两个点")]),t._v(" "),a("ul",[a("li",[t._v("阻塞方式：使用互斥锁（synchronized、 Lock）来保护队列操作，如果队列满了 我们用wait、sleep")]),t._v(" "),a("li",[t._v("不阻塞后，需要有线程通信机制（notify、notifyAll 或者 condition）")])]),t._v(" "),a("p",[t._v("当然，肯定会有队列的实现，list 或者 linkedlist 都可以")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CustomBlockQueue")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//队列容器")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" container "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Lock")]),t._v(" lock "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReentrantLock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Condition")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  队列为空")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Condition")]),t._v(" isNull "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" lock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newCondition")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 队列已满")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Condition")]),t._v(" isFull "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" lock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newCondition")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" capacity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CustomBlockQueue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" cap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("capacity "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            lock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" capacity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"队列已满，释放锁，等待消费者消费数据"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    isFull"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("await")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                isFull"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("signal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            isNull"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("signal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            lock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("take")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            lock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"阻塞队列空了，释放锁，等待生产者生产数据"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    isNull"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("await")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                isFull"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("signal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            isFull"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("signal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            lock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"🎯-有哪些线程安全的非阻塞队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-有哪些线程安全的非阻塞队列"}},[t._v("#")]),t._v(" 🎯 有哪些线程安全的非阻塞队列？")]),t._v(" "),a("p",[t._v("ConcurrentLinkedQueue是一个基于链接节点的无界线程安全队列，它采用先进先出的规则对节点进行排序，当我们添加一个元素的时候，它会添加到队列的尾部；当我们获取一个元素时，它会返回队列头部的元素。")]),t._v(" "),a("p",[t._v("结构如下：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConcurrentLinkedQueue")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AbstractQueue")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("  \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Queue")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("Serializable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transient")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//头指针  ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transient")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" tail"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//尾指针  ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConcurrentLinkedQueue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//初始化，head=tail=（一个空的头结点）  ")]),t._v("\n        head "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tail "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),t._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//内部是使用单向链表实现  ")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("  \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n")])])]),a("p",[t._v("入队和出队操作均利用CAS（compare and set）更新，这样允许多个线程并发执行，并且不会因为加锁而阻塞线程，使得并发性能更好。")]),t._v(" "),a("h3",{attrs:{id:"🎯-threadlocal-是什么-有哪些使用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-threadlocal-是什么-有哪些使用场景"}},[t._v("#")]),t._v(" 🎯 ThreadLocal 是什么？有哪些使用场景？")]),t._v(" "),a("blockquote",[a("p",[t._v("比如有两个人去宝屋收集宝物，这两个共用一个袋子的话肯定会产生争执，但是给他们两个人每个人分配一个袋子的话就不会出现这样的问题。如果把这两个人比作线程的话，那么ThreadLocal就是用来避免这两个线程竞争的。")])]),t._v(" "),a("p",[t._v("ThreadLocal 是 Java 提供的一个线程局部变量工具类，它允许我们创建只能被同一个线程读写的变量。ThreadLocal 提供了线程安全的共享变量，每个线程都可以独立地改变自己的副本，而不会影响其他线程的副本。")]),t._v(" "),a("p",[t._v("原理： ThreadLocal 实际上是与线程绑定的一个映射，每个线程都拥有自己的 ThreadLocalMap，其中存储了以 ThreadLocal 对象为键、线程私有数据为值的键值对。")]),t._v(" "),a("p",[t._v("主要特点：")]),t._v(" "),a("ol",[a("li",[t._v("线程隔离：每个线程都有自己的独立副本。")]),t._v(" "),a("li",[t._v("数据隐藏：ThreadLocal 中的数据只能被特定线程访问。")]),t._v(" "),a("li",[t._v("减少同步：由于变量是线程私有的，所以不需要额外的同步。")])]),t._v(" "),a("p",[t._v("使用场景：")]),t._v(" "),a("ol",[a("li",[t._v("线程安全的单例模式： 在多线程环境下，可以使用 ThreadLocal 来实现线程安全的单例模式，每个线程都持有对象的一个副本。")]),t._v(" "),a("li",[t._v("存储用户身份信息： 在 Web 应用中，可以使用 ThreadLocal 来存储用户的登录信息或 Session 信息，使得这些信息在同一线程的不同方法中都可以访问，而不需要显式地传递参数。")]),t._v(" "),a("li",[t._v("数据库连接管理： 在某些数据库连接池的实现中，可以使用 ThreadLocal 来存储当前线程持有的数据库连接，确保事务中使用的是同一个连接。")]),t._v(" "),a("li",[t._v("解决线程安全问题： 在一些非线程安全的工具类中（如 SimpleDateFormat），可以使用 ThreadLocal 来为每个线程创建一个独立的实例，避免并发问题。")]),t._v(" "),a("li",[t._v("跨函数传递数据： 当某些数据需要在同一线程的多个方法中传递，但又不适合作为方法参数时，可以考虑使用 ThreadLocal。")]),t._v(" "),a("li",[t._v("全局存储线程内数据： 在一些复杂的系统中，可能需要在线程的整个生命周期内存储一些数据，ThreadLocal 提供了一种优雅的解决方案。")]),t._v(" "),a("li",[t._v("性能优化： 在一些需要频繁创建和销毁对象的场景，可以使用 ThreadLocal 来重用这些对象，减少创建和销毁的开销。")])]),t._v(" "),a("h3",{attrs:{id:"🎯-threadlocal-是用来解决共享资源的多线程访问的问题吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-threadlocal-是用来解决共享资源的多线程访问的问题吗"}},[t._v("#")]),t._v(" 🎯 ThreadLocal 是用来解决共享资源的多线程访问的问题吗？")]),t._v(" "),a("p",[t._v("不是，ThreadLocal 并不是用来解决共享资源的多线程访问问题的，而是用来解决线程间数据隔离的问题.")]),t._v(" "),a("p",[t._v("虽然 ThreadLocal 确实可以用于解决多线程情况下的线程安全问题，但其资源并不是共享的，而是每个线程独享的。")]),t._v(" "),a("p",[t._v("如果我们把放到 ThreadLocal 中的资源用 static 修饰，让它变成一个共享资源的话，那么即便使用了 ThreadLocal，同样也会有线程安全问题")]),t._v(" "),a("h3",{attrs:{id:"🎯-threadlocal原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-threadlocal原理"}},[t._v("#")]),t._v(" 🎯 ThreadLocal原理？")]),t._v(" "),a("p",[t._v("当使用 ThreadLocal 维护变量时，其为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立的改变自己的副本，而不会影响其他线程对应的副本。")]),t._v(" "),a("p",[t._v("ThreadLocal 内部实现机制：")]),t._v(" "),a("ul",[a("li",[t._v("每个线程内部都会维护一个类似 HashMap 的对象，称为 ThreadLocalMap，里边会包含若干了 Entry（K-V 键值对），相应的线程被称为这些 Entry 的属主线程；")]),t._v(" "),a("li",[t._v("Entry 的 Key 是一个 ThreadLocal 实例，Value 是一个线程特有对象。Entry 的作用即是：为其属主线程建立起一个 ThreadLocal 实例与一个线程特有对象之间的对应关系；")]),t._v(" "),a("li",[t._v("Entry 对 Key 的引用是弱引用；Entry 对 Value 的引用是强引用。")])]),t._v(" "),a("p",[t._v("从 "),a("code",[t._v("Thread")]),t._v("类源代码入手。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//与此线程有关的ThreadLocal值。由ThreadLocal类维护")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadLocal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ThreadLocalMap")]),t._v(" threadLocals "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//与此线程有关的InheritableThreadLocal值。由InheritableThreadLocal类维护")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadLocal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ThreadLocalMap")]),t._v(" inheritableThreadLocals "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("从上面"),a("code",[t._v("Thread")]),t._v("类 源代码可以看出"),a("code",[t._v("Thread")]),t._v(" 类中有一个 "),a("code",[t._v("threadLocals")]),t._v(" 和 一个 "),a("code",[t._v("inheritableThreadLocals")]),t._v(" 变量，它们都是 "),a("code",[t._v("ThreadLocalMap")]),t._v(" 类型的变量,我们可以把 "),a("code",[t._v("ThreadLocalMap")]),t._v(" 理解为"),a("code",[t._v("ThreadLocal")]),t._v(" 类实现的定制化的 "),a("code",[t._v("HashMap")]),t._v("。默认情况下这两个变量都是null，只有当前线程调用 "),a("code",[t._v("ThreadLocal")]),t._v(" 类的 "),a("code",[t._v("set")]),t._v("或"),a("code",[t._v("get")]),t._v("方法时才创建它们，实际上调用这两个方法的时候，我们调用的是"),a("code",[t._v("ThreadLocalMap")]),t._v("类对应的 "),a("code",[t._v("get()")]),t._v("、"),a("code",[t._v("set()")]),t._v("方法。")]),t._v(" "),a("p",[a("code",[t._v("ThreadLocal")]),t._v("类的"),a("code",[t._v("set()")]),t._v("方法")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadLocalMap")]),t._v(" map "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("map "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadLocalMap")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("threadLocals"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("通过上面这些内容，我们足以通过猜测得出结论："),a("strong",[t._v("最终的变量是放在了当前线程的 ThreadLocalMap 中，并不是存在 ThreadLocal 上，ThreadLocal 可以理解为只是ThreadLocalMap的封装，传递了变量值。")]),t._v(" "),a("code",[t._v("ThrealLocal")]),t._v(" 类中可以通过"),a("code",[t._v("Thread.currentThread()")]),t._v("获取到当前线程对象后，直接通过"),a("code",[t._v("getMap(Thread t)")]),t._v("可以访问到该线程的"),a("code",[t._v("ThreadLocalMap")]),t._v("对象。")]),t._v(" "),a("p",[a("strong",[t._v("每个Thread中都具备一个ThreadLocalMap，而ThreadLocalMap可以存储以ThreadLocal为key ，Object 对象为 value的键值对。")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadLocalMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadLocal")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" firstKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" firstValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("比如我们在同一个线程中声明了两个 "),a("code",[t._v("ThreadLocal")]),t._v(" 对象的话，会使用 "),a("code",[t._v("Thread")]),t._v("内部都是使用仅有那个"),a("code",[t._v("ThreadLocalMap")]),t._v(" 存放数据的，"),a("code",[t._v("ThreadLocalMap")]),t._v("的 key 就是 "),a("code",[t._v("ThreadLocal")]),t._v("对象，value 就是 "),a("code",[t._v("ThreadLocal")]),t._v(" 对象调用"),a("code",[t._v("set")]),t._v("方法设置的值。")]),t._v(" "),a("p",[a("code",[t._v("ThreadLocalMap")]),t._v("是"),a("code",[t._v("ThreadLocal")]),t._v("的静态内部类。")]),t._v(" "),a("h3",{attrs:{id:"🎯-什么是线程局部变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-什么是线程局部变量"}},[t._v("#")]),t._v(" 🎯 什么是线程局部变量？")]),t._v(" "),a("p",[t._v("线程局部变量是局限于线程内部的变量，属于线程自身所有，不在多个线程间共享。Java 提供 ThreadLocal 类来支持线程局部变量，是一种实现线程安全的方式。但是在管理环境下（如 web 服务器）使用线程局部变量的时候要特别小心，在这种情况下，工作线程的生命周期比任何应用变量的生命周期都要长。任何线程局部变量一旦在工作完成后没有释放，Java 应用就存在内存泄露的风险。")]),t._v(" "),a("h3",{attrs:{id:"🎯-threadlocal-内存泄露问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-threadlocal-内存泄露问题"}},[t._v("#")]),t._v(" 🎯 ThreadLocal 内存泄露问题?")]),t._v(" "),a("p",[a("code",[t._v("ThreadLocalMap")]),t._v(" 中使用的 key 为 "),a("code",[t._v("ThreadLocal")]),t._v(" 的弱引用，而 value 是强引用。所以，如果 "),a("code",[t._v("ThreadLocal")]),t._v(" 没有被外部强引用的情况下，在垃圾回收的时候，key 会被清理掉，而 value 不会被清理掉。这样一来，"),a("code",[t._v("ThreadLocalMap")]),t._v(" 中就会出现key为null的Entry。假如我们不做任何措施的话，value 永远无法被GC 回收，这个时候就可能会产生内存泄露。ThreadLocalMap实现中已经考虑了这种情况，在调用 "),a("code",[t._v("set()")]),t._v("、"),a("code",[t._v("get()")]),t._v("、"),a("code",[t._v("remove()")]),t._v(" 方法的时候，会清理掉 key 为 null 的记录。使用完 "),a("code",[t._v("ThreadLocal")]),t._v("方法后 最好手动调用"),a("code",[t._v("remove()")]),t._v("方法")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WeakReference")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadLocal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** The value associated with this ThreadLocal. */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadLocal")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"🎯-threadlocalmap的enrty的key为什么要设置成弱引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-threadlocalmap的enrty的key为什么要设置成弱引用"}},[t._v("#")]),t._v(" 🎯 ThreadLocalMap的enrty的key为什么要设置成弱引用")]),t._v(" "),a("p",[t._v("将Entry的Key设置成弱引用，在配合线程池使用的情况下可能会有内存泄露的风险。之设计成弱引用的目的是为了更好地对ThreadLocal进行回收，当我们在代码中将ThreadLocal的强引用置为null后，这时候Entry中的ThreadLocal理应被回收了，但是如果Entry的key被设置成强引用则该ThreadLocal就不能被回收，这就是将其设置成弱引用的目的。")]),t._v(" "),a("p",[a("strong",[t._v("弱引用介绍：")])]),t._v(" "),a("blockquote",[a("p",[t._v("如果一个对象只具有弱引用，那就类似于"),a("strong",[t._v("可有可无的生活用品")]),t._v("。弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它 所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程， 因此不一定会很快发现那些只具有弱引用的对象。")]),t._v(" "),a("p",[t._v("弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java虚拟机就会把这个弱引用加入到与之关联的引用队列中。")])]),t._v(" "),a("h2",{attrs:{id:"九、高级并发工具-🚀"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#九、高级并发工具-🚀"}},[t._v("#")]),t._v(" 九、高级并发工具 🚀")]),t._v(" "),a("h3",{attrs:{id:"🎯-什么是-forkjoinpool-它与传统的线程池有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-什么是-forkjoinpool-它与传统的线程池有什么区别"}},[t._v("#")]),t._v(" 🎯 什么是 ForkJoinPool？它与传统的线程池有什么区别？")]),t._v(" "),a("p",[t._v("ForkJoinPool 是 Java 并行计算框架中的一部分，主要用于执行大规模并行任务。它基于分而治之（divide-and-conquer）策略，将大任务分解成若干小任务，并行执行后合并结果。与传统的线程池（如 "),a("code",[t._v("ThreadPoolExecutor")]),t._v("）不同，ForkJoinPool 设计为处理任务的递归分解和合并，具有更高的吞吐量和效率。")]),t._v(" "),a("h3",{attrs:{id:"🎯-forkjoinpool-的工作原理是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-forkjoinpool-的工作原理是什么"}},[t._v("#")]),t._v(" 🎯 ForkJoinPool 的工作原理是什么？")]),t._v(" "),a("p",[t._v("ForkJoinPool 的核心工作原理是工作窃取（work-stealing）算法。每个工作线程都有一个双端队列（deque），线程从头部取任务执行。当某个线程完成了自己的任务队列后，它可以从其他线程的队列尾部窃取任务执行，从而保持高效的并行处理。")]),t._v(" "),a("p",[t._v("工作窃取算法可以最大限度地保持工作线程的忙碌，减少空闲线程的数量，提高 CPU 使用率。")]),t._v(" "),a("h3",{attrs:{id:"🎯-如何使用-forkjoinpool-来并行处理任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-如何使用-forkjoinpool-来并行处理任务"}},[t._v("#")]),t._v(" 🎯 如何使用 ForkJoinPool 来并行处理任务？")]),t._v(" "),a("p",[t._v("使用 ForkJoinPool 需要继承 "),a("code",[t._v("RecursiveTask<V>")]),t._v(" 或 "),a("code",[t._v("RecursiveAction")]),t._v(" 类，并实现 "),a("code",[t._v("compute()")]),t._v(" 方法。"),a("code",[t._v("RecursiveTask")]),t._v(" 用于有返回值的任务，"),a("code",[t._v("RecursiveAction")]),t._v(" 用于没有返回值的任务。下面是一个简单的示例：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("concurrent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RecursiveTask")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("concurrent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ForkJoinPool")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SumTask")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RecursiveTask")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" end"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("THRESHOLD")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SumTask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" end"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("start "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("end "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" end"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("end "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" start "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("THRESHOLD")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" end"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" sum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("start "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" end"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SumTask")]),t._v(" leftTask "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SumTask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SumTask")]),t._v(" rightTask "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SumTask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            leftTask"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" rightTask"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" leftTask"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ForkJoinPool")]),t._v(" pool "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ForkJoinPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SumTask")]),t._v(" task "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SumTask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("invoke")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("task"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Sum: "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"🎯-什么是-fork-和-join-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-什么是-fork-和-join-方法"}},[t._v("#")]),t._v(" 🎯 什么是 "),a("code",[t._v("fork()")]),t._v(" 和 "),a("code",[t._v("join()")]),t._v(" 方法？")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("fork()")]),t._v(" 方法：将任务拆分并放入队列中，使其他工作线程可以从队列中窃取并执行。")]),t._v(" "),a("li",[a("code",[t._v("join()")]),t._v(" 方法：等待子任务完成并获取其结果。")])]),t._v(" "),a("p",[t._v("在上述示例中，"),a("code",[t._v("leftTask.fork()")]),t._v(" 将左半部分任务放入队列，而 "),a("code",[t._v("rightTask.compute()")]),t._v(" 直接计算右半部分任务。随后，"),a("code",[t._v("leftTask.join()")]),t._v(" 等待左半部分任务完成并获取结果。")]),t._v(" "),a("h3",{attrs:{id:"🎯-解释一下-forkjoinpool-的-invoke-方法和-submit-方法的区别。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-解释一下-forkjoinpool-的-invoke-方法和-submit-方法的区别。"}},[t._v("#")]),t._v(" 🎯 解释一下 ForkJoinPool 的 "),a("code",[t._v("invoke()")]),t._v(" 方法和 "),a("code",[t._v("submit()")]),t._v(" 方法的区别。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("invoke()")]),t._v(" 方法：同步调用，提交任务并等待任务完成，返回任务结果。")]),t._v(" "),a("li",[a("code",[t._v("submit()")]),t._v(" 方法：异步调用，提交任务但不等待任务完成，返回一个 "),a("code",[t._v("ForkJoinTask")]),t._v(" 对象，可以通过这个对象的 "),a("code",[t._v("get()")]),t._v(" 方法获取任务结果。")])]),t._v(" "),a("h3",{attrs:{id:"🎯-在-forkjoinpool-中-如何处理异常"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-在-forkjoinpool-中-如何处理异常"}},[t._v("#")]),t._v(" 🎯 在 ForkJoinPool 中，如何处理异常？")]),t._v(" "),a("p",[t._v("在 ForkJoinPool 中执行任务时，如果任务抛出异常，异常会被封装在 "),a("code",[t._v("ExecutionException")]),t._v(" 中。可以在调用 "),a("code",[t._v("join()")]),t._v(" 或 "),a("code",[t._v("invoke()")]),t._v(" 时捕获和处理异常。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExceptionHandlingTask")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RecursiveTask")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" end"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExceptionHandlingTask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" end"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("start "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("end "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" end"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("start "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" end"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RuntimeException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Exception in task"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ForkJoinPool")]),t._v(" pool "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ForkJoinPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExceptionHandlingTask")]),t._v(" task "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExceptionHandlingTask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("invoke")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("task"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Result: "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RuntimeException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Exception: "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutionException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ExecutionException: "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getCause")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"🎯-什么是-recursivetask-和-recursiveaction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-什么是-recursivetask-和-recursiveaction"}},[t._v("#")]),t._v(" 🎯 什么是 RecursiveTask 和 RecursiveAction？")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("RecursiveTask<V>")]),t._v("：用于有返回值的并行任务。必须实现 "),a("code",[t._v("compute()")]),t._v(" 方法，并返回计算结果。")]),t._v(" "),a("li",[a("code",[t._v("RecursiveAction")]),t._v("：用于没有返回值的并行任务。必须实现 "),a("code",[t._v("compute()")]),t._v(" 方法，但不返回结果。")])]),t._v(" "),a("h3",{attrs:{id:"🎯-forkjoinpool-的并行度-parallelism-level-是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-forkjoinpool-的并行度-parallelism-level-是什么"}},[t._v("#")]),t._v(" 🎯 ForkJoinPool 的并行度（parallelism level）是什么？")]),t._v(" "),a("p",[t._v("ForkJoinPool 的并行度指的是可同时运行的工作线程数。可以在创建 ForkJoinPool 时指定并行度：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ForkJoinPool")]),t._v(" pool "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ForkJoinPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 并行度为 4")]),t._v("\n")])])]),a("p",[t._v("并行度通常设置为 CPU 核心数，以充分利用多核处理器的计算能力。")]),t._v(" "),a("h3",{attrs:{id:"🎯-forkjoinpool-如何避免任务窃取导致的死锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-forkjoinpool-如何避免任务窃取导致的死锁"}},[t._v("#")]),t._v(" 🎯 ForkJoinPool 如何避免任务窃取导致的死锁？")]),t._v(" "),a("p",[t._v("ForkJoinPool 通过任务窃取和任务分解来避免死锁。工作线程在等待其他线程完成任务时，会主动窃取其他线程的任务以保持忙碌状态。此外，ForkJoinPool 使用工作窃取算法，尽可能将任务分散到各个线程的队列中，减少任务窃取导致的资源争用，从而降低死锁的可能性。")]),t._v(" "),a("h3",{attrs:{id:"🎯-completablefuture"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-completablefuture"}},[t._v("#")]),t._v(" 🎯 CompletableFuture")]),t._v(" "),a("p",[a("code",[t._v("CompletableFuture")]),t._v(" 是 Java 8 引入的一种用于异步编程的类，它实现了 "),a("code",[t._v("Future")]),t._v(" 和 "),a("code",[t._v("CompletionStage")]),t._v(" 接口，提供了多种方法来进行异步计算、处理计算结果和错误处理。它不仅可以用来代表一个异步计算的结果，还可以通过多个方法组合多个异步操作，使得编写复杂的异步流变得更加简洁和易读。")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("异步计算")]),t._v("：支持异步任务的执行，非阻塞地获取结果。")]),t._v(" "),a("li",[a("strong",[t._v("任务组合")]),t._v("：提供了丰富的 API 来组合多个异步任务。")]),t._v(" "),a("li",[a("strong",[t._v("结果处理")]),t._v("：可以在异步任务完成后处理结果。")]),t._v(" "),a("li",[a("strong",[t._v("异常处理")]),t._v("：提供了多种方法来处理异步任务中的异常。")]),t._v(" "),a("li",[a("strong",[t._v("手动完成")]),t._v("：可以手动完成（"),a("code",[t._v("complete")]),t._v("）异步任务。")])]),t._v(" "),a("h2",{attrs:{id:"十、并发应用实践"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十、并发应用实践"}},[t._v("#")]),t._v(" 十、并发应用实践")]),t._v(" "),a("h3",{attrs:{id:"🎯-高并发网站架构设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-高并发网站架构设计"}},[t._v("#")]),t._v(" 🎯 高并发网站架构设计")]),t._v(" "),a("blockquote",[a("p",[t._v('"高并发网站需要从多个维度优化：')]),t._v(" "),a("p",[a("strong",[t._v("前端优化")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("HTML 静态化：减少动态内容生成")]),t._v(" "),a("li",[t._v("CDN 加速：就近访问，减少延迟")]),t._v(" "),a("li",[t._v("图片服务分离：减轻 Web 服务器 I/O 负载")])]),t._v(" "),a("p",[a("strong",[t._v("应用层优化")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("负载均衡：分发请求到多台服务器")]),t._v(" "),a("li",[t._v("连接池：复用数据库连接")]),t._v(" "),a("li",[t._v("缓存机制：多级缓存减少数据库访问")])]),t._v(" "),a("p",[a("strong",[t._v("数据层优化")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("读写分离：主库写，从库读")]),t._v(" "),a("li",[t._v("分库分表：水平拆分减少单表压力")]),t._v(" "),a("li",[t._v('索引优化：提高查询效率"')])])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("HTML 页面静态化")]),t._v(" "),a("p",[t._v("访问频率较高但内容变动较小，使用网站 HTML 静态化方案来优化访问速度。将社区 内的帖子、文章进行实时的静态化，有更新的时候再重新静态化也是大量使用的策略。")]),t._v(" "),a("p",[t._v("优势:\n一、减轻服务器负担。")]),t._v(" "),a("p",[t._v("二、加快页面打开速度，静态页面无需访问数据库，打开速度较动态页面有明显提高;")]),t._v(" "),a("p",[t._v("三、很多搜索引擎都会优先收录静态页面，不仅被收录的快，还收录的全，容易被搜索引擎找到;")]),t._v(" "),a("p",[t._v("四、HTML 静态页面不会受程序相关漏洞的影响，减少攻击 ，提高安全性。")])]),t._v(" "),a("li",[a("p",[t._v("图片服务器和应用服务器相分离")]),t._v(" "),a("p",[t._v("现在很多的网站上都会用到大量的图片，而图片是网页传输中占主要的数据量,也是影 响网站性能的主要因素。因此很多网站都会将图片存储从网站中分离出来，另外架构一个 或多个服务器来存储图片，将图片放到一个虚拟目录中，而网页上的图片都用一个 URL 地 址来指向这些服务器上的图片的地址，这样的话网站的性能就明显提高了。")]),t._v(" "),a("p",[t._v("优势:\n一、 分担 Web 服务器的 I/O 负载-将耗费资源的图片服务分离出来，提高服务器的性能和稳定性。")]),t._v(" "),a("p",[t._v("二、 能够专门对图片服务器进行优化-为图片服务设置有针对性的缓存方案，减少带宽 成本，提高访问速度。")]),t._v(" "),a("p",[t._v("三、 提高网站的可扩展性-通过增加图片服务器，提高图片吞吐能力。")])]),t._v(" "),a("li",[a("p",[t._v("数据库  数据库层面的优化，读写分离，分库分表")])]),t._v(" "),a("li",[a("p",[t._v("缓存")]),t._v(" "),a("p",[t._v("尽量使用缓存，包括用户缓存，信息缓存等，多花点内存来做缓存，可以大量减少与 数据库的交互，提高性能。")]),t._v(" "),a("p",[t._v("假如我们能减少数据库频繁的访问，那对系统肯定大大有利的。比如一个电子商务系 统的商品搜索，如果某个关键字的商品经常被搜，那就可以考虑这部分商品列表存放到缓 存(内存中去)，这样不用每次访问数据库，性能大大增加。")])]),t._v(" "),a("li",[a("p",[t._v("镜像")]),t._v(" "),a("p",[t._v("镜像是冗余的一种类型，一个磁盘上的数据在另一个磁盘上存在一个完全相同的副本 即为镜像。")])]),t._v(" "),a("li",[a("p",[t._v("负载均衡")]),t._v(" "),a("p",[t._v("在网站高并发访问的场景下，使用负载均衡技术(负载均衡服务器)为一个应用构建 一个由多台服务器组成的服务器集群，将并发访问请求分发到多台服务器上处理，避免单 一服务器因负载压力过大而响应缓慢，使用户请求具有更好的响应延迟特性。")])]),t._v(" "),a("li",[a("p",[t._v("并发控制 加锁，如乐观锁和悲观锁。")])]),t._v(" "),a("li",[a("p",[t._v("消息队列\n通过 mq 一个一个排队方式，跟 12306 一样。")])])]),t._v(" "),a("h3",{attrs:{id:"🎯-订票系统-某车次只有一张火车票-假定有-1w-个人同-时打开-12306-网站来订票-如何解决并发问题-可扩展-到任何高并发网站要考虑的并发读写问题-。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-订票系统-某车次只有一张火车票-假定有-1w-个人同-时打开-12306-网站来订票-如何解决并发问题-可扩展-到任何高并发网站要考虑的并发读写问题-。"}},[t._v("#")]),t._v(" 🎯 订票系统，某车次只有一张火车票，假定有 "),a("strong",[t._v("1w")]),t._v(" 个人同 时打开 "),a("strong",[t._v("12306")]),t._v(" 网站来订票，如何解决并发问题?(可扩展 到任何高并发网站要考虑的并发读写问题)。")]),t._v(" "),a("blockquote",[a("p",[t._v('"这是典型的高并发读写问题，既要保证 1w 人能同时看到有票（可读性），又要保证只有一个人能买到票（排他性）：')]),t._v(" "),a("p",[a("strong",[t._v("解决方案")]),t._v("：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("数据库乐观锁")]),t._v("：利用版本号或时间戳，避免锁表影响性能")]),t._v(" "),a("li",[a("strong",[t._v("分布式锁")]),t._v("：Redis 实现，保证分布式环境下的原子性")]),t._v(" "),a("li",[a("strong",[t._v("消息队列")]),t._v("：请求排队处理，削峰填谷")]),t._v(" "),a("li",[a("strong",[t._v("库存预扣")]),t._v('：先扣库存再处理业务，避免超卖"')])])]),t._v(" "),a("p",[t._v("不但要保证 1w 个人能同时看到有票(数据的可读性)，还要保证最终只能 由一个人买到票(数据的排他性)。")]),t._v(" "),a("p",[t._v("使用数据库层面的并发访问控制机制。采用乐观锁即可解决此问题。乐观 锁意思是不锁定表的情况下，利用业务的控制来解决并发问题，这样既保证数 据的并发可读性，又保证保存数据的排他性，保证性能的同时解决了并发带来 的脏数据问题。hibernate 中实现乐观锁。")]),t._v(" "),a("p",[t._v("银行两操作员同时操作同一账户就是典型的例子。比如 A、B 操作员同 时读取一余额为 1000 元的账户，A 操作员为该账户增加 100 元，B 操作员同时 为该账户减去 50元，A先提交，B后提交。最后实际账户余额为1000-50=950 元，但本该为 1000+100-50=1050。这就是典型的并发问题。如何解决?可以用锁。")]),t._v(" "),a("h3",{attrs:{id:"🎯-如果不用锁机制如何实现共享数据访问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-如果不用锁机制如何实现共享数据访问"}},[t._v("#")]),t._v(" 🎯 如果不用锁机制如何实现共享数据访问？")]),t._v(" "),a("blockquote",[a("p",[t._v("不要用锁，不要用 "),a("strong",[t._v("sychronized")]),t._v(" 块或者方法，也不要直接使用 "),a("strong",[t._v("jdk")]),t._v(" 提供的线程安全 的数据结构，需要自己实现一个类来保证多个线程同时读写这个类 中的共享数据是线程安全的，怎么办?")])]),t._v(" "),a("p",[t._v("无锁化编程的常用方法:硬件"),a("strong",[t._v("CPU")]),t._v("同步原语CAS(Compare and Swap)，如无锁栈，无锁队列(ConcurrentLinkedQueue)等等。现在 几乎所有的 CPU 指令都支持 CAS 的原子操作，X86 下对应的是 CMPXCHG 汇 编指令，处理器执行 CMPXCHG 指令是一个原子性操作。有了这个原子操作， 我们就可以用其来实现各种无锁(lock free)的数据结构。")]),t._v(" "),a("p",[t._v("CAS 实现了区别于 sychronized 同步锁的一种乐观锁，当多个线程尝试使 用 CAS 同时更新同一个变量时，只有其中一个线程能更新变量的值，而其它线 程都失败，失败的线程并不会被挂起，而是被告知这次竞争中失败，并可以再 次尝试。CAS 有 3 个操作数，内存值 V，旧的预期值 A，要修改后的新值 B。 当且仅当预期值 A 和内存值 V 相同时，将内存值 V 修改为 B，否则什么都不做。 其实 CAS 也算是有锁操作，只不过是由 CPU 来触发，比 synchronized 性能 好的多。CAS 的关键点在于，系统在硬件层面保证了比较并交换操作的原子性， 处理器使用基于对缓存加锁或总线加锁的方式来实现多处理器之间的原子操作。CAS 是非阻塞算法的一种常见实现。")]),t._v(" "),a("p",[t._v("一个线程间共享的变量，首先在主存中会保留一份，然后每个线程的工作 内存也会保留一份副本。这里说的预期值，就是线程保留的副本。当该线程从 主存中获取该变量的值后，主存中该变量可能已经被其他线程刷新了，但是该 线程工作内存中该变量却还是原来的值，这就是所谓的预期值了。当你要用 CAS 刷新该值的时候，如果发现线程工作内存和主存中不一致了，就会失败，如果 一致，就可以更新成功。")]),t._v(" "),a("p",[a("strong",[t._v("Atomic")]),t._v(" 包提供了一系列原子类。这些类可以保证多线程环境下，当某个 线程在执行atomic的方法时，不会被其他线程打断，而别的线程就像自旋锁一 样，一直等到该方法执行完成，才由 JVM 从等待队列中选择一个线程执行。 Atomic 类在软件层面上是非阻塞的，它的原子性其实是在硬件层面上借助相关 的指令来保证的。")]),t._v(" "),a("h3",{attrs:{id:"🎯-如何在-windows-和-linux-上查找哪个线程-cpu-利用率最高"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-如何在-windows-和-linux-上查找哪个线程-cpu-利用率最高"}},[t._v("#")]),t._v(" 🎯 如何在 Windows 和 Linux 上查找哪个线程 cpu 利用率最高？")]),t._v(" "),a("p",[t._v("windows上面用任务管理器看，linux下可以用 top 这个工具看。")]),t._v(" "),a("ol",[a("li",[t._v("找出 cpu 耗用厉害的进程pid， 终端执行top命令，然后按下shift+p 查找出cpu利用最厉害的pid号")]),t._v(" "),a("li",[t._v("根据上面第一步拿到的pid号，top -H -p pid 。然后按下shift+p，查找出cpu利用率最厉害的线程号，比如top -H -p 1328")]),t._v(" "),a("li",[t._v("将获取到的线程号转换成16进制，去百度转换一下就行")]),t._v(" "),a("li",[t._v("使用jstack工具将进程信息打印输出，jstack pid号 > /tmp/t.dat，比如jstack 31365 > /tmp/t.dat")]),t._v(" "),a("li",[t._v("编辑/tmp/t.dat文件，查找线程号对应的信息")])]),t._v(" "),a("h3",{attrs:{id:"🎯-java有哪几种实现生产者消费者模式的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-java有哪几种实现生产者消费者模式的方法"}},[t._v("#")]),t._v(" 🎯 Java有哪几种实现生产者消费者模式的方法？")]),t._v(" "),a("ol",[a("li",[a("p",[a("strong",[t._v("使用"),a("code",[t._v("wait()")]),t._v("和"),a("code",[t._v("notify()")]),t._v("方法")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("利用Java的同步机制，生产者在缓冲区满时调用"),a("code",[t._v("wait()")]),t._v("挂起，消费者在缓冲区空时调用"),a("code",[t._v("wait()")]),t._v("挂起。相应地，生产者在放入商品后调用"),a("code",[t._v("notifyAll()")]),t._v("唤醒消费者，消费者在取出商品后调用"),a("code",[t._v("notifyAll()")]),t._v("唤醒生产者。")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("使用"),a("code",[t._v("ReentrantLock")]),t._v("和"),a("code",[t._v("Condition")])]),t._v("：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("ReentrantLock")]),t._v("提供了更灵活的锁机制，"),a("code",[t._v("Condition")]),t._v("可以用来替代"),a("code",[t._v("wait()")]),t._v("和"),a("code",[t._v("notify()")]),t._v("，提供更细粒度的控制。")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("使用"),a("code",[t._v("BlockingQueue")])]),t._v("：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("java.util.concurrent.BlockingQueue")]),t._v("是一个线程安全的队列，其已经实现了生产者-消费者模式。当队列为满时，"),a("code",[t._v("put()")]),t._v("操作将阻塞；当队列为空时，"),a("code",[t._v("take()")]),t._v("操作将阻塞。")])])])]),t._v(" "),a("h3",{attrs:{id:"🎯-写出-3-条你遵循的多线程最佳实践"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-写出-3-条你遵循的多线程最佳实践"}},[t._v("#")]),t._v(" 🎯 写出 "),a("strong",[t._v("3")]),t._v(" 条你遵循的多线程最佳实践")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("给线程起个有意义的名字。")])]),t._v(" "),a("li",[a("p",[t._v("避免锁定和缩小同步的范围 。")]),t._v(" "),a("p",[t._v("相对于同步方法我更喜欢同步块，它给我拥有对锁的绝对控制权。")])]),t._v(" "),a("li",[a("p",[t._v("多用同步辅助类，少用 "),a("strong",[t._v("wait")]),t._v(" 和 "),a("strong",[t._v("notify")]),t._v(" 。")])]),t._v(" "),a("li",[a("p",[t._v("多用并发容器，少用同步容器。\n如果下一次你需要用到 map，你应该首先想到用 ConcurrentHashMap。")])])]),t._v(" "),a("h2",{attrs:{id:"并发编程最佳实践总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并发编程最佳实践总结"}},[t._v("#")]),t._v(" 并发编程最佳实践总结")]),t._v(" "),a("h3",{attrs:{id:"🎯-设计原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-设计原则"}},[t._v("#")]),t._v(" 🎯 设计原则")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("安全性优先")]),t._v("：确保数据一致性，避免竞态条件")]),t._v(" "),a("li",[a("strong",[t._v("性能兼顾")]),t._v("：在保证正确性前提下优化并发度")]),t._v(" "),a("li",[a("strong",[t._v("可维护性")]),t._v("：代码清晰，便于理解和调试")]),t._v(" "),a("li",[a("strong",[t._v("故障恢复")]),t._v("：考虑异常情况和系统故障")])]),t._v(" "),a("h3",{attrs:{id:"🎯-实践经验"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-实践经验"}},[t._v("#")]),t._v(" 🎯 实践经验")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("线程命名")]),t._v("：给线程起有意义的名字，便于问题排查")]),t._v(" "),a("li",[a("strong",[t._v("锁粒度")]),t._v("：优先使用同步块而非同步方法，缩小锁范围")]),t._v(" "),a("li",[a("strong",[t._v("工具选择")]),t._v("：多用并发容器，少用同步容器")]),t._v(" "),a("li",[a("strong",[t._v("异常处理")]),t._v("：完善的异常处理和日志记录")]),t._v(" "),a("li",[a("strong",[t._v("监控告警")]),t._v("：建立完整的监控体系")])]),t._v(" "),a("h3",{attrs:{id:"🎯-性能优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-性能优化"}},[t._v("#")]),t._v(" 🎯 性能优化")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("无锁化")]),t._v("：优先使用 CAS 和原子类")]),t._v(" "),a("li",[a("strong",[t._v("读写分离")]),t._v("：读多写少场景使用 CopyOnWriteArrayList")]),t._v(" "),a("li",[a("strong",[t._v("分段锁")]),t._v("：减少锁竞争，提高并发度")]),t._v(" "),a("li",[a("strong",[t._v("异步处理")]),t._v("：使用线程池和消息队列")]),t._v(" "),a("li",[a("strong",[t._v("缓存机制")]),t._v("：多级缓存减少 I/O 操作")])]),t._v(" "),a("p",[a("strong",[t._v("记住：并发编程的核心是在保证正确性的前提下，提高系统的并发处理能力！")])]),t._v(" "),a("h2",{attrs:{id:"🔥-高频面试题快速回顾"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🔥-高频面试题快速回顾"}},[t._v("#")]),t._v(" 🔥 高频面试题快速回顾")]),t._v(" "),a("h3",{attrs:{id:"💡-基础概念类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#💡-基础概念类"}},[t._v("#")]),t._v(" 💡 基础概念类")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("问题")])]),t._v(" "),a("th",[a("strong",[t._v("核心答案")])]),t._v(" "),a("th",[a("strong",[t._v("关键点")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("进程vs线程")]),t._v(" "),a("td",[t._v("资源分配 vs 调度单位")]),t._v(" "),a("td",[t._v("内存隔离、通信方式、创建开销")])]),t._v(" "),a("tr",[a("td",[t._v("并发vs并行")]),t._v(" "),a("td",[t._v("时间段内 vs 同一时刻")]),t._v(" "),a("td",[t._v("逻辑概念 vs 物理概念")])]),t._v(" "),a("tr",[a("td",[t._v("线程状态")]),t._v(" "),a("td",[t._v("6种状态及转换")]),t._v(" "),a("td",[t._v("NEW→RUNNABLE→BLOCKED/WAITING→TERMINATED")])]),t._v(" "),a("tr",[a("td",[t._v("线程安全")]),t._v(" "),a("td",[t._v("多线程访问共享资源正确性")]),t._v(" "),a("td",[t._v("加锁、原子操作、不可变对象")])])])]),t._v(" "),a("h3",{attrs:{id:"🔒-同步机制类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🔒-同步机制类"}},[t._v("#")]),t._v(" 🔒 同步机制类")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("问题")])]),t._v(" "),a("th",[a("strong",[t._v("核心答案")])]),t._v(" "),a("th",[a("strong",[t._v("关键点")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("synchronized原理")]),t._v(" "),a("td",[t._v("Monitor机制，锁升级")]),t._v(" "),a("td",[t._v("monitorenter/exit、偏向→轻量→重量")])]),t._v(" "),a("tr",[a("td",[t._v("volatile作用")]),t._v(" "),a("td",[t._v("可见性+有序性")]),t._v(" "),a("td",[t._v("内存屏障、禁止重排、不保证原子性")])]),t._v(" "),a("tr",[a("td",[t._v("ReentrantLock特性")]),t._v(" "),a("td",[t._v("显式锁，公平性，可中断")]),t._v(" "),a("td",[t._v("vs synchronized对比表")])]),t._v(" "),a("tr",[a("td",[t._v("AQS框架")]),t._v(" "),a("td",[t._v("状态管理+队列+模板方法")]),t._v(" "),a("td",[t._v("state、CLH队列、独占/共享模式")])])])]),t._v(" "),a("h3",{attrs:{id:"🛠️-并发工具类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🛠️-并发工具类"}},[t._v("#")]),t._v(" 🛠️ 并发工具类")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("问题")])]),t._v(" "),a("th",[a("strong",[t._v("核心答案")])]),t._v(" "),a("th",[a("strong",[t._v("关键点")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("CountDownLatch")]),t._v(" "),a("td",[t._v("倒计时门栓，一次性")]),t._v(" "),a("td",[t._v("主线程等待多个子线程完成")])]),t._v(" "),a("tr",[a("td",[t._v("CyclicBarrier")]),t._v(" "),a("td",[t._v("循环屏障，可重用")]),t._v(" "),a("td",[t._v("多线程相互等待，同步执行")])]),t._v(" "),a("tr",[a("td",[t._v("Semaphore")]),t._v(" "),a("td",[t._v("信号量，控制并发数")]),t._v(" "),a("td",[t._v("限流、资源池管理")])]),t._v(" "),a("tr",[a("td",[t._v("ThreadLocal")]),t._v(" "),a("td",[t._v("线程局部变量")]),t._v(" "),a("td",[t._v("ThreadLocalMap、内存泄漏")])])])]),t._v(" "),a("h3",{attrs:{id:"🏊-线程池类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🏊-线程池类"}},[t._v("#")]),t._v(" 🏊 线程池类")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("问题")])]),t._v(" "),a("th",[a("strong",[t._v("核心答案")])]),t._v(" "),a("th",[a("strong",[t._v("关键点")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("七大参数")]),t._v(" "),a("td",[t._v("核心、最大、存活时间等")]),t._v(" "),a("td",[t._v("corePoolSize最重要")])]),t._v(" "),a("tr",[a("td",[t._v("工作原理")]),t._v(" "),a("td",[t._v("核心→队列→非核心→拒绝")]),t._v(" "),a("td",[t._v("任务提交流程图")])]),t._v(" "),a("tr",[a("td",[t._v("参数配置")]),t._v(" "),a("td",[t._v("CPU密集型+1，IO密集型×(1+等待/处理)")]),t._v(" "),a("td",[t._v("结合任务特性配置")])]),t._v(" "),a("tr",[a("td",[t._v("拒绝策略")]),t._v(" "),a("td",[t._v("4种策略及适用场景")]),t._v(" "),a("td",[t._v("Abort、CallerRuns、Discard")])])])]),t._v(" "),a("h3",{attrs:{id:"⚛️-原子操作类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#⚛️-原子操作类"}},[t._v("#")]),t._v(" ⚛️ 原子操作类")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("问题")])]),t._v(" "),a("th",[a("strong",[t._v("核心答案")])]),t._v(" "),a("th",[a("strong",[t._v("关键点")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("CAS机制")]),t._v(" "),a("td",[t._v("比较并交换，硬件保证")]),t._v(" "),a("td",[t._v("V、A、B三个操作数")])]),t._v(" "),a("tr",[a("td",[t._v("AtomicInteger")]),t._v(" "),a("td",[t._v("基于CAS的无锁实现")]),t._v(" "),a("td",[t._v("自旋重试、性能优势")])]),t._v(" "),a("tr",[a("td",[t._v("ABA问题")]),t._v(" "),a("td",[t._v("值变化无法感知")]),t._v(" "),a("td",[t._v("AtomicStampedReference解决")])]),t._v(" "),a("tr",[a("td",[t._v("LongAdder优势")]),t._v(" "),a("td",[t._v("分段累加减少竞争")]),t._v(" "),a("td",[t._v("base+Cell[]、空间换时间")])])])]),t._v(" "),a("h3",{attrs:{id:"📦-并发容器类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#📦-并发容器类"}},[t._v("#")]),t._v(" 📦 并发容器类")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("问题")])]),t._v(" "),a("th",[a("strong",[t._v("核心答案")])]),t._v(" "),a("th",[a("strong",[t._v("关键点")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("ConcurrentHashMap")]),t._v(" "),a("td",[t._v("1.7分段锁→1.8CAS+sync")]),t._v(" "),a("td",[t._v("Segment→Node数组+红黑树")])]),t._v(" "),a("tr",[a("td",[t._v("CopyOnWriteArrayList")]),t._v(" "),a("td",[t._v("写时复制，读多写少")]),t._v(" "),a("td",[t._v("读无锁、写复制数组")])]),t._v(" "),a("tr",[a("td",[t._v("同步vs并发容器")]),t._v(" "),a("td",[t._v("全局锁 vs 细粒度锁")]),t._v(" "),a("td",[t._v("fail-fast vs 弱一致性")])]),t._v(" "),a("tr",[a("td",[t._v("BlockingQueue")]),t._v(" "),a("td",[t._v("阻塞队列，生产消费")]),t._v(" "),a("td",[t._v("put/take自动阻塞")])])])]),t._v(" "),a("h3",{attrs:{id:"🧠-jmm类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🧠-jmm类"}},[t._v("#")]),t._v(" 🧠 JMM类")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("问题")])]),t._v(" "),a("th",[a("strong",[t._v("核心答案")])]),t._v(" "),a("th",[a("strong",[t._v("关键点")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("JMM作用")]),t._v(" "),a("td",[t._v("跨平台内存一致性")]),t._v(" "),a("td",[t._v("主内存+工作内存模型")])]),t._v(" "),a("tr",[a("td",[t._v("三大特性")]),t._v(" "),a("td",[t._v("原子性、可见性、有序性")]),t._v(" "),a("td",[t._v("各自实现方式")])]),t._v(" "),a("tr",[a("td",[t._v("happen-before")]),t._v(" "),a("td",[t._v("操作间偏序关系")]),t._v(" "),a("td",[t._v("程序次序、锁定、volatile规则")])]),t._v(" "),a("tr",[a("td",[t._v("内存屏障")]),t._v(" "),a("td",[t._v("禁止指令重排")]),t._v(" "),a("td",[t._v("LoadLoad、StoreStore等")])])])]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"🎯-面试突击技巧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🎯-面试突击技巧"}},[t._v("#")]),t._v(" 🎯 面试突击技巧")]),t._v(" "),a("h3",{attrs:{id:"📝-万能回答框架"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#📝-万能回答框架"}},[t._v("#")]),t._v(" 📝 万能回答框架")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("背景阐述")]),t._v(" (10秒)：简述问题背景和重要性")]),t._v(" "),a("li",[a("strong",[t._v("核心原理")]),t._v(" (30秒)：讲清楚底层实现机制")]),t._v(" "),a("li",[a("strong",[t._v("关键特点")]),t._v(" (20秒)：对比优缺点和适用场景")]),t._v(" "),a("li",[a("strong",[t._v("实践经验")]),t._v(" (20秒)：结合项目经验或最佳实践")])]),t._v(" "),a("h3",{attrs:{id:"🔥-加分回答技巧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🔥-加分回答技巧"}},[t._v("#")]),t._v(" 🔥 加分回答技巧")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("源码引用")]),t._v("：适当提及关键源码实现")]),t._v(" "),a("li",[a("strong",[t._v("性能数据")]),t._v("：给出具体的性能对比数据")]),t._v(" "),a("li",[a("strong",[t._v("实战经验")]),t._v("：结合实际项目中的使用经验")]),t._v(" "),a("li",[a("strong",[t._v("问题延伸")]),t._v("：主动提及相关的深层问题")])]),t._v(" "),a("h3",{attrs:{id:"⚠️-常见面试陷阱"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#⚠️-常见面试陷阱"}},[t._v("#")]),t._v(" ⚠️ 常见面试陷阱")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("概念混淆")]),t._v("：synchronized vs ReentrantLock选择")]),t._v(" "),a("li",[a("strong",[t._v("性能误区")]),t._v("：盲目认为无锁一定比有锁快")]),t._v(" "),a("li",[a("strong",[t._v("使用错误")]),t._v("：volatile不能保证原子性")]),t._v(" "),a("li",[a("strong",[t._v("内存泄漏")]),t._v("：ThreadLocal使用后不清理")])]),t._v(" "),a("p",[t._v("记住这个口诀："),a("strong",[t._v("理论扎实、实践丰富、思路清晰、表达准确")]),t._v("！")]),t._v(" "),a("hr"),t._v(" "),a("blockquote",[a("p",[t._v("💡 "),a("strong",[t._v("最终提醒")]),t._v("：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("循序渐进")]),t._v("：从基础概念到高级应用")]),t._v(" "),a("li",[a("strong",[t._v("结合实践")]),t._v("：每个知识点都举具体使用场景")]),t._v(" "),a("li",[a("strong",[t._v("源码分析")]),t._v("：适当提及关键源码实现")]),t._v(" "),a("li",[a("strong",[t._v("性能对比")]),t._v("：说明不同方案的优缺点")]),t._v(" "),a("li",[a("strong",[t._v("问题解决")]),t._v("：展示解决并发问题的思路")])])]),t._v(" "),a("p",[a("strong",[t._v("并发编程面试，重在理解原理，贵在实战经验！")]),t._v(" 🚀")])])}),[],!1,null,null,null);s.default=e.exports}}]);