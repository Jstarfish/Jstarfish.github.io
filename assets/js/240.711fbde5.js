(window.webpackJsonp=window.webpackJsonp||[]).push([[240],{731:function(v,e,_){"use strict";_.r(e);var r=_(2),t=Object(r.a)({},(function(){var v=this,e=v.$createElement,_=v._self._c||e;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("p",[_("img",{attrs:{src:"https://img.starfish.ink/common/faq-banner.png",alt:""}})]),v._v(" "),_("blockquote",[_("p",[v._v("ZooKeeper是Apache的分布式协调服务框架，也是面试官考察"),_("strong",[v._v("分布式系统理解")]),v._v("的核心知识点。从基础概念到一致性协议，从集群管理到典型应用，每一个知识点都体现着对分布式架构的深度理解。本文档将"),_("strong",[v._v("最常考的ZK知识点")]),v._v("整理成"),_("strong",[v._v("标准话术")]),v._v("，助你在面试中展现分布式技术功底！")])]),v._v(" "),_("h3",{attrs:{id:"🔥-为什么zk如此重要"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🔥-为什么zk如此重要"}},[v._v("#")]),v._v(" 🔥 为什么ZK如此重要？")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("📈 分布式必备")]),v._v("：90%的分布式系统都会涉及ZK相关技术")]),v._v(" "),_("li",[_("strong",[v._v("🧠 架构体现")]),v._v("：体现你对分布式一致性、选举、协调的深度理解")]),v._v(" "),_("li",[_("strong",[v._v("💼 工作基础")]),v._v("：配置中心、服务发现、分布式锁等场景无处不在")]),v._v(" "),_("li",[_("strong",[v._v("🎓 技术进阶")]),v._v("：理解ZK是掌握分布式系统设计的关键一步")])]),v._v(" "),_("hr"),v._v(" "),_("h2",{attrs:{id:"🗺️-知识导航"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🗺️-知识导航"}},[v._v("#")]),v._v(" 🗺️ 知识导航")]),v._v(" "),_("h3",{attrs:{id:"🏷️-核心知识分类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🏷️-核心知识分类"}},[v._v("#")]),v._v(" 🏷️ 核心知识分类")]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("🔥 基础概念类")]),v._v("：ZK定义、核心功能、数据模型、节点类型")]),v._v(" "),_("li",[_("strong",[v._v("📊 一致性协议")]),v._v("：2PC/3PC、Paxos算法、ZAB协议原理")]),v._v(" "),_("li",[_("strong",[v._v("🌐 集群与选举")]),v._v("：选举机制、节点角色、故障处理、数据同步")]),v._v(" "),_("li",[_("strong",[v._v("⚡ 核心特性")]),v._v("：Watcher机制、ACL权限、会话管理、数据一致性")]),v._v(" "),_("li",[_("strong",[v._v("🔧 典型应用")]),v._v("：分布式锁、配置管理、服务发现、负载均衡")]),v._v(" "),_("li",[_("strong",[v._v("🚨 运维实践")]),v._v("：集群部署、性能监控、故障排查、最佳实践")]),v._v(" "),_("li",[_("strong",[v._v("💼 对比分析")]),v._v("：ZK vs 其他中间件、应用场景选择")])]),v._v(" "),_("h3",{attrs:{id:"🔑-面试话术模板"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🔑-面试话术模板"}},[v._v("#")]),v._v(" 🔑 面试话术模板")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[_("strong",[v._v("问题类型")])]),v._v(" "),_("th",[_("strong",[v._v("回答框架")])]),v._v(" "),_("th",[_("strong",[v._v("关键要点")])]),v._v(" "),_("th",[_("strong",[v._v("深入扩展")])])])]),v._v(" "),_("tbody",[_("tr",[_("td",[_("strong",[v._v("概念解释")])]),v._v(" "),_("td",[v._v("定义→特点→应用场景→示例")]),v._v(" "),_("td",[v._v("准确定义，突出特点")]),v._v(" "),_("td",[v._v("底层原理，协议分析")])]),v._v(" "),_("tr",[_("td",[_("strong",[v._v("对比分析")])]),v._v(" "),_("td",[v._v("相同点→不同点→使用场景→选择建议")]),v._v(" "),_("td",[v._v("多维度对比")]),v._v(" "),_("td",[v._v("性能差异，实际应用")])]),v._v(" "),_("tr",[_("td",[_("strong",[v._v("原理解析")])]),v._v(" "),_("td",[v._v("背景→实现机制→执行流程→注意事项")]),v._v(" "),_("td",[v._v("图解流程")]),v._v(" "),_("td",[v._v("协议层面，算法细节")])]),v._v(" "),_("tr",[_("td",[_("strong",[v._v("实践应用")])]),v._v(" "),_("td",[v._v("问题现象→分析思路→解决方案→监控验证")]),v._v(" "),_("td",[v._v("实际案例")]),v._v(" "),_("td",[v._v("最佳实践，踩坑经验")])])])]),v._v(" "),_("hr"),v._v(" "),_("h2",{attrs:{id:"🔥-一、基础概念类-zk核心"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🔥-一、基础概念类-zk核心"}},[v._v("#")]),v._v(" 🔥 一、基础概念类（ZK核心）")]),v._v(" "),_("blockquote",[_("p",[_("strong",[v._v("核心思想")]),v._v("：ZooKeeper是分布式协调服务的经典实现，提供统一的命名空间、数据发布/订阅、分布式同步等核心功能。")])]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("ZK基础定义")]),v._v("："),_("a",{attrs:{href:"#%F0%9F%8E%AF-%E8%B0%88%E4%B8%8B%E4%BD%A0%E5%AF%B9-zookeeper-%E7%9A%84%E8%AE%A4%E8%AF%86"}},[v._v("ZooKeeper是什么")]),v._v(" | "),_("a",{attrs:{href:"#%F0%9F%8E%AF-zookeeper-%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B%E5%8A%9F%E8%83%BD"}},[v._v("ZK核心功能")])]),v._v(" "),_("li",[_("strong",[v._v("数据模型")]),v._v("："),_("a",{attrs:{href:"#%F0%9F%8E%AF-zookeeper-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F"}},[v._v("文件系统")]),v._v(" | "),_("a",{attrs:{href:"#%F0%9F%8E%AF-%E8%AF%B4%E4%B8%8B%E5%9B%9B%E7%A7%8D%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%95%B0%E6%8D%AE%E8%8A%82%E7%82%B9-znode"}},[v._v("节点类型")])]),v._v(" "),_("li",[_("strong",[v._v("核心特性")]),v._v("："),_("a",{attrs:{href:"#%F0%9F%8E%AF-zookeeper-%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7"}},[v._v("数据一致性")]),v._v(" | "),_("a",{attrs:{href:"#%F0%9F%8E%AF-zookeeper-%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86"}},[v._v("会话管理")])])]),v._v(" "),_("h3",{attrs:{id:"🎯-谈下你对-zookeeper-的认识"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-谈下你对-zookeeper-的认识"}},[v._v("#")]),v._v(" 🎯 谈下你对 Zookeeper 的认识？")]),v._v(" "),_("p",[v._v("ZooKeeper 是一个"),_("strong",[v._v("分布式协调服务框架")]),v._v("，为分布式应用提供一致性服务。它的核心作用是：")]),v._v(" "),_("p",[_("strong",[v._v("定义")]),v._v("：ZooKeeper 是 Apache 的开源分布式协调服务，基于观察者模式设计的分布式服务管理框架。")]),v._v(" "),_("p",[_("strong",[v._v("核心特点")]),v._v("：")]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("顺序一致性")]),v._v(" - 按照客户端发送请求的顺序执行")]),v._v(" "),_("li",[_("strong",[v._v("原子性")]),v._v(" - 事务要么成功要么失败，不存在中间状态")]),v._v(" "),_("li",[_("strong",[v._v("单一视图")]),v._v(" - 客户端看到的服务端数据模型都是一致的")]),v._v(" "),_("li",[_("strong",[v._v("可靠性")]),v._v(" - 一旦事务被确认，将被持久化保存直到客户端覆盖更新")]),v._v(" "),_("li",[_("strong",[v._v("实时性")]),v._v(" - 保证客户端将在一个时间间隔范围内获得服务器的更新信息")])]),v._v(" "),_("p",[_("strong",[v._v("应用场景")]),v._v("：配置管理、服务发现、分布式锁、集群管理、负载均衡等。")]),v._v(" "),_("h3",{attrs:{id:"🎯-zookeeper-都有哪些功能"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-zookeeper-都有哪些功能"}},[v._v("#")]),v._v(" 🎯 Zookeeper 都有哪些功能？")]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("集群管理")]),v._v("：监控节点存活状态、运行请求等")]),v._v(" "),_("li",[_("strong",[v._v("主节点选举")]),v._v("：协助完成分布式系统中的Leader选举过程")]),v._v(" "),_("li",[_("strong",[v._v("分布式锁")]),v._v("：提供独占锁和共享锁，实现分布式环境下的资源控制")]),v._v(" "),_("li",[_("strong",[v._v("命名服务")]),v._v("：提供统一的命名空间，通过名称获取资源或服务地址")]),v._v(" "),_("li",[_("strong",[v._v("统一配置管理")]),v._v("：集群中所有节点的配置信息保持一致，支持动态配置更新")]),v._v(" "),_("li",[_("strong",[v._v("负载均衡")]),v._v("：配合客户端实现服务的负载均衡")]),v._v(" "),_("li",[_("strong",[v._v("数据发布/订阅")]),v._v("：支持数据的发布和订阅模式")])]),v._v(" "),_("h3",{attrs:{id:"🎯-zookeeper-文件系统"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-zookeeper-文件系统"}},[v._v("#")]),v._v(" 🎯 Zookeeper 文件系统")]),v._v(" "),_("p",[v._v("ZooKeeper 提供一个"),_("strong",[v._v("多层级的节点命名空间")]),v._v("（节点称为 znode），类似于文件系统的树状结构。")]),v._v(" "),_("p",[_("strong",[v._v("关键特点")]),v._v("：")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("内存存储")]),v._v("：为保证高吞吐和低延迟，ZK在内存中维护树状目录结构")]),v._v(" "),_("li",[_("strong",[v._v("数据限制")]),v._v("：每个节点最多存储 "),_("strong",[v._v("1MB")]),v._v(" 数据，适合存储配置信息而非大数据")]),v._v(" "),_("li",[_("strong",[v._v("路径唯一")]),v._v("：每个节点都有唯一的路径标识")]),v._v(" "),_("li",[_("strong",[v._v("数据+子节点")]),v._v("：与传统文件系统不同，ZK的每个节点都可以存储数据和拥有子节点")])]),v._v(" "),_("h3",{attrs:{id:"🎯-说下四种类型的数据节点-znode"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-说下四种类型的数据节点-znode"}},[v._v("#")]),v._v(" 🎯 说下四种类型的数据节点 Znode？")]),v._v(" "),_("ol",[_("li",[_("p",[_("strong",[v._v("PERSISTENT（持久节点）")]),v._v("：")]),v._v(" "),_("ul",[_("li",[v._v("除非手动删除，否则节点一直存在于 Zookeeper 上")]),v._v(" "),_("li",[v._v("适合存储需要持久化的配置信息")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("EPHEMERAL（临时节点）")]),v._v("：")]),v._v(" "),_("ul",[_("li",[v._v("生命周期与客户端会话绑定")]),v._v(" "),_("li",[v._v("客户端会话失效时，临时节点自动被删除")]),v._v(" "),_("li",[v._v("适合实现服务注册、心跳检测等场景")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("PERSISTENT_SEQUENTIAL（持久顺序节点）")]),v._v("：")]),v._v(" "),_("ul",[_("li",[v._v("基本特性同持久节点，增加顺序属性")]),v._v(" "),_("li",[v._v("节点名后追加一个由父节点维护的自增整型数字")]),v._v(" "),_("li",[v._v("适合实现分布式队列等需要顺序的场景")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("EPHEMERAL_SEQUENTIAL（临时顺序节点）")]),v._v("：")]),v._v(" "),_("ul",[_("li",[v._v("基本特性同临时节点，增加顺序属性")]),v._v(" "),_("li",[v._v("适合实现分布式锁、选举等场景")])])])]),v._v(" "),_("hr"),v._v(" "),_("h2",{attrs:{id:"📊-二、一致性协议-核心原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#📊-二、一致性协议-核心原理"}},[v._v("#")]),v._v(" 📊 二、一致性协议（核心原理）")]),v._v(" "),_("blockquote",[_("p",[_("strong",[v._v("核心思想")]),v._v("：理解分布式一致性协议是掌握ZooKeeper的关键，包括2PC/3PC的演进、Paxos算法的精髓，以及ZAB协议的实现细节。")])]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("经典协议")]),v._v("："),_("a",{attrs:{href:"#%F0%9F%8E%AF-%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE2pc3pc"}},[v._v("2PC协议")]),v._v(" | "),_("a",{attrs:{href:"#%F0%9F%8E%AF-%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE2pc3pc"}},[v._v("3PC协议")])]),v._v(" "),_("li",[_("strong",[v._v("Paxos算法")]),v._v("："),_("a",{attrs:{href:"#%F0%9F%8E%AF-%E8%AE%B2%E4%B8%80%E8%AE%B2-paxos-%E7%AE%97%E6%B3%95"}},[v._v("Paxos原理")]),v._v(" | "),_("a",{attrs:{href:"#%F0%9F%8E%AF-paxos-%E6%AD%BB%E5%BE%AA%E7%8E%AF%E9%97%AE%E9%A2%98"}},[v._v("死循环问题")])]),v._v(" "),_("li",[_("strong",[v._v("ZAB协议")]),v._v("："),_("a",{attrs:{href:"#%F0%9F%8E%AF-%E8%B0%88%E4%B8%8B%E4%BD%A0%E5%AF%B9-zab-%E5%8D%8F%E8%AE%AE%E7%9A%84%E4%BA%86%E8%A7%A3"}},[v._v("ZAB协议原理")]),v._v(" | "),_("a",{attrs:{href:"#%F0%9F%8E%AF-zab-%E5%92%8C-paxos-%E7%AE%97%E6%B3%95%E7%9A%84%E8%81%94%E7%B3%BB%E4%B8%8E%E5%8C%BA%E5%88%AB"}},[v._v("ZAB vs Paxos对比")])])]),v._v(" "),_("h3",{attrs:{id:"🎯-一致性协议2pc、3pc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-一致性协议2pc、3pc"}},[v._v("#")]),v._v(" 🎯 一致性协议2PC、3PC？")]),v._v(" "),_("h4",{attrs:{id:"_2pc-two-phase-commit"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2pc-two-phase-commit"}},[v._v("#")]),v._v(" 2PC（Two-Phase Commit）")]),v._v(" "),_("p",[_("strong",[v._v("阶段一：提交事务请求（”投票阶段“）")])]),v._v(" "),_("p",[v._v("当要执行一个分布式事务的时候，事务发起者首先向协调者发起事务请求，然后协调者会给所有参与者发送 "),_("code",[v._v("prepare")]),v._v(" 请求（其中包括事务内容）告诉参与者你们需要执行事务了，如果能执行我发的事务内容那么就先执行但不提交，执行后请给我回复。然后参与者收到 "),_("code",[v._v("prepare")]),v._v(" 消息后，他们会开始执行事务（但不提交），并将 "),_("code",[v._v("Undo")]),v._v(" 和 "),_("code",[v._v("Redo")]),v._v(" 信息记入事务日志中，之后参与者就向协调者反馈是否准备好了")]),v._v(" "),_("p",[_("strong",[v._v("阶段二：执行事务提交")])]),v._v(" "),_("p",[v._v("协调者根据各参与者的反馈情况决定最终是否可以提交事务，如果反馈都是Yes，发送提交"),_("code",[v._v("commit")]),v._v("请求，参与者提交成功后返回 "),_("code",[v._v("Ack")]),v._v(" 消息，协调者接收后就完成了。如果反馈是No 或者超时未反馈，发送 "),_("code",[v._v("Rollback")]),v._v(" 请求，利用阶段一记录表的 "),_("code",[v._v("Undo")]),v._v(" 信息执行回滚，并反馈给协调者"),_("code",[v._v("Ack")]),v._v(" ，中断消息")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://tva1.sinaimg.cn/large/00831rSTly1gclosfvncqj30hs09j0td.jpg",alt:""}})]),v._v(" "),_("p",[v._v("优点：原理简单、实现方便。")]),v._v(" "),_("p",[v._v("缺点：")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("单点故障问题")]),v._v("，如果协调者挂了那么整个系统都处于不可用的状态了")]),v._v(" "),_("li",[_("strong",[v._v("阻塞问题")]),v._v("，即当协调者发送 "),_("code",[v._v("prepare")]),v._v(" 请求，参与者收到之后如果能处理那么它将会进行事务的处理但并不提交，这个时候会一直占用着资源不释放，如果此时协调者挂了，那么这些资源都不会再释放了，这会极大影响性能")]),v._v(" "),_("li",[_("strong",[v._v("数据不一致问题")]),v._v("，比如当第二阶段，协调者只发送了一部分的 "),_("code",[v._v("commit")]),v._v(" 请求就挂了，那么也就意味着，收到消息的参与者会进行事务的提交，而后面没收到的则不会进行事务提交，那么这时候就会产生数据不一致性问题")])]),v._v(" "),_("h4",{attrs:{id:"_3pc-three-phase-commit"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3pc-three-phase-commit"}},[v._v("#")]),v._v(" 3PC（Three-Phase Commit）")]),v._v(" "),_("p",[v._v("3PC，是 Three-Phase-Comimit 的缩写，即「"),_("strong",[v._v("三阶段提交")]),v._v("」，是二阶段的改进版，将二阶段提交协议的“提交事务请求”过程一分为二。")]),v._v(" "),_("p",[_("strong",[v._v("阶段一：CanCommit")])]),v._v(" "),_("p",[v._v("协调者向所有参与者发送 "),_("code",[v._v("CanCommit")]),v._v(" 请求，参与者收到请求后会根据自身情况查看是否能执行事务，如果可以则返回 YES 响应并进入预备状态，否则返回 NO")]),v._v(" "),_("p",[_("strong",[v._v("阶段二：PreCommit")])]),v._v(" "),_("p",[v._v("协调者根据参与者返回的响应来决定是否可以进行下面的 "),_("code",[v._v("PreCommit")]),v._v(" 操作。如果上面参与者返回的都是 YES，那么协调者将向所有参与者发送 "),_("code",[v._v("PreCommit")]),v._v(" 预提交请求，"),_("strong",[v._v("参与者收到预提交请求后，会进行事务的执行操作，并将 Undo 和 Redo 信息写入事务日志中")]),v._v(" ，最后如果参与者顺利执行了事务则给协调者返回成功的 "),_("code",[v._v("Ack")]),v._v(" 响应。如果在第一阶段协调者收到了 "),_("strong",[v._v("任何一个 NO")]),v._v(" 的信息，或者 "),_("strong",[v._v("在一定时间内")]),v._v(" 并没有收到全部的参与者的响应，那么就会中断事务，它会向所有参与者发送中断请求 "),_("code",[v._v("abort")]),v._v("，参与者收到中断请求之后会立即中断事务，或者在一定时间内没有收到协调者的请求，它也会中断事务")]),v._v(" "),_("p",[_("strong",[v._v("阶段三：DoCommit")])]),v._v(" "),_("p",[v._v("这个阶段其实和 "),_("code",[v._v("2PC")]),v._v(" 的第二阶段差不多，如果协调者收到了所有参与者在 "),_("code",[v._v("PreCommit")]),v._v(" 阶段的 YES 响应，那么协调者将会给所有参与者发送 "),_("code",[v._v("DoCommit")]),v._v(" 请求，"),_("strong",[v._v("参与者收到 DoCommit 请求后则会进行事务的提交工作")]),v._v("，完成后则会给协调者返回响应，协调者收到所有参与者返回的事务提交成功的响应之后则完成事务。若协调者在 "),_("code",[v._v("PreCommit")]),v._v(" 阶段 "),_("strong",[v._v("收到了任何一个 NO 或者在一定时间内没有收到所有参与者的响应")]),v._v(" ，那么就会进行中断请求的发送，参与者收到中断请求后则会 "),_("strong",[v._v("通过上面记录的回滚日志")]),v._v(" 来进行事务的回滚操作，并向协调者反馈回滚状况，协调者收到参与者返回的消息后，中断事务。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://tva1.sinaimg.cn/large/00831rSTly1gclot2rul3j30j60cpgmo.jpg",alt:""}})]),v._v(" "),_("p",[v._v("降低了参与者的阻塞范围，且能在单点故障后继续达成一致。")]),v._v(" "),_("p",[v._v("但是最重要的一致性并没有得到根本的解决，比如在 "),_("code",[v._v("PreCommit")]),v._v(" 阶段，当一个参与者收到了请求之后其他参与者和协调者挂了或者出现了网络分区，这个时候收到消息的参与者都会进行事务提交，这就会出现数据不一致性问题。")]),v._v(" "),_("hr"),v._v(" "),_("h3",{attrs:{id:"🎯-讲一讲-paxos-算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-讲一讲-paxos-算法"}},[v._v("#")]),v._v(" 🎯 讲一讲 Paxos 算法？")]),v._v(" "),_("p",[_("code",[v._v("Paxos")]),v._v(" 算法是基于"),_("strong",[v._v("消息传递且具有高度容错特性的一致性算法")]),v._v("，是目前公认的解决分布式一致性问题最有效的算法之一，"),_("strong",[v._v("其解决的问题就是在分布式系统中如何就某个值（决议）达成一致")]),v._v(" 。")]),v._v(" "),_("p",[v._v("在 "),_("code",[v._v("Paxos")]),v._v(" 中主要有三个角色，分别为 "),_("code",[v._v("Proposer提案者")]),v._v("、"),_("code",[v._v("Acceptor表决者")]),v._v("、"),_("code",[v._v("Learner学习者")]),v._v("。"),_("code",[v._v("Paxos")]),v._v(" 算法和 "),_("code",[v._v("2PC")]),v._v(" 一样，也有两个阶段，分别为 "),_("code",[v._v("Prepare")]),v._v(" 和 "),_("code",[v._v("accept")]),v._v(" 阶段。")]),v._v(" "),_("p",[v._v("在具体的实现中，一个进程可能同时充当多种角色。比如一个进程可能既是 Proposer 又是 Acceptor 又是Learner。Proposer 负责提出提案，Acceptor 负责对提案作出裁决（accept与否），learner 负责学习提案结果。")]),v._v(" "),_("p",[v._v("还有一个很重要的概念叫「"),_("strong",[v._v("提案")]),v._v("」（Proposal）。最终要达成一致的 value 就在提案里。只要 Proposer 发的提案被半数以上的 Acceptor 接受，Proposer 就认为该提案里的 value 被选定了。Acceptor 告诉 Learner 哪个 value 被选定，Learner 就认为那个 value 被选定。")]),v._v(" "),_("p",[_("strong",[v._v("阶段一：prepare 阶段")])]),v._v(" "),_("ol",[_("li",[_("p",[_("code",[v._v("Proposer")]),v._v(" 负责提出 "),_("code",[v._v("proposal")]),v._v("，每个提案者在提出提案时都会首先获取到一个 "),_("strong",[v._v("具有全局唯一性的、递增的提案编号N")]),v._v("，即在整个集群中是唯一的编号 N，然后将该编号赋予其要提出的提案，在"),_("strong",[v._v("第一阶段是只将提案编号发送给所有的表决者")]),v._v("。")])]),v._v(" "),_("li",[_("p",[v._v("如果一个 Acceptor 收到一个编号为 N 的 Prepare 请求，如果小于它已经响应过的请求，则拒绝，不回应或回复error。若 N 大于该 Acceptor 已经响应过的所有 Prepare 请求的编号（maxN），那么它就会将它"),_("strong",[v._v("已经批准过的编号最大的提案")]),v._v("（如果有的话，如果还没有的accept提案的话返回{pok，null，null}）作为响应反馈给 Proposer，同时该 Acceptor 承诺不再接受任何编号小于 N 的提案")]),v._v(" "),_("p",[v._v("eg：假定一个 Acceptor 已经响应过的所有 Prepare 请求对应的提案编号分别是1、2、...5和7，那么该 Acceptor 在接收到一个编号为8的 Prepare 请求后，就会将 7 的提案作为响应反馈给 Proposer。")])])]),v._v(" "),_("p",[_("strong",[v._v("阶段二：accept 阶段")])]),v._v(" "),_("ol",[_("li",[v._v("如果一个 Proposer 收到半数以上 Acceptor 对其发出的编号为 N 的 Prepare 请求的响应，那么它就会发送一个针对 [N,V] 提案的 Accept 请求半数以上的 Acceptor。注意：V 就是收到的响应中编号最大的提案的 value，如果响应中不包含任何提案，那么 V 就由 Proposer 自己决定")]),v._v(" "),_("li",[v._v("如果 Acceptor 收到一个针对编号为N的提案的Accept请求，只要该 Acceptor 没有对编号大于 N 的 Prepare 请求做出过响应，它就通过该提案。如果N小于 Acceptor 以及响应的 prepare 请求，则拒绝，不回应或回复error（当proposer没有收到过半的回应，那么他会重新进入第一阶段，递增提案号，重新提出prepare请求）")]),v._v(" "),_("li",[v._v("最后是 Learner 获取通过的提案（有多种方式）")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://tva1.sinaimg.cn/large/00831rSTly1gcloyv70qsj30sg0lc0ve.jpg",alt:""}})]),v._v(" "),_("p",[_("strong",[_("code",[v._v("paxos")]),v._v(" 算法的死循环问题")])]),v._v(" "),_("p",[v._v("其实就有点类似于两个人吵架，小明说我是对的，小红说我才是对的，两个人据理力争的谁也不让谁🤬🤬。")]),v._v(" "),_("p",[v._v("比如说，此时提案者 P1 提出一个方案 M1，完成了 "),_("code",[v._v("Prepare")]),v._v(" 阶段的工作，这个时候 "),_("code",[v._v("acceptor")]),v._v(" 则批准了 M1，但是此时提案者 P2 同时也提出了一个方案 M2，它也完成了 "),_("code",[v._v("Prepare")]),v._v(" 阶段的工作。然后 P1 的方案已经不能在第二阶段被批准了（因为 "),_("code",[v._v("acceptor")]),v._v(" 已经批准了比 M1 更大的 M2），所以 P1 自增方案变为 M3 重新进入 "),_("code",[v._v("Prepare")]),v._v(" 阶段，然后 "),_("code",[v._v("acceptor")]),v._v(" ，又批准了新的 M3 方案，它又不能批准 M2 了，这个时候 M2 又自增进入 "),_("code",[v._v("Prepare")]),v._v(" 阶段。。。")]),v._v(" "),_("p",[v._v("就这样无休无止的永远提案下去，这就是 "),_("code",[v._v("paxos")]),v._v(" 算法的死循环问题。")]),v._v(" "),_("h3",{attrs:{id:"🎯-谈下你对-zab-协议的了解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-谈下你对-zab-协议的了解"}},[v._v("#")]),v._v(" 🎯 谈下你对 ZAB 协议的了解？")]),v._v(" "),_("p",[v._v("ZAB（Zookeeper Atomic Broadcast） 协议是为分布式协调服务 Zookeeper 专门设计的一种支持"),_("strong",[v._v("崩溃恢复的原子广播协议")]),v._v("。")]),v._v(" "),_("p",[v._v("在 Zookeeper 中，主要依赖 ZAB 协议来实现分布式数据一致性，基于该协议，ZooKeeper 实现了一种主备模式的系统架构来保持集群中各副本之间数据的一致性。")]),v._v(" "),_("p",[v._v("尽管 ZAB 不是 Paxos 的实现，但是 ZAB 也参考了一些 Paxos 的一些设计思想，比如：")]),v._v(" "),_("ul",[_("li",[v._v("leader 向 follows 提出提案(proposal)")]),v._v(" "),_("li",[v._v("leader 需要在达到法定数量(半数以上)的 follows 确认之后才会进行 commit")]),v._v(" "),_("li",[v._v("每一个 proposal 都有一个纪元(epoch)号，类似于 Paxos 中的选票(ballot)")])]),v._v(" "),_("p",[_("code",[v._v("ZAB")]),v._v(" 中有三个主要的角色，"),_("code",[v._v("Leader 领导者")]),v._v("、"),_("code",[v._v("Follower跟随者")]),v._v("、"),_("code",[v._v("Observer观察者")]),v._v(" 。")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("Leader")]),v._v(" ：集群中 "),_("strong",[v._v("唯一的写请求处理者")]),v._v(" ，能够发起投票（投票也是为了进行写请求）。")]),v._v(" "),_("li",[_("code",[v._v("Follower")]),v._v("：能够接收客户端的请求，如果是读请求则可以自己处理，"),_("strong",[v._v("如果是写请求则要转发给 Leader 。在选举过程中会参与投票，有选举权和被选举权 。")])]),v._v(" "),_("li",[_("strong",[v._v("Observer ：就是没有选举权和被选举权的 Follower 。")])])]),v._v(" "),_("p",[v._v("在 ZAB 协议中对 zkServer(即上面我们说的三个角色的总称) 还有两种模式的定义，分别是消息广播和崩溃恢复")]),v._v(" "),_("p",[_("strong",[v._v("消息广播模式")])]),v._v(" "),_("p",[_("img",{attrs:{src:"http://file.sunwaiting.com/zab_broadcast.png",alt:"ZAB广播"}})]),v._v(" "),_("ol",[_("li",[v._v("Leader从客户端收到一个事务请求（如果是集群中其他机器接收到客户端的事务请求，会直接转发给 Leader 服务器）")]),v._v(" "),_("li",[v._v("Leader 服务器生成一个对应的事务 Proposal，并为这个事务生成一个全局递增的唯一的ZXID（通过其 ZXID 来进行排序保证顺序性）")]),v._v(" "),_("li",[v._v("Leader 将这个事务发送给所有的 Follows 节点")]),v._v(" "),_("li",[v._v("Follower 节点将收到的事务请求加入到历史队列(Leader 会为每个 Follower 分配一个单独的队列先进先出，顺序保证消息的因果关系)中，并发送 ack 给 Leader")]),v._v(" "),_("li",[v._v("当 Leader 收到超过半数 Follower 的 ack 消息，Leader会广播一个 commit 消息")]),v._v(" "),_("li",[v._v("当 Follower 收到 commit 请求时，会判断该事务的 ZXID 是不是比历史队列中的任何事务的 ZXID 都小，如果是则提交，如果不是则等待比它更小的事务的 commit")])]),v._v(" "),_("p",[_("img",{attrs:{src:"http://file.sunwaiting.com/zab_commit_1.png",alt:"zab \bcommit流程"}})]),v._v(" "),_("p",[_("strong",[v._v("崩溃恢复模式")])]),v._v(" "),_("p",[v._v("ZAB 的原子广播协议在正常情况下运行良好，但天有不测风云，一旦 Leader 服务器挂掉或者由于网络原因导致与半数的 Follower 的服务器失去联系，那么就会进入崩溃恢复模式。整个恢复过程结束后需要选举出一个新的 Leader 服务器。")]),v._v(" "),_("p",[v._v("恢复模式大致可以分为四个阶段："),_("strong",[v._v("选举、发现、同步、广播")])]),v._v(" "),_("ol",[_("li",[v._v("当 leader 崩溃后，集群进入选举阶段，开始选举出潜在的新 leader(一般为集群中拥有最大 ZXID 的节点)")]),v._v(" "),_("li",[v._v("进入发现阶段，follower 与潜在的新 leader 进行沟通，如果发现超过法定人数的 follower 同意，则潜在的新leader 将 epoc h加1，进入新的纪元。新的 leader 产生")]),v._v(" "),_("li",[v._v("集群间进行数据同步，保证集群中各个节点的事务一致")]),v._v(" "),_("li",[v._v("集群恢复到广播模式，开始接受客户端的写请求")])]),v._v(" "),_("hr"),v._v(" "),_("h2",{attrs:{id:"🌐-三、集群与选举-高可用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🌐-三、集群与选举-高可用"}},[v._v("#")]),v._v(" 🌐 三、集群与选举（高可用）")]),v._v(" "),_("blockquote",[_("p",[_("strong",[v._v("核心思想")]),v._v("：ZK通过选举机制、节点角色分工、数据同步等保证集群的高可用性和数据一致性，理解这些机制对于掌握分布式系统至关重要。")])]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("选举机制")]),v._v("："),_("a",{attrs:{href:"#%F0%9F%8E%AF-zookeeper%E9%80%89%E4%B8%BE%E6%9C%BA%E5%88%B6"}},[v._v("选举机制")]),v._v(" | "),_("a",{attrs:{href:"#%F0%9F%8E%AF-%E9%9B%86%E7%BE%A4%E9%80%89%E4%B8%BB%E7%9A%84%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88"}},[v._v("集群选主原理")])]),v._v(" "),_("li",[_("strong",[v._v("节点角色")]),v._v("："),_("a",{attrs:{href:"#%F0%9F%8E%AF-%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%92%E8%89%B2"}},[v._v("节点角色分工")]),v._v(" | "),_("a",{attrs:{href:"#%F0%9F%8E%AF-zookeeper-%E4%B8%8B-server-%E5%B7%A5%E4%BD%9C%E7%8A%B6%E6%80%81"}},[v._v("节点状态")])]),v._v(" "),_("li",[_("strong",[v._v("故障处理")]),v._v("："),_("a",{attrs:{href:"#%F0%9F%8E%AF-zookeeper-%E5%AE%95%E6%9C%BA%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86"}},[v._v("节点宕机处理")]),v._v(" | "),_("a",{attrs:{href:"#%F0%9F%8E%AF-%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6"}},[v._v("数据同步")])]),v._v(" "),_("li",[_("strong",[v._v("状态同步")]),v._v("："),_("a",{attrs:{href:"#%F0%9F%8E%AF-zookeeper-%E6%80%8E%E4%B9%88%E4%BF%9D%E8%AF%81%E4%B8%BB%E4%BB%8E%E8%8A%82%E7%82%B9%E7%9A%84%E7%8A%B6%E6%80%81%E5%90%8C%E6%AD%A5"}},[v._v("主从同步")]),v._v(" | "),_("a",{attrs:{href:"#%F0%9F%8E%AF-zookeeper-%E6%98%AF%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%A1%BA%E5%BA%8F%E4%B8%80%E8%87%B4%E6%80%A7%E7%9A%84"}},[v._v("事务顺序")])])]),v._v(" "),_("h3",{attrs:{id:"🎯-zookeeper-怎么保证主从节点的状态同步-或者说同步流程是什么样的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-zookeeper-怎么保证主从节点的状态同步-或者说同步流程是什么样的"}},[v._v("#")]),v._v(" 🎯 Zookeeper 怎么保证主从节点的状态同步？或者说同步流程是什么样的")]),v._v(" "),_("p",[v._v("Zookeeper 的核心是原子广播机制，这个机制保证了各个 server 之间的同步。实现这个机制的协议叫做 Zab 协议。Zab 协议有两种模式，它们分别是恢复模式和广播模式。同上")]),v._v(" "),_("hr"),v._v(" "),_("h3",{attrs:{id:"🎯-集群中为什么要有主节点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-集群中为什么要有主节点"}},[v._v("#")]),v._v(" 🎯 集群中为什么要有主节点？")]),v._v(" "),_("p",[v._v("在分布式环境中，有些业务逻辑只需要集群中的某一台机器进行执行，其他的机器可以共享这个结果，这样可以大大减少重复计算，提高性能，于是就需要进行 leader 选举。")]),v._v(" "),_("hr"),v._v(" "),_("h3",{attrs:{id:"🎯-集群中有-3-台服务器-其中一个节点宕机-这个时候-zookeeper-还可以使用吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-集群中有-3-台服务器-其中一个节点宕机-这个时候-zookeeper-还可以使用吗"}},[v._v("#")]),v._v(" 🎯 集群中有 3 台服务器，其中一个节点宕机，这个时候 Zookeeper 还可以使用吗？")]),v._v(" "),_("p",[v._v("可以继续使用，单数服务器只要没超过一半的服务器宕机就可以继续使用。")]),v._v(" "),_("p",[v._v("集群规则为 2N+1 台，N >0，即最少需要 3 台。")]),v._v(" "),_("h3",{attrs:{id:"🎯-zookeeper-宕机如何处理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-zookeeper-宕机如何处理"}},[v._v("#")]),v._v(" 🎯 Zookeeper 宕机如何处理？")]),v._v(" "),_("p",[v._v("Zookeeper 本身也是集群，推荐配置不少于 3 个服务器。Zookeeper 自身也要保证当一个节点宕机时，其他节点会继续提供服务。如果是一个 Follower 宕机，还有 2 台服务器提供访问，因为 Zookeeper 上的数据是有多个副本的，数据并不会丢失；如果是一个 Leader 宕机，Zookeeper 会选举出新的 Leader。")]),v._v(" "),_("p",[v._v("Zookeeper 集群的机制是只要超过半数的节点正常，集群就能正常提供服务。只有在 Zookeeper 节点挂得太多，只剩一半或不到一半节点能工作，集群才失效。所以：")]),v._v(" "),_("p",[v._v("3 个节点的 cluster 可以挂掉 1 个节点(leader 可以得到 2 票 > 1.5)")]),v._v(" "),_("p",[v._v("2 个节点的 cluster 就不能挂掉任何1个节点了(leader 可以得到 1 票 <= 1)")]),v._v(" "),_("hr"),v._v(" "),_("h3",{attrs:{id:"🎯-说下四种类型的数据节点-znode-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-说下四种类型的数据节点-znode-2"}},[v._v("#")]),v._v(" 🎯 说下四种类型的数据节点 Znode？")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("PERSISTENT：持久节点，除非手动删除，否则节点一直存在于 Zookeeper 上。")])]),v._v(" "),_("li",[_("p",[v._v("EPHEMERAL：临时节点，临时节点的生命周期与客户端会话绑定，一旦客户端会话失效（客户端与 Zookeeper连接断开不一定会话失效），那么这个客户端创建的所有临时节点都会被移除。")])]),v._v(" "),_("li",[_("p",[v._v("PERSISTENT_SEQUENTIAL：持久顺序节点，基本特性同持久节点，只是增加了顺序属性，节点名后边会追加一个由父节点维护的自增整型数字。")])]),v._v(" "),_("li",[_("p",[v._v("EPHEMERAL_SEQUENTIAL：临时顺序节点，基本特性同临时节点，增加了顺序属性，节点名后边会追加一个由父节点维护的自增整型数字。")])])]),v._v(" "),_("hr"),v._v(" "),_("h3",{attrs:{id:"🎯-zookeeper选举机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-zookeeper选举机制"}},[v._v("#")]),v._v(" 🎯 Zookeeper选举机制")]),v._v(" "),_("ol",[_("li",[v._v("首先对比zxid。zxid大的服务器优先作为Leader")]),v._v(" "),_("li",[v._v("若zxid相同，比如初始化的时候，每个Server的zxid都为0，就会比较myid，myid大的选出来做Leader。")])]),v._v(" "),_("p",[_("strong",[v._v("服务器初始化时选举")])]),v._v(" "),_("blockquote",[_("p",[v._v("目前有3台服务器，每台服务器均没有数据，它们的编号分别是1,2,3按编号依次启动，它们的选择举过程如下：")])]),v._v(" "),_("ol",[_("li",[v._v("Server1启动，给自己投票（1,0），然后发投票信息，由于其它机器还没有启动所以它收不到反馈信息，Server1的状态一直属于Looking。")]),v._v(" "),_("li",[v._v("Server2启动，给自己投票（2,0），同时与之前启动的Server1交换结果，由于Server2的编号大所以Server2胜出，"),_("strong",[v._v("但此时投票数正好大于半数")]),v._v("，所以Server2成为领导者，Server1成为小弟。")]),v._v(" "),_("li",[v._v("Server3启动，给自己投票（3,0），同时与之前启动的Server1,Server2换信息，尽管Server3的编号大，但之前Server2已经胜出，所以Server3只能成为小弟。")]),v._v(" "),_("li",[v._v("当确定了Leader之后，每个Server更新自己的状态，Leader将状态更新为Leading，Follower将状态更新为Following。")])]),v._v(" "),_("p",[_("strong",[v._v("服务器运行期间的选举")])]),v._v(" "),_("blockquote",[_("p",[v._v("zookeeper运行期间，如果有新的Server加入，或者非Leader的Server宕机，那么Leader将会同步数据到新Server或者寻找其他备用Server替代宕机的Server。若Leader宕机，此时集群暂停对外服务，开始在内部选举新的Leader。假设当前集群中有Server1、Server2、Server3三台服务器，Server2为当前集群的Leader，由于意外情况，Server2宕机了，便开始进入选举状态。过程如下")])]),v._v(" "),_("ol",[_("li",[v._v("变更状态。其他的非Observer服务器将自己的状态改变为Looking，开始进入Leader选举。")]),v._v(" "),_("li",[v._v("每个Server发出一个投票（myid，zxid），由于此集群已经运行过，所以每个Server上的zxid可能不同。假设Server1的zxid为100，Server3的为99，第一轮投票中，Server1和Server3都投自己，票分别为（1，100）,（3,99）,将自己的票发送给集群中所有机器。")]),v._v(" "),_("li",[v._v("每个Server接收接收来自其他Server的投票，接下来的步骤与启动时步骤相同。")])]),v._v(" "),_("hr"),v._v(" "),_("h2",{attrs:{id:"⚡-四、核心特性-watcher机制与权限控制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#⚡-四、核心特性-watcher机制与权限控制"}},[v._v("#")]),v._v(" ⚡ 四、核心特性（Watcher机制与权限控制）")]),v._v(" "),_("blockquote",[_("p",[_("strong",[v._v("核心思想")]),v._v("：ZooKeeper的核心特性包括Watcher事件通知机制、ACL权限控制、会话管理等，这些特性是ZK实现分布式协调的关键技术。")])]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("事件通知")]),v._v("："),_("a",{attrs:{href:"#%F0%9F%8E%AF-zookeeper-watcher-%E6%9C%BA%E5%88%B6--%E6%95%B0%E6%8D%AE%E5%8F%98%E6%9B%B4%E9%80%9A%E7%9F%A5"}},[v._v("Watcher机制")]),v._v(" | "),_("a",{attrs:{href:"#%F0%9F%8E%AF-%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%B3%A8%E5%86%8C-watcher-%E5%AE%9E%E7%8E%B0"}},[v._v("客户端注册")]),v._v(" | "),_("a",{attrs:{href:"#%F0%9F%8E%AF-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%A4%84%E7%90%86-watcher-%E5%AE%9E%E7%8E%B0"}},[v._v("服务端处理")]),v._v(" | "),_("a",{attrs:{href:"#%F0%9F%8E%AF-%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%9B%9E%E8%B0%83-watcher"}},[v._v("客户端回调")])]),v._v(" "),_("li",[_("strong",[v._v("权限控制")]),v._v("："),_("a",{attrs:{href:"#%F0%9F%8E%AF-acl-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%E6%9C%BA%E5%88%B6"}},[v._v("ACL机制")]),v._v(" | "),_("a",{attrs:{href:"#%F0%9F%8E%AF-chroot-%E7%89%B9%E6%80%A7"}},[v._v("Chroot特性")])]),v._v(" "),_("li",[_("strong",[v._v("会话管理")]),v._v("："),_("a",{attrs:{href:"#%F0%9F%8E%AF-%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86"}},[v._v("会话机制")]),v._v(" | "),_("a",{attrs:{href:"#%E5%88%86%E6%A1%B6%E7%AD%96%E7%95%A5"}},[v._v("分桶策略")])])]),v._v(" "),_("h3",{attrs:{id:"🎯-zookeeper-watcher-机制-数据变更通知"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-zookeeper-watcher-机制-数据变更通知"}},[v._v("#")]),v._v(" 🎯 Zookeeper Watcher 机制 – 数据变更通知")]),v._v(" "),_("p",[v._v("Zookeeper 允许客户端向服务端的某个 Znode 注册一个 Watcher 监听，当服务端的一些指定事件触发了这个 Watcher，服务端会向指定客户端发送一个事件通知来实现分布式的通知功能，然后客户端根据 Watcher 通知状态和事件类型做出业务上的改变。")]),v._v(" "),_("p",[v._v("工作机制：")]),v._v(" "),_("p",[v._v("（1）客户端注册 watcher")]),v._v(" "),_("p",[v._v("（2）服务端处理 watcher")]),v._v(" "),_("p",[v._v("（3）客户端回调 watcher")]),v._v(" "),_("p",[v._v("Watcher 特性总结：")]),v._v(" "),_("p",[v._v("（1）一次性")]),v._v(" "),_("p",[v._v("无论是服务端还是客户端，一旦一个 Watcher 被 触 发 ，Zookeeper 都会将其从相应的存储中移除。这样的设计有效的减轻了服务端的压力，不然对于更新非常频繁的节点，服务端会不断的向客户端发送事件通知，无论对于网络还是服务端的压力都非常大。")]),v._v(" "),_("p",[v._v("（2）客户端串行执行")]),v._v(" "),_("p",[v._v("客户端 Watcher 回调的过程是一个串行同步的过程。")]),v._v(" "),_("p",[v._v("（3）轻量")]),v._v(" "),_("p",[v._v("3.1、Watcher 通知非常简单，只会告诉客户端发生了事件，而不会说明事件的具体内容。")]),v._v(" "),_("p",[v._v("3.2、客户端向服务端注册 Watcher 的时候，并不会把客户端真实的 Watcher 对象实体传递到服务端，仅仅是在客户端请求中使用 boolean 类型属性进行了标记。")]),v._v(" "),_("p",[v._v("（4）watcher event 异步发送 watcher 的通知事件从 server 发送到 client 是异步的，这就存在一个问题，不同的客户端和服务器之间通过 socket 进行通信，由于网络延迟或其他因素导致客户端在不通的时刻监听到事件，由于 Zookeeper 本身提供了 ordering guarantee，即客户端监听事件后，才会感知它所监视 znode发生了变化。所以我们使用 Zookeeper 不能期望能够监控到节点每次的变化。Zookeeper 只能保证最终的一致性，而无法保证强一致性。")]),v._v(" "),_("p",[v._v("（5）注册 watcher getData、exists、getChildren")]),v._v(" "),_("p",[v._v("（6）触发 watcher create、delete、setData")]),v._v(" "),_("p",[v._v("（7）当一个客户端连接到一个新的服务器上时，watch 将会被以任意会话事件触发。当与一个服务器失去连接的时候，是无法接收到 watch 的。而当 client 重新连接时，如果需要的话，所有先前注册过的 watch，都会被重新注册。通常这是完全透明的。只有在一个特殊情况下，watch 可能会丢失：对于一个未创建的 znode的 exist watch，如果在客户端断开连接期间被创建了，并且随后在客户端连接上之前又删除了，这种情况下，这个 watch 事件可能会被丢失。")]),v._v(" "),_("h3",{attrs:{id:"🎯-客户端注册-watcher-实现"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-客户端注册-watcher-实现"}},[v._v("#")]),v._v(" 🎯 客户端注册 Watcher 实现")]),v._v(" "),_("p",[v._v("（1）调用 getData()/getChildren()/exist()三个 API，传入 Watcher 对象")]),v._v(" "),_("p",[v._v("（2）标记请求 request，封装 Watcher 到 WatchRegistration")]),v._v(" "),_("p",[v._v("（3）封装成 Packet 对象，发服务端发送 request")]),v._v(" "),_("p",[v._v("（4）收到服务端响应后，将 Watcher 注册到 ZKWatcherManager 中进行管理")]),v._v(" "),_("p",[v._v("（5）请求返回，完成注册。")]),v._v(" "),_("h3",{attrs:{id:"🎯-服务端处理-watcher-实现"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-服务端处理-watcher-实现"}},[v._v("#")]),v._v(" 🎯 服务端处理 Watcher 实现")]),v._v(" "),_("p",[v._v("（1）服务端接收 Watcher 并存储")]),v._v(" "),_("p",[v._v("接收到客户端请求，处理请求判断是否需要注册 Watcher，需要的话将数据节点的节点路径和 ServerCnxn（ServerCnxn 代表一个客户端和服务端的连接，实现了 Watcher 的 process 接口，此时可以看成一个 Watcher 对象）存储在WatcherManager 的 WatchTable 和 watch2Paths 中去。")]),v._v(" "),_("p",[v._v("（2）Watcher 触发")]),v._v(" "),_("p",[v._v("以服务端接收到 setData() 事务请求触发 NodeDataChanged 事件为例：")]),v._v(" "),_("p",[v._v("2.1 封装 WatchedEvent")]),v._v(" "),_("p",[v._v("将通知状态（SyncConnected）、事件类型（NodeDataChanged）以及节点路径封装成一个 WatchedEvent 对象")]),v._v(" "),_("p",[v._v("2.2 查询 Watcher")]),v._v(" "),_("p",[v._v("从 WatchTable 中根据节点路径查找 Watcher")]),v._v(" "),_("p",[v._v("2.3 没找到；说明没有客户端在该数据节点上注册过 Watcher")]),v._v(" "),_("p",[v._v("2.4 找到；提取并从 WatchTable 和 Watch2Paths 中删除对应 Watcher（从这里可以看出 Watcher 在服务端是一次性的，触发一次就失效了）")]),v._v(" "),_("p",[v._v("（3）调用 process 方法来触发 Watcher")]),v._v(" "),_("p",[v._v("这里 process 主要就是通过 ServerCnxn 对应的 TCP 连接发送 Watcher 事件通知。")]),v._v(" "),_("h3",{attrs:{id:"🎯-客户端回调-watcher"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-客户端回调-watcher"}},[v._v("#")]),v._v(" 🎯 客户端回调 Watcher")]),v._v(" "),_("p",[v._v("客户端 SendThread 线程接收事件通知，交由 EventThread 线程回调 Watcher。")]),v._v(" "),_("p",[v._v("客户端的 Watcher 机制同样是一次性的，一旦被触发后，该 Watcher 就失效了。")]),v._v(" "),_("h3",{attrs:{id:"🎯-acl-权限控制机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-acl-权限控制机制"}},[v._v("#")]),v._v(" 🎯 ACL 权限控制机制")]),v._v(" "),_("p",[v._v("UGO（User/Group/Others）")]),v._v(" "),_("p",[v._v("目前在 Linux/Unix 文件系统中使用，也是使用最广泛的权限控制方式。是一种粗粒度的文件系统权限控制模式。")]),v._v(" "),_("p",[v._v("ACL（Access Control List）访问控制列表")]),v._v(" "),_("p",[v._v("包括三个方面：")]),v._v(" "),_("p",[v._v("权限模式（Scheme）")]),v._v(" "),_("p",[v._v("（1）IP：从 IP 地址粒度进行权限控制")]),v._v(" "),_("p",[v._v("（2）Digest：最常用，用类似于 username:password 的权限标识来进行权限配置，便于区分不同应用来进行权限控制")]),v._v(" "),_("p",[v._v("（3）World：最开放的权限控制方式，是一种特殊的 digest 模式，只有一个权限标识“world:anyone”")]),v._v(" "),_("p",[v._v("（4）Super：超级用户")]),v._v(" "),_("p",[v._v("授权对象")]),v._v(" "),_("p",[v._v("授权对象指的是权限赋予的用户或一个指定实体，例如 IP 地址或是机器灯。")]),v._v(" "),_("p",[v._v("权限 Permission")]),v._v(" "),_("p",[v._v("（1）CREATE：数据节点创建权限，允许授权对象在该 Znode 下创建子节点")]),v._v(" "),_("p",[v._v("（2）DELETE：子节点删除权限，允许授权对象删除该数据节点的子节点")]),v._v(" "),_("p",[v._v("（3）READ：数据节点的读取权限，允许授权对象访问该数据节点并读取其数据内容或子节点列表等")]),v._v(" "),_("p",[v._v("（4）WRITE：数据节点更新权限，允许授权对象对该数据节点进行更新操作")]),v._v(" "),_("p",[v._v("（5）ADMIN：数据节点管理权限，允许授权对象对该数据节点进行 ACL 相关设置操作")]),v._v(" "),_("h3",{attrs:{id:"🎯-chroot-特性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-chroot-特性"}},[v._v("#")]),v._v(" 🎯 Chroot 特性")]),v._v(" "),_("p",[v._v("3.2.0 版本后，添加了 Chroot 特性，该特性允许每个客户端为自己设置一个命名空间。如果一个客户端设置了 Chroot，那么该客户端对服务器的任何操作，都将会被限制在其自己的命名空间下。")]),v._v(" "),_("p",[v._v("通过设置 Chroot，能够将一个客户端应用于 Zookeeper 服务端的一颗子树相对应，在那些多个应用公用一个 Zookeeper 进群的场景下，对实现不同应用间的相互隔离非常有帮助。")]),v._v(" "),_("h3",{attrs:{id:"🎯-会话管理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-会话管理"}},[v._v("#")]),v._v(" 🎯 会话管理")]),v._v(" "),_("p",[v._v("分桶策略：将类似的会话放在同一区块中进行管理，以便于 Zookeeper 对会话进行不同区块的隔离处理以及同一区块的统一处理。")]),v._v(" "),_("p",[v._v("分配原则：每个会话的“下次超时时间点”（ExpirationTime）")]),v._v(" "),_("p",[v._v("计算公式：")]),v._v(" "),_("p",[v._v("ExpirationTime_ = currentTime + sessionTimeout")]),v._v(" "),_("p",[v._v("ExpirationTime = (ExpirationTime_ / ExpirationInrerval + 1) *")]),v._v(" "),_("p",[v._v("ExpirationInterval , ExpirationInterval 是指 Zookeeper 会话超时检查时间间隔，默认 tickTime")]),v._v(" "),_("h3",{attrs:{id:"🎯-服务器角色"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-服务器角色"}},[v._v("#")]),v._v(" 🎯 服务器角色")]),v._v(" "),_("p",[v._v("Leader")]),v._v(" "),_("p",[v._v("（1）事务请求的唯一调度和处理者，保证集群事务处理的顺序性")]),v._v(" "),_("p",[v._v("（2）集群内部各服务的调度者")]),v._v(" "),_("p",[v._v("Follower")]),v._v(" "),_("p",[v._v("（1）处理客户端的非事务请求，转发事务请求给 Leader 服务器")]),v._v(" "),_("p",[v._v("（2）参与事务请求 Proposal 的投票")]),v._v(" "),_("p",[v._v("（3）参与 Leader 选举投票")]),v._v(" "),_("p",[v._v("Observer")]),v._v(" "),_("p",[v._v("（1）3.0 版本以后引入的一个服务器角色，在不影响集群事务处理能力的基础上提升集群的非事务处理能力")]),v._v(" "),_("p",[v._v("（2）处理客户端的非事务请求，转发事务请求给 Leader 服务器")]),v._v(" "),_("p",[v._v("（3）不参与任何形式的投票")]),v._v(" "),_("h3",{attrs:{id:"🎯-zookeeper-下-server-工作状态"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-zookeeper-下-server-工作状态"}},[v._v("#")]),v._v(" 🎯 Zookeeper 下 Server 工作状态")]),v._v(" "),_("p",[v._v("服务器具有四种状态，分别是 LOOKING、FOLLOWING、LEADING、OBSERVING。")]),v._v(" "),_("p",[v._v("（1）LOOKING：寻 找 Leader 状态。当服务器处于该状态时，它会认为当前集群中没有 Leader，因此需要进入 Leader 选举状态。")]),v._v(" "),_("p",[v._v("（2）FOLLOWING：跟随者状态。表明当前服务器角色是 Follower。")]),v._v(" "),_("p",[v._v("（3）LEADING：领导者状态。表明当前服务器角色是 Leader。")]),v._v(" "),_("p",[v._v("（4）OBSERVING：观察者状态。表明当前服务器角色是 Observer。")]),v._v(" "),_("hr"),v._v(" "),_("h2",{attrs:{id:"🔧-五、典型应用场景-分布式协调实践"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🔧-五、典型应用场景-分布式协调实践"}},[v._v("#")]),v._v(" 🔧 五、典型应用场景（分布式协调实践）")]),v._v(" "),_("blockquote",[_("p",[_("strong",[v._v("核心思想")]),v._v("：ZooKeeper的典型应用场景包括分布式锁、配置管理、服务发现、负载均衡等，这些场景体现了ZK在分布式系统中的实际价值。")])]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("配置管理")]),v._v("："),_("a",{attrs:{href:"#%E6%95%B0%E6%8D%AE%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85"}},[v._v("数据发布/订阅")]),v._v(" | "),_("a",{attrs:{href:"#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1"}},[v._v("负载均衡")]),v._v(" | "),_("a",{attrs:{href:"#zk-%E7%9A%84%E5%91%BD%E5%90%8D%E6%9C%8D%E5%8A%A1%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F"}},[v._v("命名服务")])]),v._v(" "),_("li",[_("strong",[v._v("分布式协调")]),v._v("："),_("a",{attrs:{href:"#%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E7%9F%A5%E5%92%8C%E5%8D%8F%E8%B0%83"}},[v._v("分布式通知")]),v._v(" | "),_("a",{attrs:{href:"#zookeeper-%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86"}},[v._v("集群管理")]),v._v(" | "),_("a",{attrs:{href:"#master-%E9%80%89%E4%B8%BE"}},[v._v("Master选举")])]),v._v(" "),_("li",[_("strong",[v._v("同步原语")]),v._v("："),_("a",{attrs:{href:"#zookeeper-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81"}},[v._v("分布式锁")]),v._v(" | "),_("a",{attrs:{href:"#zookeeper-%E9%98%9F%E5%88%97%E7%AE%A1%E7%90%86"}},[v._v("队列管理")])])]),v._v(" "),_("h3",{attrs:{id:"🎯-zookeeper-实现分布式锁的原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-zookeeper-实现分布式锁的原理"}},[v._v("#")]),v._v(" 🎯 Zookeeper 实现分布式锁的原理")]),v._v(" "),_("blockquote",[_("p",[v._v("Zookeeper 分布式锁基于 "),_("strong",[v._v("临时顺序节点和 Watch 机制")]),v._v("实现：\n客户端在 "),_("code",[v._v("/lock")]),v._v(" 下创建临时顺序节点，序号最小的客户端获得锁，其他客户端监听前一个节点的删除事件，等到前一个节点释放锁后再依次获得。")]),v._v(" "),_("p",[v._v("这种方式可以保证锁的 "),_("strong",[v._v("公平性")]),v._v("，同时利用临时节点避免了死锁。")]),v._v(" "),_("p",[v._v("不过 Zookeeper 的锁性能一般在万级 QPS，适合金融、广告投放这种需要强一致性的场景，而高并发写场景更推荐 Redis 分布式锁。")])]),v._v(" "),_("p",[v._v("Zookeeper 本身是一个分布式协调服务，它提供了 "),_("strong",[v._v("强一致性、顺序性和事件通知")]),v._v("，用来做分布式锁非常合适。核心思想是利用 "),_("strong",[v._v("临时顺序节点 + Watch 机制")]),v._v("。")]),v._v(" "),_("p",[_("strong",[v._v("1. 基本实现步骤（公平锁）")])]),v._v(" "),_("p",[v._v("假设我们约定锁的路径为 "),_("code",[v._v("/lock")]),v._v("：")]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("所有客户端到 "),_("code",[v._v("/lock")]),v._v(" 下创建临时顺序节点")]),v._v(" "),_("ul",[_("li",[v._v("比如 "),_("code",[v._v("clientA")]),v._v(" 创建 "),_("code",[v._v("/lock/lock_0001")]),v._v("，"),_("code",[v._v("clientB")]),v._v(" 创建 "),_("code",[v._v("/lock/lock_0002")]),v._v("。")]),v._v(" "),_("li",[v._v("节点是 "),_("strong",[v._v("临时的")]),v._v("，客户端宕机或会话断开会自动删除，避免死锁。")])])]),v._v(" "),_("li",[_("strong",[v._v("获取子节点列表，判断自己是否是最小节点")]),v._v(" "),_("ul",[_("li",[v._v("谁的节点序号最小，谁就获得锁。")]),v._v(" "),_("li",[v._v("比如 "),_("code",[v._v("/lock/lock_0001")]),v._v(" 最小，则 "),_("code",[v._v("clientA")]),v._v(" 获得锁。")])])]),v._v(" "),_("li",[_("strong",[v._v("没拿到锁的客户端监听前一个节点")]),v._v(" "),_("ul",[_("li",[v._v("比如 "),_("code",[v._v("clientB")]),v._v(" 创建了 "),_("code",[v._v("lock_0002")]),v._v("，就监听 "),_("code",[v._v("lock_0001")]),v._v("。")]),v._v(" "),_("li",[v._v("而不是监听所有节点，避免“羊群效应”。")])])]),v._v(" "),_("li",[_("strong",[v._v("前一个节点被删除时，触发 Watch 事件")]),v._v(" "),_("ul",[_("li",[v._v("如果 "),_("code",[v._v("clientA")]),v._v(" 释放锁（删除 "),_("code",[v._v("lock_0001")]),v._v("），Zookeeper 会通知 "),_("code",[v._v("clientB")]),v._v("。")]),v._v(" "),_("li",[_("code",[v._v("clientB")]),v._v(" 再检查是否轮到自己（是否是最小节点），如果是就获得锁。")])])]),v._v(" "),_("li",[_("strong",[v._v("释放锁")]),v._v(" "),_("ul",[_("li",[v._v("拿到锁的客户端执行完任务后，主动删除自己创建的节点，触发通知，锁转交下一个客户端。")])])])]),v._v(" "),_("p",[_("strong",[v._v("2. 关键点")])]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("临时节点")]),v._v("：保证客户端异常宕机时，锁能自动释放。")]),v._v(" "),_("li",[_("strong",[v._v("顺序节点")]),v._v("：保证锁的公平性（FIFO）。")]),v._v(" "),_("li",[_("strong",[v._v("Watch 机制")]),v._v("：实现事件驱动，避免轮询浪费资源。")])]),v._v(" "),_("p",[_("strong",[v._v("3. 示例流程图")])]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("/lock\n ├── lock_0001 (clientA)\n ├── lock_0002 (clientB)\n ├── lock_0003 (clientC)\n")])])]),_("ul",[_("li",[v._v("clientA → 最小节点 → 获得锁")]),v._v(" "),_("li",[v._v("clientB → 监听 lock_0001")]),v._v(" "),_("li",[v._v("clientC → 监听 lock_0002")]),v._v(" "),_("li",[v._v("当 clientA 删除 lock_0001 → 通知 clientB")]),v._v(" "),_("li",[v._v("clientB 获得锁，以此类推")])]),v._v(" "),_("p",[_("strong",[v._v("优缺点")])]),v._v(" "),_("p",[v._v("✅ 优点")]),v._v(" "),_("ul",[_("li",[v._v("公平锁，顺序执行，避免“饥饿”。")]),v._v(" "),_("li",[v._v("临时节点避免死锁。")]),v._v(" "),_("li",[v._v("Watch 机制高效。")])]),v._v(" "),_("p",[v._v("❌ 缺点")]),v._v(" "),_("ul",[_("li",[v._v("Zookeeper 本身是 CP 系统，性能有限，"),_("strong",[v._v("QPS 一般在万级")]),v._v("，不适合高频抢锁场景（比 Redis 慢）。")]),v._v(" "),_("li",[v._v("如果客户端大量竞争，Zookeeper 节点会有较大压力。")])]),v._v(" "),_("h3",{attrs:{id:"🎯-数据同步"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-数据同步"}},[v._v("#")]),v._v(" 🎯 数据同步")]),v._v(" "),_("p",[v._v("整个集群完成 Leader 选举之后，Learner（Follower 和 Observer 的统称）回向Leader 服务器进行注册。当 Learner 服务器想 Leader 服务器完成注册后，进入数据同步环节。")]),v._v(" "),_("p",[v._v("数据同步流程：（均以消息传递的方式进行）")]),v._v(" "),_("p",[v._v("Learner 向 Leader 注册")]),v._v(" "),_("p",[v._v("数据同步")]),v._v(" "),_("p",[v._v("同步确认")]),v._v(" "),_("p",[v._v("Zookeeper 的数据同步通常分为四类：")]),v._v(" "),_("p",[v._v("（1）直接差异化同步（DIFF 同步）")]),v._v(" "),_("p",[v._v("（2）先回滚再差异化同步（TRUNC+DIFF 同步）")]),v._v(" "),_("p",[v._v("（3）仅回滚同步（TRUNC 同步）")]),v._v(" "),_("p",[v._v("（4）全量同步（SNAP 同步）")]),v._v(" "),_("p",[v._v("在进行数据同步前，Leader 服务器会完成数据同步初始化：")]),v._v(" "),_("p",[v._v("peerLastZxid：")]),v._v(" "),_("p",[v._v("· 从 learner 服务器注册时发送的 ACKEPOCH 消息中提取 lastZxid（该Learner 服务器最后处理的 ZXID）")]),v._v(" "),_("p",[v._v("minCommittedLog：")]),v._v(" "),_("p",[v._v("· Leader 服务器 Proposal 缓存队列 committedLog 中最小 ZXIDmaxCommittedLog：")]),v._v(" "),_("p",[v._v("· Leader 服务器 Proposal 缓存队列 committedLog 中最大 ZXID直接差异化同步（DIFF 同步）")]),v._v(" "),_("p",[v._v("· 场景：peerLastZxid 介于 minCommittedLog 和 maxCommittedLog之间先回滚再差异化同步（TRUNC+DIFF 同步）")]),v._v(" "),_("p",[v._v("· 场景：当新的 Leader 服务器发现某个 Learner 服务器包含了一条自己没有的事务记录，那么就需要让该 Learner 服务器进行事务回滚–回滚到 Leader服务器上存在的，同时也是最接近于 peerLastZxid 的 ZXID仅回滚同步（TRUNC 同步）")]),v._v(" "),_("p",[v._v("· 场景：peerLastZxid 大于 maxCommittedLog")]),v._v(" "),_("p",[v._v("全量同步（SNAP 同步）")]),v._v(" "),_("p",[v._v("· 场景一：peerLastZxid 小于 minCommittedLog")]),v._v(" "),_("p",[v._v("· 场景二：Leader 服务器上没有 Proposal 缓存队列且 peerLastZxid 不等于 lastProcessZxid")]),v._v(" "),_("h3",{attrs:{id:"🎯-zookeeper-是如何保证事务的顺序一致性的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-zookeeper-是如何保证事务的顺序一致性的"}},[v._v("#")]),v._v(" 🎯 zookeeper 是如何保证事务的顺序一致性的？")]),v._v(" "),_("p",[v._v("zookeeper 采用了全局递增的事务 Id 来标识，所有的 proposal（提议）都在被提出的时候加上了 zxid，zxid 实际上是一个 64 位的数字，高 32 位是 epoch（ 时期; 纪元; 世; 新时代）用来标识 leader 周期，如果有新的 leader 产生出来，epoch会自增，低 32 位用来递增计数。当新产生 proposal 的时候，会依据数据库的两阶段过程，首先会向其他的 server 发出事务执行请求，如果超过半数的机器都能执行并且能够成功，那么就会开始执行。")]),v._v(" "),_("h3",{attrs:{id:"🎯-分布式集群中为什么会有-master主节点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-分布式集群中为什么会有-master主节点"}},[v._v("#")]),v._v(" 🎯 分布式集群中为什么会有 Master主节点？")]),v._v(" "),_("p",[v._v("在分布式环境中，有些业务逻辑只需要集群中的某一台机器进行执行，其他的机器可以共享这个结果，这样可以大大减少重复计算，提高性能，于是就需要进行 leader 选举。")]),v._v(" "),_("h3",{attrs:{id:"🎯-zk-节点宕机如何处理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-zk-节点宕机如何处理"}},[v._v("#")]),v._v(" 🎯 zk 节点宕机如何处理？")]),v._v(" "),_("p",[v._v("Zookeeper 本身也是集群，推荐配置不少于 3 个服务器。Zookeeper 自身也要保证当一个节点宕机时，其他节点会继续提供服务。")]),v._v(" "),_("p",[v._v("如果是一个 Follower 宕机，还有 2 台服务器提供访问，因为 Zookeeper 上的数据是有多个副本的，数据并不会丢失；")]),v._v(" "),_("p",[v._v("如果是一个 Leader 宕机，Zookeeper 会选举出新的 Leader。")]),v._v(" "),_("p",[v._v("ZK 集群的机制是只要超过半数的节点正常，集群就能正常提供服务。只有在 ZK节点挂得太多，只剩一半或不到一半节点能工作，集群才失效。")]),v._v(" "),_("p",[v._v("所以")]),v._v(" "),_("p",[v._v("3 个节点的 cluster 可以挂掉 1 个节点(leader 可以得到 2 票>1.5)")]),v._v(" "),_("p",[v._v("2 个节点的 cluster 就不能挂掉任何 1 个节点了(leader 可以得到 1 票<=1)")]),v._v(" "),_("h3",{attrs:{id:"🎯-zookeeper-负载均衡和-nginx-负载均衡区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-zookeeper-负载均衡和-nginx-负载均衡区别"}},[v._v("#")]),v._v(" 🎯 zookeeper 负载均衡和 nginx 负载均衡区别")]),v._v(" "),_("p",[v._v("zk 的负载均衡是可以调控，nginx 只是能调权重，其他需要可控的都需要自己写插件；但是 nginx 的吞吐量比 zk 大很多，应该说按业务选择用哪种方式。")]),v._v(" "),_("h3",{attrs:{id:"🎯-zookeeper-有哪几种几种部署模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-zookeeper-有哪几种几种部署模式"}},[v._v("#")]),v._v(" 🎯 Zookeeper 有哪几种几种部署模式？")]),v._v(" "),_("p",[v._v("Zookeeper 有三种部署模式：")]),v._v(" "),_("ol",[_("li",[v._v("单机部署：一台集群上运行；")]),v._v(" "),_("li",[v._v("集群部署：多台集群运行；")]),v._v(" "),_("li",[v._v("伪集群部署：一台集群启动多个 Zookeeper 实例运行。")])]),v._v(" "),_("h3",{attrs:{id:"🎯-集群最少要几台机器-集群规则是怎样的-集群中有-3-台服务器-其中一个节点宕机-这个时候-zookeeper-还可以使用吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-集群最少要几台机器-集群规则是怎样的-集群中有-3-台服务器-其中一个节点宕机-这个时候-zookeeper-还可以使用吗"}},[v._v("#")]),v._v(" 🎯 集群最少要几台机器，集群规则是怎样的？集群中有 3 台服务器，其中一个节点宕机，这个时候 Zookeeper 还可以使用吗？")]),v._v(" "),_("p",[v._v("集群规则为 2N+1 台，N>0，即 3 台。可以继续使用，单数服务器只要没超过一半的服务器宕机就可以继续使用。")]),v._v(" "),_("h3",{attrs:{id:"🎯-集群支持动态添加机器吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-集群支持动态添加机器吗"}},[v._v("#")]),v._v(" 🎯 集群支持动态添加机器吗？")]),v._v(" "),_("p",[v._v("其实就是水平扩容了，Zookeeper 在这方面不太好。两种方式：")]),v._v(" "),_("p",[v._v("全部重启：关闭所有 Zookeeper 服务，修改配置之后启动。不影响之前客户端的会话。")]),v._v(" "),_("p",[v._v("逐个重启：在过半存活即可用的原则下，一台机器重启不影响整个集群对外提供服务。这是比较常用的方式。")]),v._v(" "),_("p",[v._v("3.5 版本开始支持动态扩容。")]),v._v(" "),_("h3",{attrs:{id:"🎯-zookeeper-对节点的-watch-监听通知是永久的吗-为什么不是永久的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-zookeeper-对节点的-watch-监听通知是永久的吗-为什么不是永久的"}},[v._v("#")]),v._v(" 🎯 Zookeeper 对节点的 watch 监听通知是永久的吗？为什么不是永久的?")]),v._v(" "),_("p",[v._v("不是。官方声明：一个 Watch 事件是一个一次性的触发器，当被设置了 Watch的数据发生了改变的时候，则服务器将这个改变发送给设置了 Watch 的客户端，以便通知它们。")]),v._v(" "),_("p",[v._v("为什么不是永久的，举个例子，如果服务端变动频繁，而监听的客户端很多情况下，每次变动都要通知到所有的客户端，给网络和服务器造成很大压力。")]),v._v(" "),_("p",[v._v("一般是客户端执行 getData(“/节点 A”,true)，如果节点 A 发生了变更或删除，客户端会得到它的 watch 事件，但是在之后节点 A 又发生了变更，而客户端又没有设置 watch 事件，就不再给客户端发送。")]),v._v(" "),_("p",[v._v("在实际应用中，很多情况下，我们的客户端不需要知道服务端的每一次变动，我只要最新的数据即可。")]),v._v(" "),_("h3",{attrs:{id:"🎯-zookeeper-的-java-客户端都有哪些"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-zookeeper-的-java-客户端都有哪些"}},[v._v("#")]),v._v(" 🎯 Zookeeper 的 java 客户端都有哪些？")]),v._v(" "),_("p",[v._v("java 客户端：zk 自带的 zkclient 及 Apache 开源的 Curator。")]),v._v(" "),_("h3",{attrs:{id:"🎯-chubby-是什么-和-zookeeper-比你怎么看"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-chubby-是什么-和-zookeeper-比你怎么看"}},[v._v("#")]),v._v(" 🎯 chubby 是什么，和 zookeeper 比你怎么看？")]),v._v(" "),_("p",[v._v("chubby 是 google 的，完全实现 paxos 算法，不开源。zookeeper 是 chubby的开源实现，使用 zab 协议，paxos 算法的变种。")]),v._v(" "),_("h3",{attrs:{id:"🎯-说几个-zookeeper-常用的命令。"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-说几个-zookeeper-常用的命令。"}},[v._v("#")]),v._v(" 🎯 说几个 zookeeper 常用的命令。")]),v._v(" "),_("p",[v._v("常用命令：ls get set create delete 等。")]),v._v(" "),_("h3",{attrs:{id:"🎯-zab-和-paxos-算法的联系与区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-zab-和-paxos-算法的联系与区别"}},[v._v("#")]),v._v(" 🎯 ZAB 和 Paxos 算法的联系与区别？")]),v._v(" "),_("p",[v._v("相同点：")]),v._v(" "),_("p",[v._v("（1）两者都存在一个类似于 Leader 进程的角色，由其负责协调多个 Follower 进程的运行")]),v._v(" "),_("p",[v._v("（2）Leader 进程都会等待超过半数的 Follower 做出正确的反馈后，才会将一个提案进行提交")]),v._v(" "),_("p",[v._v("（3）ZAB 协议中，每个 Proposal 中都包含一个 epoch 值来代表当前的 Leader周期，Paxos 中名字为 Ballot")]),v._v(" "),_("p",[v._v("不同点：")]),v._v(" "),_("p",[v._v("ZAB 用来构建高可用的分布式数据主备系统（Zookeeper），Paxos 是用来构建分布式一致性状态机系统。")]),v._v(" "),_("h3",{attrs:{id:"🎯-zookeeper-都有哪些功能-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-zookeeper-都有哪些功能-2"}},[v._v("#")]),v._v(" 🎯 Zookeeper 都有哪些功能？")]),v._v(" "),_("ol",[_("li",[v._v("集群管理：监控节点存活状态、运行请求等；")]),v._v(" "),_("li",[v._v("主节点选举：主节点挂掉了之后可以从备用的节点开始新一轮选主，主节点选举说的就是这个选举的过程，使用 Zookeeper 可以协助完成这个过程；")]),v._v(" "),_("li",[v._v("分布式锁：Zookeeper 提供两种锁：独占锁、共享锁。独占锁即一次只能有一个线程使用资源，共享锁是读锁共享，读写互斥，即可以有多线线程同时读同一个资源，如果要使用写锁也只能有一个线程使用。Zookeeper 可以对分布式锁进行控制。")]),v._v(" "),_("li",[v._v("命名服务：在分布式系统中，通过使用命名服务，客户端应用能够根据指定名字来获取资源或服务的地址，提供者等信息。")])]),v._v(" "),_("h3",{attrs:{id:"🎯-说一下-zookeeper-的通知机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-说一下-zookeeper-的通知机制"}},[v._v("#")]),v._v(" 🎯 说一下 Zookeeper 的通知机制？")]),v._v(" "),_("p",[v._v("client 端会对某个 znode 建立一个 watcher 事件，当该 znode 发生变化时，这些 client 会收到 zk 的通知，然后 client 可以根据 znode 变化来做出业务上的改变等。")]),v._v(" "),_("h3",{attrs:{id:"🎯-zookeeper-和-dubbo-的关系"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-zookeeper-和-dubbo-的关系"}},[v._v("#")]),v._v(" 🎯 Zookeeper 和 Dubbo 的关系？")]),v._v(" "),_("p",[v._v("Zookeeper的作用：")]),v._v(" "),_("p",[v._v("zookeeper用来注册服务和进行负载均衡，哪一个服务由哪一个机器来提供必需让调用者知道，简单来说就是ip地址和服务名称的对应关系。当然也可以通过硬编码的方式把这种对应关系在调用方业务代码中实现，但是如果提供服务的机器挂掉调用者无法知晓，如果不更改代码会继续请求挂掉的机器提供服务。zookeeper通过心跳机制可以检测挂掉的机器并将挂掉机器的ip和服务对应关系从列表中删除。至于支持高并发，简单来说就是横向扩展，在不更改代码的情况通过添加机器来提高运算能力。通过添加新的机器向zookeeper注册服务，服务的提供者多了能服务的客户就多了。")]),v._v(" "),_("p",[v._v("dubbo：")]),v._v(" "),_("p",[v._v("是管理中间层的工具，在业务层到数据仓库间有非常多服务的接入和服务提供者需要调度，dubbo提供一个框架解决这个问题。\n注意这里的dubbo只是一个框架，至于你架子上放什么是完全取决于你的，就像一个汽车骨架，你需要配你的轮子引擎。这个框架中要完成调度必须要有一个分布式的注册中心，储存所有服务的元数据，你可以用zk，也可以用别的，只是大家都用zk。")]),v._v(" "),_("p",[v._v("zookeeper和dubbo的关系：")]),v._v(" "),_("p",[v._v("Dubbo 的将注册中心进行抽象，它可以外接不同的存储媒介给注册中心提供服务，有 ZooKeeper，Memcached，Redis 等。")]),v._v(" "),_("p",[v._v("引入了 ZooKeeper 作为存储媒介，也就把 ZooKeeper 的特性引进来。首先是负载均衡，单注册中心的承载能力是有限的，在流量达到一定程度的时 候就需要分流，负载均衡就是为了分流而存在的，一个 ZooKeeper 群配合相应的 Web 应用就可以很容易达到负载均衡；资源同步，单单有负载均衡还不 够，节点之间的数据和资源需要同步，ZooKeeper 集群就天然具备有这样的功能；命名服务，将树状结构用于维护全局的服务地址列表，服务提供者在启动 的时候，向 ZooKeeper 上的指定节点 /dubbo/${serviceName}/providers 目录下写入自己的 URL 地址，这个操作就完成了服务的发布。 其他特性还有 Mast 选举，分布式锁等。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMC8zMS8xNmUyMTliYzc3MDA5OGRm?x-oss-process=image/format,png",alt:"img"}})]),v._v(" "),_("hr"),v._v(" "),_("h2",{attrs:{id:"🚨-六、运维实践与故障处理-生产经验"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🚨-六、运维实践与故障处理-生产经验"}},[v._v("#")]),v._v(" 🚨 六、运维实践与故障处理（生产经验）")]),v._v(" "),_("blockquote",[_("p",[_("strong",[v._v("核心思想")]),v._v("：ZooKeeper在生产环境中的运维实践，包括部署配置、性能监控、故障排查等，这些经验是高级工程师必备的技能。")])]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("部署配置")]),v._v("："),_("a",{attrs:{href:"#%F0%9F%8E%AF-zookeeper-%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%E5%87%A0%E7%A7%8D%E9%83%A8%E7%BD%B2%E6%A8%A1%E5%BC%8F"}},[v._v("部署模式")]),v._v(" | "),_("a",{attrs:{href:"#%F0%9F%8E%AF-%E9%9B%86%E7%BE%A4%E6%9C%80%E5%B0%91%E8%A6%81%E5%87%A0%E5%8F%B0%E6%9C%BA%E5%99%A8%E9%9B%86%E7%BE%A4%E8%A7%84%E5%88%99%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84%E9%9B%86%E7%BE%A4%E4%B8%AD%E6%9C%89-3-%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E8%8A%82%E7%82%B9%E5%AE%95%E6%9C%BA%E8%BF%99%E4%B8%AA%E6%97%B6%E5%80%99-zookeeper-%E8%BF%98%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E5%90%97"}},[v._v("集群规划")]),v._v(" | "),_("a",{attrs:{href:"#%F0%9F%8E%AF-%E9%9B%86%E7%BE%A4%E6%94%AF%E6%8C%81%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E6%9C%BA%E5%99%A8%E5%90%97"}},[v._v("动态扩容")])]),v._v(" "),_("li",[_("strong",[v._v("监控运维")]),v._v("："),_("a",{attrs:{href:"#%F0%9F%8E%AF-zookeeper-%E7%9A%84-java-%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B"}},[v._v("客户端工具")]),v._v(" | "),_("a",{attrs:{href:"#%F0%9F%8E%AF-%E8%AF%B4%E5%87%A0%E4%B8%AA-zookeeper-%E5%B8%B8%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4"}},[v._v("常用命令")]),v._v(" | "),_("a",{attrs:{href:"#%F0%9F%8E%AF-%E8%AF%B4%E4%B8%80%E4%B8%8B-zookeeper-%E7%9A%84%E9%80%9A%E7%9F%A5%E6%9C%BA%E5%88%B6"}},[v._v("通知机制")]),v._v(" | "),_("a",{attrs:{href:"#%F0%9F%8E%AF-zookeeper-%E5%AF%B9%E8%8A%82%E7%82%B9%E7%9A%84-watch-%E7%9B%91%E5%90%AC%E9%80%9A%E7%9F%A5%E6%98%AF%E6%B0%B8%E4%B9%85%E7%9A%84%E5%90%97%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E6%98%AF%E6%B0%B8%E4%B9%85%E7%9A%84"}},[v._v("Watch监听")])])]),v._v(" "),_("hr"),v._v(" "),_("h2",{attrs:{id:"💼-七、对比分析与技术选型-架构决策"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#💼-七、对比分析与技术选型-架构决策"}},[v._v("#")]),v._v(" 💼 七、对比分析与技术选型（架构决策）")]),v._v(" "),_("blockquote",[_("p",[_("strong",[v._v("核心思想")]),v._v("：理解ZooKeeper与其他分布式协调系统的差异，掌握在不同场景下的技术选型原则。")])]),v._v(" "),_("h3",{attrs:{id:"📋-本章知识点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#📋-本章知识点"}},[v._v("#")]),v._v(" 📋 本章知识点")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("技术对比")]),v._v("："),_("a",{attrs:{href:"#%F0%9F%8E%AF-chubby-%E6%98%AF%E4%BB%80%E4%B9%88%E5%92%8C-zookeeper-%E6%AF%94%E4%BD%A0%E6%80%8E%E4%B9%88%E7%9C%8B"}},[v._v("ZK vs 其他系统")]),v._v(" | "),_("a",{attrs:{href:"#%F0%9F%8E%AF-zab-%E5%92%8C-paxos-%E7%AE%97%E6%B3%95%E7%9A%84%E8%81%94%E7%B3%BB%E4%B8%8E%E5%8C%BA%E5%88%AB"}},[v._v("ZAB vs Paxos")]),v._v(" | "),_("a",{attrs:{href:"#%F0%9F%8E%AF-zk-%E6%98%AF-cp-%E8%BF%98%E6%98%AF-ap"}},[v._v("CAP选择")])]),v._v(" "),_("li",[_("strong",[v._v("应用集成")]),v._v("："),_("a",{attrs:{href:"#%F0%9F%8E%AF-zookeeper-%E5%92%8C-dubbo-%E7%9A%84%E5%85%B3%E7%B3%BB"}},[v._v("与Dubbo关系")]),v._v(" | "),_("a",{attrs:{href:"#%F0%9F%8E%AF-zookeeper-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%92%8C-nginx-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%8C%BA%E5%88%AB"}},[v._v("负载均衡对比")])])]),v._v(" "),_("h3",{attrs:{id:"🎯-zk-是-cp-还是-ap"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-zk-是-cp-还是-ap"}},[v._v("#")]),v._v(" 🎯 zk 是 CP 还是 AP")]),v._v(" "),_("p",[v._v("zk的ap和cp是从不同的角度分析的。")]),v._v(" "),_("p",[v._v("从一个读写请求分析，保证了可用性（不用阻塞等待全部follwer同步完成），保证不了数据的一致性，所以是ap。")]),v._v(" "),_("p",[v._v("但是从zk架构分析，zk在leader选举期间，会暂停对外提供服务（为啥会暂停，因为zk依赖leader来保证数据一致性)，所以丢失了可用性，保证了一致性，即cp。")]),v._v(" "),_("p",[v._v("再细点话，这个c不是强一致性，而是最终一致性。即上面的写案例，数据最终会同步到一致，只是时间问题。")]),v._v(" "),_("p",[v._v("综上，zk广义上来说是cp，狭义上是ap。")]),v._v(" "),_("hr"),v._v(" "),_("h2",{attrs:{id:"🎯-zookeeper面试备战指南"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎯-zookeeper面试备战指南"}},[v._v("#")]),v._v(" 🎯 ZooKeeper面试备战指南")]),v._v(" "),_("h3",{attrs:{id:"💡-高频考点top10"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#💡-高频考点top10"}},[v._v("#")]),v._v(" 💡 高频考点Top10")]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("🔥 ZAB协议原理")]),v._v(" - ZK一致性算法的核心，必考概念")]),v._v(" "),_("li",[_("strong",[v._v("⚡ Leader选举机制")]),v._v(" - 分布式一致性的关键技术")]),v._v(" "),_("li",[_("strong",[v._v("📊 数据一致性保证")]),v._v(" - 顺序一致性、原子性等特性")]),v._v(" "),_("li",[_("strong",[v._v("🚨 脑裂问题")]),v._v(" - 分布式系统经典问题，解决思路要清晰")]),v._v(" "),_("li",[_("strong",[v._v("🔍 Watcher机制")]),v._v(" - 事件通知的实现原理")]),v._v(" "),_("li",[_("strong",[v._v("💾 分片与副本")]),v._v(" - 数据分布和高可用保证")]),v._v(" "),_("li",[_("strong",[v._v("⚙️ 节点类型与特性")]),v._v(" - 持久、临时、顺序节点的应用")]),v._v(" "),_("li",[_("strong",[v._v("🔧 分布式锁实现")]),v._v(" - ZK的典型应用场景")]),v._v(" "),_("li",[_("strong",[v._v("📈 集群架构设计")]),v._v(" - 生产环境的部署和运维")]),v._v(" "),_("li",[_("strong",[v._v("💼 实际项目经验")]),v._v(" - 能结合具体场景谈技术应用")])]),v._v(" "),_("h3",{attrs:{id:"🎭-面试答题技巧"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎭-面试答题技巧"}},[v._v("#")]),v._v(" 🎭 面试答题技巧")]),v._v(" "),_("p",[_("strong",[v._v("📝 标准回答结构")])]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("概念定义")]),v._v("（30秒） - 用一句话说清楚是什么")]),v._v(" "),_("li",[_("strong",[v._v("工作原理")]),v._v("（1分钟） - 阐述核心机制和流程")]),v._v(" "),_("li",[_("strong",[v._v("应用场景")]),v._v("（30秒） - 什么时候用，解决什么问题")]),v._v(" "),_("li",[_("strong",[v._v("具体示例")]),v._v("（1分钟） - 最好是自己项目的真实案例")]),v._v(" "),_("li",[_("strong",[v._v("注意事项")]),v._v("（30秒） - 体现深度思考和实战经验")])]),v._v(" "),_("p",[_("strong",[v._v("🗣️ 表达话术模板")])]),v._v(" "),_("ul",[_("li",[v._v('"从我的项目经验来看..."')]),v._v(" "),_("li",[v._v('"在生产环境中，我们通常会..."')]),v._v(" "),_("li",[v._v('"这里有个需要注意的点是..."')]),v._v(" "),_("li",[v._v('"相比于其他分布式协调系统，ZK的优势在于..."')]),v._v(" "),_("li",[v._v('"在大规模集群场景下，推荐的做法是..."')])]),v._v(" "),_("h3",{attrs:{id:"🚀-进阶加分点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🚀-进阶加分点"}},[v._v("#")]),v._v(" 🚀 进阶加分点")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("底层原理")]),v._v("：能从ZAB协议层面解释ZK的一致性保证")]),v._v(" "),_("li",[_("strong",[v._v("性能调优")]),v._v("：有具体的集群优化经验和数据对比")]),v._v(" "),_("li",[_("strong",[v._v("架构设计")]),v._v("：能设计适合业务场景的ZK集群方案")]),v._v(" "),_("li",[_("strong",[v._v("故障处理")]),v._v("：有排查和解决ZK集群问题的经验")]),v._v(" "),_("li",[_("strong",[v._v("技术选型")]),v._v("：能准确分析ZK与其他技术的适用场景")])]),v._v(" "),_("h3",{attrs:{id:"📚-延伸学习建议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#📚-延伸学习建议"}},[v._v("#")]),v._v(" 📚 延伸学习建议")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("官方文档")]),v._v("：ZooKeeper官方文档是最权威的学习资料")]),v._v(" "),_("li",[_("strong",[v._v("源码研读")]),v._v("：深入理解ZAB协议、Watcher机制的实现")]),v._v(" "),_("li",[_("strong",[v._v("实战练习")]),v._v("：搭建ZK集群，动手验证各种特性")]),v._v(" "),_("li",[_("strong",[v._v("案例分析")]),v._v("：研究大厂的ZK应用案例和最佳实践")]),v._v(" "),_("li",[_("strong",[v._v("社区交流")]),v._v("：关注ZK相关的技术博客和开源项目")])]),v._v(" "),_("hr"),v._v(" "),_("h2",{attrs:{id:"🎉-总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🎉-总结"}},[v._v("#")]),v._v(" 🎉 总结")]),v._v(" "),_("p",[_("strong",[v._v("ZooKeeper作为分布式协调服务的经典实现")]),v._v("，是构建大规模分布式系统的基石。从配置管理到服务发现，从分布式锁到Leader选举，ZK在分布式系统中发挥着不可替代的作用。")]),v._v(" "),_("p",[_("strong",[v._v("掌握ZK的核心在于理解其一致性保证机制")]),v._v("：通过ZAB协议实现分布式一致性，通过Leader选举保证集群稳定，通过Watcher机制实现事件通知，通过节点类型支持各种分布式应用场景。")]),v._v(" "),_("p",[_("strong",[v._v("记住：面试官考察的不是你背了多少概念，而是你能否在实际项目中灵活运用ZK解决分布式协调问题。")])]),v._v(" "),_("p",[_("strong",[v._v("最后一句话")]),v._v("："),_("em",[v._v('"分布式系统的复杂性在于一致性，而ZooKeeper正是解决这一复杂性的优雅方案！"')])]),v._v(" "),_("hr"),v._v(" "),_("blockquote",[_("p",[v._v("💌 "),_("strong",[v._v("坚持学习，持续成长！")])])])])}),[],!1,null,null,null);e.default=t.exports}}]);