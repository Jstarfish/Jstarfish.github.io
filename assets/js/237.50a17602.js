(window.webpackJsonp=window.webpackJsonp||[]).push([[237],{729:function(v,_,t){"use strict";t.r(_);var r=t(2),o=Object(r.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("p",[t("img",{attrs:{src:"https://img.starfish.ink/common/faq-banner.png",alt:""}})]),v._v(" "),t("h3",{attrs:{id:"什么是-rpc-它和-http-rest-有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-rpc-它和-http-rest-有什么区别"}},[v._v("#")]),v._v(" 什么是 RPC？它和 HTTP/REST 有什么区别？")]),v._v(" "),t("blockquote",[t("p",[v._v("RPC 是远程过程调用，核心目标是让调用远程服务像本地函数调用一样简单。它屏蔽了网络通信、序列化、反序列化等细节。和 HTTP/REST 相比，RPC 更偏向于内部服务间通信，通常使用二进制序列化（比如 Protobuf），性能更高，支持流式通信；而 REST 基于 HTTP + JSON，跨语言、可读性和调试友好，更适合对外接口。\n在实际项目里，我们常常 "),t("strong",[v._v("对内用 RPC（gRPC）提升性能，对外用 REST 保证通用性")]),v._v("。")])]),v._v(" "),t("p",[t("strong",[v._v("什么是 RPC？")])]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("RPC（Remote Procedure Call，远程过程调用）")]),v._v(" 是一种 "),t("strong",[v._v("像调用本地函数一样调用远程服务的方法")]),v._v("。")]),v._v(" "),t("li",[v._v("本质：屏蔽网络通信细节（序列化、传输、反序列化），让开发者像调用本地函数一样调用远程函数。")]),v._v(" "),t("li",[v._v("核心步骤：\n"),t("ol",[t("li",[t("strong",[v._v("客户端 Stub")]),v._v("：将调用方法和参数序列化")]),v._v(" "),t("li",[t("strong",[v._v("网络传输")]),v._v("：通过 TCP/HTTP/HTTP2 传输到远程服务")]),v._v(" "),t("li",[t("strong",[v._v("服务端 Stub")]),v._v("：反序列化参数，执行实际逻辑")]),v._v(" "),t("li",[t("strong",[v._v("结果返回")]),v._v("：序列化结果，通过网络返回给客户端")])])]),v._v(" "),t("li",[t("strong",[v._v("关键点")]),v._v("：\n"),t("ul",[t("li",[t("strong",[v._v("通信协议")]),v._v("：如HTTP/2（gRPC）、TCP（Dubbo）。")]),v._v(" "),t("li",[t("strong",[v._v("序列化方式")]),v._v("：如JSON、Protobuf、Thrift。")]),v._v(" "),t("li",[t("strong",[v._v("服务治理")]),v._v("：负载均衡、熔断、限流等")])])])]),v._v(" "),t("p",[v._v("👉 面试一句话总结："),t("strong",[v._v("RPC 是一种通信协议和调用方式，目标是“透明调用远程服务”。")])]),v._v(" "),t("p",[t("strong",[v._v("RPC 和 HTTP/REST 的区别")])]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("维度")]),v._v(" "),t("th",[v._v("RPC")]),v._v(" "),t("th",[v._v("HTTP/REST")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[t("strong",[v._v("定义方式")])]),v._v(" "),t("td",[v._v("通过接口（IDL，如gRPC 的 proto）定义服务")]),v._v(" "),t("td",[v._v("通过 URL + HTTP 方法（GET/POST/PUT/DELETE）定义 API")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("传输协议")])]),v._v(" "),t("td",[v._v("TCP、HTTP/2（如 gRPC）")]),v._v(" "),t("td",[v._v("HTTP/1.1 或 HTTP/2")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("数据格式")])]),v._v(" "),t("td",[v._v("高效序列化协议（Protobuf、Thrift、Avro）")]),v._v(" "),t("td",[v._v("一般是 JSON（文本格式，易读但性能差）")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("性能")])]),v._v(" "),t("td",[v._v("高性能，二进制序列化，占用带宽小，延迟低")]),v._v(" "),t("td",[v._v("较低性能，JSON 解析慢，报文体积大")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("通信模式")])]),v._v(" "),t("td",[v._v("多样（同步、异步、单向、流式）")]),v._v(" "),t("td",[v._v("主要是请求-响应")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("可读性")])]),v._v(" "),t("td",[v._v("抽象层高，调试工具少")]),v._v(" "),t("td",[v._v("URL+JSON，可读性强，调试方便")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("跨语言支持")])]),v._v(" "),t("td",[v._v("IDL 定义，多语言 Stub 自动生成（gRPC 跨语言强）")]),v._v(" "),t("td",[v._v("HTTP/JSON 天然跨语言")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("适用场景")])]),v._v(" "),t("td",[v._v("内部微服务调用，高性能、低延迟场景")]),v._v(" "),t("td",[v._v("对外 API，跨语言、跨团队、跨系统的服务调用")])])])]),v._v(" "),t("blockquote",[t("p",[v._v("话术：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("RPC是解决分布式系统中"),t("strong",[v._v("远程服务调用复杂性")]),v._v("的工具，核心目标是让开发者像调用本地方法一样调用远程服务，隐藏网络通信细节。（"),t("strong",[v._v("一句话定义（10秒抓住核心）")]),v._v("）")])]),v._v(" "),t("li",[t("p",[v._v("RPC框架包含三个核心模块：代理层（生成接口代理）、序列化层（Protobuf/JSON转换）、网络传输层（Netty实现）。")]),v._v(" "),t("p",[v._v("调用流程是：客户端代理封装请求→序列化为二进制→经TCP/HTTP2传输→服务端反序列化→执行真实方法→结果原路返回。关键技术是动态代理屏蔽远程调用细节，配合长连接复用提升性能。（"),t("strong",[v._v("核心原理拆解（展示技术深度）")]),v._v("）")])]),v._v(" "),t("li",[t("p",[v._v("相比直接使用HTTP（"),t("strong",[v._v("对比延伸（突出思考广度）")]),v._v("）：")]),v._v(" "),t("ul",[t("li",[v._v("RPC优势是性能更高（二进制协议省带宽）、开发更高效（IDL生成代码）、内置服务治理（熔断/负载均衡）")]),v._v(" "),t("li",[v._v("HTTP优势是通用性强（浏览器直接支持）、调试更方便")]),v._v(" "),t("li",[v._v("在微服务内部通信选RPC（如Dubbo），开放API用HTTP（如SpringCloud OpenFeign）。")]),v._v(" "),t("li",[v._v("腾讯的tRPC通过插件化架构解决协议兼容问题，而gRPC强在跨语言支持。")])])]),v._v(" "),t("li",[t("p",[v._v("在电商订单系统中，我用Dubbo实现库存服务调用（"),t("strong",[v._v("实战结合（证明落地能力）")]),v._v("）：")]),v._v(" "),t("ul",[t("li",[v._v("问题：HTTP调用库存接口QPS仅2000，超时率15%")]),v._v(" "),t("li",[v._v("方案：改用Dubbo+Protobuf，Nacos服务发现，随机负载均衡")]),v._v(" "),t("li",[v._v("难点：解决序列化兼容性（添加@Adaptive注解）")]),v._v(" "),t("li",[v._v("结果：QPS提升到12000，超时率降至0.2%，GC次数减少60%")])])])])]),v._v(" "),t("h3",{attrs:{id:"为什么我们要用rpc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么我们要用rpc"}},[v._v("#")]),v._v(" 为什么我们要用RPC?")]),v._v(" "),t("p",[v._v("在分布式系统架构中，"),t("strong",[v._v("RPC是一种核心通信机制，用于解决跨进程、跨机器的函数 / 方法调用问题。其存在的核心价值在于将复杂的分布式系统拆解为可协作的服务单元")]),v._v("，同时尽可能让开发者像调用本地函数一样使用远程服务。")]),v._v(" "),t("p",[v._v("以下是使用 RPC 的核心原因及典型场景：")]),v._v(" "),t("p",[t("strong",[v._v("一、分布式架构的必然选择")])]),v._v(" "),t("ol",[t("li",[t("p",[t("strong",[v._v("服务拆分与微服务化")])]),v._v(" "),t("ul",[t("li",[t("p",[t("strong",[v._v("单体应用的瓶颈")]),v._v("：传统单体架构中，所有功能模块耦合在一个进程内，难以扩展、维护和迭代。")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("分布式拆分的需求")]),v._v("：将系统拆分为独立部署的服务（如用户服务、订单服务、支付服务），每个服务负责单一业务领域，通过 RPC 实现跨服务协作。")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("示例")]),v._v("：电商系统中，前端请求用户服务查询用户信息，用户服务通过 RPC 调用订单服务获取历史订单数据。")])])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("资源隔离与弹性扩展")])]),v._v(" "),t("ul",[t("li",[t("p",[t("strong",[v._v("按需扩展特定服务")]),v._v("：不同服务的负载可能差异显著（如促销期间订单服务压力远高于用户服务），通过 RPC 解耦后，可独立对高负载服务扩容。")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("故障隔离")]),v._v("：某个服务故障不会导致整个系统崩溃，仅影响依赖该服务的功能模块（需配合熔断、重试等机制）。")])])])])]),v._v(" "),t("p",[t("strong",[v._v("二、跨技术栈协作的桥梁")])]),v._v(" "),t("ol",[t("li",[t("p",[t("strong",[v._v("多语言混合开发")])]),v._v(" "),t("ul",[t("li",[t("p",[v._v("不同服务可采用最适合的语言实现（如 Java 用于业务逻辑、Go 用于高并发场景、Python 用于数据分析），通过 RPC 屏蔽语言差异。")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("示例")]),v._v("：Java 编写的网关服务通过 RPC 调用 Go 编写的库存服务，获取商品库存信息。")])])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("遗留系统集成")])]),v._v(" "),t("ul",[t("li",[t("p",[v._v("新老系统并存时，通过 RPC 为遗留系统提供统一接口，避免重构成本。")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("示例")]),v._v("：用 Node.js 开发新前端系统，通过 RPC 调用 COBOL 编写的核心账务系统接口。")])])])])]),v._v(" "),t("p",[t("strong",[v._v("三、高性能与透明化的远程调用")])]),v._v(" "),t("ol",[t("li",[t("p",[t("strong",[v._v("接近本地调用的开发体验")])]),v._v(" "),t("ul",[t("li",[t("p",[v._v("RPC 框架通过动态代理、代码生成等技术，将远程调用封装为本地函数调用形式，开发者无需关注网络细节（如 Socket 编程、数据序列化）。")])]),v._v(" "),t("li",[t("p",[v._v("伪代码示例：")]),v._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// 本地调用风格的RPC")]),v._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("User")]),v._v(" user "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" userService"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[v._v("getUser")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("123")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// 实际通过网络调用远程服务")]),v._v("\n")])])])])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("比 HTTP 更高效的通信协议")])]),v._v(" "),t("ul",[t("li",[t("p",[v._v("多数 RPC 框架采用二进制协议（如 Protobuf、Thrift），相比 JSON/XML 格式的 HTTP 请求，"),t("strong",[v._v("传输体积更小、解析更快")]),v._v("，适合高频、大数据量场景。")])]),v._v(" "),t("li",[t("p",[v._v("性能对比：")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("strong",[v._v("协议")])]),v._v(" "),t("th",[v._v("传输体积")]),v._v(" "),t("th",[v._v("解析耗时")]),v._v(" "),t("th",[v._v("典型场景")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("REST（JSON）")]),v._v(" "),t("td",[v._v("100KB")]),v._v(" "),t("td",[v._v("10ms")]),v._v(" "),t("td",[v._v("通用 Web 服务")])]),v._v(" "),t("tr",[t("td",[v._v("gRPC（Protobuf）")]),v._v(" "),t("td",[v._v("30KB")]),v._v(" "),t("td",[v._v("2ms")]),v._v(" "),t("td",[v._v("微服务间高频调用")])])])])])])])]),v._v(" "),t("p",[t("strong",[v._v("四、典型应用场景")])]),v._v(" "),t("ol",[t("li",[t("p",[t("strong",[v._v("微服务架构中的服务间通信")])]),v._v(" "),t("ul",[t("li",[t("p",[v._v("微服务架构中，每个服务通过 RPC 调用上下游服务，形成复杂的调用链路。")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("案例")]),v._v("：Netflix 的微服务体系通过 Eureka（服务注册）+ Ribbon（负载均衡）+ Feign（RPC 客户端）实现跨服务通信。")])])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("云服务与分布式计算")])]),v._v(" "),t("ul",[t("li",[t("p",[v._v("云计算平台（如 AWS、阿里云）通过 RPC 提供 API 接口（如 EC2 实例管理、S3 存储操作）。")])]),v._v(" "),t("li",[t("p",[v._v("分布式计算框架（如 Hadoop、Spark）通过 RPC 协调节点间任务调度与数据传输。")])])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("实时数据处理与流计算")])]),v._v(" "),t("ul",[t("li",[t("p",[v._v("实时系统中，不同组件（如消息队列、计算引擎、存储系统）通过 RPC 传递实时数据。")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("案例")]),v._v("：Kafka Streams 通过 RPC 将实时数据流分发到不同计算节点进行处理。")])])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("跨数据中心 / 跨地域调用")])]),v._v(" "),t("ul",[t("li",[t("p",[v._v("全球化业务中，服务部署在多个数据中心，通过 RPC 实现异地容灾或就近访问。")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("挑战")]),v._v("：需解决跨地域网络延迟（如通过边缘节点缓存热点数据）。")])])])])]),v._v(" "),t("p",[t("strong",[v._v("五、与其他通信方式的对比")])]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("strong",[v._v("维度")])]),v._v(" "),t("th",[t("strong",[v._v("RPC")])]),v._v(" "),t("th",[t("strong",[v._v("REST/HTTP")])]),v._v(" "),t("th",[t("strong",[v._v("消息队列（如 Kafka）")])])])]),v._v(" "),t("tbody",[t("tr",[t("td",[t("strong",[v._v("通信模型")])]),v._v(" "),t("td",[v._v("同步调用（请求 - 响应）")]),v._v(" "),t("td",[v._v("同步调用（RESTful 风格）")]),v._v(" "),t("td",[v._v("异步消息传递")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("实时性")])]),v._v(" "),t("td",[v._v("高（适合即时响应场景）")]),v._v(" "),t("td",[v._v("中（受限于 HTTP 协议）")]),v._v(" "),t("td",[v._v("低（适合异步处理）")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("数据格式")])]),v._v(" "),t("td",[v._v("二进制（高效）")]),v._v(" "),t("td",[v._v("文本（JSON/XML）")]),v._v(" "),t("td",[v._v("自定义（二进制 / 文本）")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("适用场景")])]),v._v(" "),t("td",[v._v("微服务间强依赖调用")]),v._v(" "),t("td",[v._v("开放 API、跨团队协作")]),v._v(" "),t("td",[v._v("异步任务、流量削峰")])])])]),v._v(" "),t("p",[t("strong",[v._v("六、RPC 的核心价值")])]),v._v(" "),t("ol",[t("li",[t("strong",[v._v("架构层面")]),v._v("：支撑分布式系统的服务拆分与协作，提升可扩展性和可维护性。")]),v._v(" "),t("li",[t("strong",[v._v("开发层面")]),v._v("：屏蔽网络复杂性，降低分布式开发门槛，允许混合技术栈。")]),v._v(" "),t("li",[t("strong",[v._v("性能层面")]),v._v("：提供比传统 HTTP 更高效的通信方式，满足高并发、低延迟需求。")])]),v._v(" "),t("p",[t("strong",[v._v("选择建议")]),v._v("：若需要"),t("strong",[v._v("强一致性、实时响应的服务间调用")]),v._v("，优先选择 RPC；若需要"),t("strong",[v._v("开放 API、跨团队 / 跨平台协作")]),v._v("，则更适合 REST/HTTP；若业务场景以"),t("strong",[v._v("异步解耦")]),v._v("为主，可结合消息队列使用。")]),v._v(" "),t("h3",{attrs:{id:"rpc需要解决的三个问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rpc需要解决的三个问题"}},[v._v("#")]),v._v(" RPC需要解决的三个问题？")]),v._v(" "),t("p",[t("strong",[v._v("一、Call ID 映射（函数标识与路由）")])]),v._v(" "),t("p",[t("strong",[v._v("问题本质")])]),v._v(" "),t("p",[v._v("本地调用通过函数指针直接寻址，而远程调用中客户端与服务端处于不同地址空间，需建立"),t("strong",[v._v("函数到唯一标识的映射关系")]),v._v("，确保服务端准确识别目标函数。")]),v._v(" "),t("p",[t("strong",[v._v("解决方案")])]),v._v(" "),t("ol",[t("li",[t("p",[t("strong",[v._v("唯一标识符（Call ID）")])]),v._v(" "),t("ul",[t("li",[t("p",[v._v("为每个函数分配全局唯一 ID（如整数、字符串或 UUID），例如：")]),v._v(" "),t("div",{staticClass:"language-python extra-class"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[v._v("# 服务端映射表示例")]),v._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[v._v('"userService.queryUser"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("1001")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[v._v("# 字符串标识")]),v._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[v._v('"orderService.createOrder"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("2002")]),v._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n")])])])]),v._v(" "),t("li",[t("p",[v._v("客户端通过该 ID 指定调用目标，服务端通过 ID 查找对应函数实现。")])])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("动态注册与发现")])]),v._v(" "),t("ul",[t("li",[v._v("服务启动时向注册中心（如 Consul、Nacos）注册函数 ID 与地址的映射关系。")]),v._v(" "),t("li",[v._v("客户端通过注册中心获取服务列表及函数 ID 路由规则，实现动态寻址。")])])])]),v._v(" "),t("p",[t("strong",[v._v("技术挑战")])]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("版本兼容")]),v._v("：函数升级时需保留旧 Call ID 或提供兼容映射，避免客户端请求失效。")]),v._v(" "),t("li",[t("strong",[v._v("跨语言映射")]),v._v("：不同语言开发的客户端与服务端需统一 ID 规范（如 Thrift 通过 IDL 文件生成一致的 ID）。")])]),v._v(" "),t("p",[t("strong",[v._v("二、序列化与反序列化（数据格式转换）")])]),v._v(" "),t("p",[t("strong",[v._v("问题本质")])]),v._v(" "),t("p",[v._v("跨进程通信无法直接传递内存对象，且可能存在语言差异（如 Java 对象与 Go 结构体），需将数据结构转换为"),t("strong",[v._v("通用字节流格式")]),v._v("，确保跨语言、跨平台解析。")]),v._v(" "),t("p",[t("strong",[v._v("解决方案")])]),v._v(" "),t("ol",[t("li",[t("p",[t("strong",[v._v("序列化协议选择")])]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("strong",[v._v("协议")])]),v._v(" "),t("th",[t("strong",[v._v("特点")])]),v._v(" "),t("th",[t("strong",[v._v("适用场景")])])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("JSON")]),v._v(" "),t("td",[v._v("可读性强，解析效率低")]),v._v(" "),t("td",[v._v("轻量级服务、浏览器交互")])]),v._v(" "),t("tr",[t("td",[v._v("Protobuf")]),v._v(" "),t("td",[v._v("二进制格式，高效压缩，支持自动生成代码")]),v._v(" "),t("td",[v._v("高性能、大数据量场景")])]),v._v(" "),t("tr",[t("td",[v._v("Thrift")]),v._v(" "),t("td",[v._v("多语言支持，通过 IDL 定义数据结构")]),v._v(" "),t("td",[v._v("跨语言微服务架构")])]),v._v(" "),t("tr",[t("td",[v._v("Avro")]),v._v(" "),t("td",[v._v("模式动态演变，适合数据格式频繁变更场景")]),v._v(" "),t("td",[v._v("日志系统、实时数据管道")])])])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("对象与字节流转换")])]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("客户端")]),v._v("：将参数对象序列化为字节流（如 Java 的"),t("code",[v._v("ObjectOutputStream")]),v._v("、Go 的"),t("code",[v._v("json.Marshal")]),v._v("）。")]),v._v(" "),t("li",[t("strong",[v._v("服务端")]),v._v("：将字节流反序列化为本地对象（如 Python 的"),t("code",[v._v("json.loads")]),v._v("、C++ 的 Protobuf 解析器）。")])])])]),v._v(" "),t("p",[t("strong",[v._v("技术挑战")])]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("性能瓶颈")]),v._v("：高频调用场景下，序列化 / 反序列化可能成为性能短板（如 JSON 解析耗时高于 Protobuf）。")]),v._v(" "),t("li",[t("strong",[v._v("数据兼容性")]),v._v("：字段增减或类型变更时，需确保新旧协议兼容（如 Protobuf 的可选字段、JSON 的默认值处理）。")])]),v._v(" "),t("p",[t("strong",[v._v("三、网络传输（数据通信与可靠性）")])]),v._v(" "),t("p",[t("strong",[v._v("问题本质")])]),v._v(" "),t("p",[v._v("需建立客户端与服务端的"),t("strong",[v._v("可靠数据传输通道")]),v._v("，解决网络延迟、丢包、连接管理等问题，确保 Call ID 与序列化数据准确传输。")]),v._v(" "),t("p",[t("strong",[v._v("解决方案")])]),v._v(" "),t("ol",[t("li",[t("strong",[v._v("传输协议选择")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("TCP")]),v._v("：面向连接，提供可靠传输（如 gRPC 基于 HTTP/2，Netty 自定义协议）。")]),v._v(" "),t("li",[t("strong",[v._v("UDP")]),v._v("：无连接，适合实时性要求高但允许少量丢包的场景（如游戏状态同步）。")]),v._v(" "),t("li",[t("strong",[v._v("HTTP/2")]),v._v("：多路复用、头部压缩，适合 RESTful 风格的 RPC（如 Spring Cloud Feign）。")])])]),v._v(" "),t("li",[t("strong",[v._v("网络层核心组件")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("客户端负载均衡")]),v._v("：通过轮询、随机或加权最小连接等策略选择目标服务节点（如 Ribbon、Spring Cloud LoadBalancer）。")]),v._v(" "),t("li",[t("strong",[v._v("连接池管理")]),v._v("：复用网络连接，减少 TCP 三次握手开销（如 Hystrix 的连接池配置）。")]),v._v(" "),t("li",[t("strong",[v._v("超时与重试")]),v._v("：设置请求超时时间（如 gRPC 默认 1 秒），失败后按策略重试（如指数退避）。")])])])]),v._v(" "),t("p",[t("strong",[v._v("技术挑战")])]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("网络拥塞")]),v._v("：高并发场景下可能导致传输延迟陡增，需通过流量控制（如 TCP 滑动窗口）或服务降级缓解。")]),v._v(" "),t("li",[t("strong",[v._v("防火墙与 NAT 穿透")]),v._v("：跨网络环境调用时，需解决端口限制或使用反向代理（如 Ngrok）。")])]),v._v(" "),t("p",[t("strong",[v._v("总结：RPC 核心技术栈")])]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("strong",[v._v("问题维度")])]),v._v(" "),t("th",[t("strong",[v._v("关键技术")])]),v._v(" "),t("th",[t("strong",[v._v("典型工具 / 框架")])])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("Call ID 映射")]),v._v(" "),t("td",[v._v("唯一 ID 生成、注册中心、动态路由")]),v._v(" "),t("td",[v._v("Consul、Nacos、Apache ZooKeeper")])]),v._v(" "),t("tr",[t("td",[v._v("序列化反序列化")]),v._v(" "),t("td",[v._v("Protobuf、JSON、Thrift、Avro")]),v._v(" "),t("td",[v._v("Google Protobuf、Apache Thrift")])]),v._v(" "),t("tr",[t("td",[v._v("网络传输")]),v._v(" "),t("td",[v._v("TCP/UDP、HTTP/2、负载均衡、连接池")]),v._v(" "),t("td",[v._v("gRPC、Netty、Spring Cloud Netflix")])])])]),v._v(" "),t("p",[t("strong",[v._v("设计目标")]),v._v("：通过上述技术的有机组合，实现"),t("strong",[v._v("透明化远程调用")]),v._v("（调用者无需感知网络细节）、"),t("strong",[v._v("高性能通信")]),v._v("（低延迟、高吞吐）和"),t("strong",[v._v("强兼容性")]),v._v("（跨语言、跨平台）。实际应用中需根据业务场景（如实时性、数据量、语言栈）选择合适的技术方案，平衡开发成本与系统性能。")]),v._v(" "),t("h3",{attrs:{id:"实现高可用rpc框架需要考虑到的问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现高可用rpc框架需要考虑到的问题"}},[v._v("#")]),v._v(" 实现高可用RPC框架需要考虑到的问题")]),v._v(" "),t("ul",[t("li",[v._v("既然系统采用分布式架构，那一个服务势必会有多个实例，要解决"),t("strong",[v._v("如何获取实例的问题")]),v._v("。所以需要一个服务注册中心，比如在Dubbo中，就可以使用Zookeeper作为注册中心，在调用时，从Zookeeper获取服务的实例列表，再从中选择一个进行调用；")]),v._v(" "),t("li",[v._v("如何选择实例呢？就要考虑负载均衡，例如dubbo提供了4种负载均衡策略；")]),v._v(" "),t("li",[v._v("如果每次都去注册中心查询列表，效率很低，那么就要加缓存；")]),v._v(" "),t("li",[v._v("客户端总不能每次调用完都等着服务端返回数据，所以就要支持异步调用；")]),v._v(" "),t("li",[v._v("服务端的接口修改了，老的接口还有人在用，这就需要版本控制；")]),v._v(" "),t("li",[v._v("服务端总不能每次接到请求都马上启动一个线程去处理，于是就需要线程池；")])]),v._v(" "),t("h3",{attrs:{id:"一次完整的-rpc-流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一次完整的-rpc-流程"}},[v._v("#")]),v._v(" 一次完整的 RPC 流程？")]),v._v(" "),t("ol",[t("li",[t("strong",[v._v("代理拦截")]),v._v("：客户端代理拦截本地调用，解析方法和参数。")]),v._v(" "),t("li",[t("strong",[v._v("序列化")]),v._v("：将对象转为字节流（如 Protobuf）。")]),v._v(" "),t("li",[t("strong",[v._v("网络传输")]),v._v("：通过 TCP/HTTP2 发送，处理粘包、负载均衡。")]),v._v(" "),t("li",[t("strong",[v._v("服务端解析")]),v._v("：拆包、反序列化，路由到目标方法。")]),v._v(" "),t("li",[t("strong",[v._v("结果返回")]),v._v("：序列化响应，逆向流程返回客户端。")]),v._v(" "),t("li",[t("strong",[v._v("关键技术")]),v._v("：协议设计、超时重试、流控等。")])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/assets/Ciqc1GABbyeAWysgAAGQtM8Kx4Q574.png",alt:""}})]),v._v(" "),t("h3",{attrs:{id:"如何提升网络通信性能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何提升网络通信性能"}},[v._v("#")]),v._v(" 如何提升网络通信性能？")]),v._v(" "),t("p",[v._v("如何提升 RPC 的网络通信性能，这句话翻译一下就是：一个 RPC 框架如何选择高性能的网络编程 I/O 模型？这样一来，和 I/O 模型相关的知识点就是你需要掌握的了。")]),v._v(" "),t("p",[v._v("对于 RPC 网络通信问题，你首先要掌握网络编程中的五个 I/O 模型：")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("同步阻塞 I/O（BIO）")])]),v._v(" "),t("li",[t("p",[v._v("同步非阻塞 I/O")])]),v._v(" "),t("li",[t("p",[v._v("I/O 多路复用（NIO）")])]),v._v(" "),t("li",[t("p",[v._v("信号驱动")])]),v._v(" "),t("li",[t("p",[v._v("以及异步 I/O（AIO）")])])]),v._v(" "),t("p",[v._v("但在实际开发工作，最为常用的是 BIO 和 NIO（这两个 I/O 模型也是面试中面试官最常考察候选人的）。")]),v._v(" "),t("p",[v._v("NIO 比 BIO 提高了服务端工作线程的利用率，并增加了一个调度者，来实现 Socket 连接与 Socket 数据读写之间的分离。")]),v._v(" "),t("p",[v._v("在目前主流的 RPC 框架中，广泛使用的也是 I/O 多路复用模型，Linux 系统中的 select、poll、epoll等系统调用都是 I/O 多路复用的机制。")]),v._v(" "),t("p",[v._v("在面试中，对于高级研发工程师的考察，还会有两个技术扩展考核点。")]),v._v(" "),t("p",[v._v("Reactor 模型（即反应堆模式），以及 Reactor 的 3 种线程模型，分别是单线程 Reactor 线程模型、多线程 Reactor 线程模型，以及主从 Reactor 线程模型。")]),v._v(" "),t("p",[v._v("Java 中的高性能网络编程框架 Netty。")]),v._v(" "),t("p",[v._v("可以这么说，在高性能网络编程中，大多数都是基于 Reactor 模式，其中最为典型的是 Java 的 Netty 框架，而 Reactor 模式是基于 I/O 多路复用的，所以，对于 Reactor 和 Netty 的考察也是避免不了的。")]),v._v(" "),t("h3",{attrs:{id:"grpc与http的区别是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#grpc与http的区别是什么"}},[v._v("#")]),v._v(" gRPC与HTTP的区别是什么？")]),v._v(" "),t("p",[v._v("HTTP是应用层协议，主要用于传输超文本，而RPC是一种远程过程调用框架，用于分布式系统中的服务间通信。HTTP基于文本传输，而RPC通常使用二进制序列化协议，减少数据传输体积。")]),v._v(" "),t("p",[v._v("在现代分布式系统中，选择 "),t("strong",[v._v("RPC")]),v._v("（Remote Procedure Call）而非单纯的 "),t("strong",[v._v("HTTP")]),v._v(" 协议，主要出于 "),t("strong",[v._v("性能、服务治理能力、通信模型灵活性")]),v._v(" 以及 "),t("strong",[v._v("开发效率")]),v._v(" 等方面的考量。")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("strong",[v._v("对比维度")])]),v._v(" "),t("th",[t("strong",[v._v("HTTP")])]),v._v(" "),t("th",[t("strong",[v._v("gRPC")])])])]),v._v(" "),t("tbody",[t("tr",[t("td",[t("strong",[v._v("协议设计")])]),v._v(" "),t("td",[v._v("基于文本的请求-响应模型（GET/POST）")]),v._v(" "),t("td",[v._v("基于HTTP/2的二进制分帧协议，支持双向流式通信")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("性能")])]),v._v(" "),t("td",[v._v("文本解析开销大，性能较低")]),v._v(" "),t("td",[v._v("二进制传输，头部压缩，多路复用，延迟更低")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("使用场景")])]),v._v(" "),t("td",[v._v("Web服务、RESTful API")]),v._v(" "),t("td",[v._v("微服务间高性能通信、实时数据流（如聊天、视频流）")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("接口定义")])]),v._v(" "),t("td",[v._v("无强制规范")]),v._v(" "),t("td",[v._v("使用Protocol Buffers定义接口，强类型约束")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("跨语言支持")])]),v._v(" "),t("td",[v._v("天然支持")]),v._v(" "),t("td",[v._v("通过Protobuf生成多语言客户端/服务端代码")])])])]),v._v(" "),t("h3",{attrs:{id:"grpc-是什么-和传统-rpc-框架-如-dubbo、thrift-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#grpc-是什么-和传统-rpc-框架-如-dubbo、thrift-的区别"}},[v._v("#")]),v._v(" gRPC 是什么？和传统 RPC 框架（如 Dubbo、Thrift）的区别？")]),v._v(" "),t("p",[v._v("gRPC 是 Google 开源的一个高性能、跨语言的 RPC 框架，基于 HTTP/2 协议，默认使用 Protobuf 进行序列化，支持多路复用和流式通信。相比传统 RPC 框架：")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("和 Dubbo")]),v._v(" 比，Dubbo 更偏 Java 生态，和 Spring Cloud 结合紧密；gRPC 更跨语言，更适合云原生和多语言场景。")]),v._v(" "),t("li",[t("strong",[v._v("和 Thrift")]),v._v(" 比，Thrift 也很高效，但比较老，缺少 HTTP/2 和流式通信，社区活跃度不如 gRPC。\n所以在实际使用中，"),t("strong",[v._v("如果是 Java 内部服务，我可能选 Dubbo；如果是跨语言或云原生环境，我会选 gRPC。")])])]),v._v(" "),t("h3",{attrs:{id:"为什么用rpc而不是http"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么用rpc而不是http"}},[v._v("#")]),v._v(" 为什么用RPC而不是HTTP？")]),v._v(" "),t("ol",[t("li",[t("strong",[v._v("定义抓本质")]),v._v('： "RPC是专门为'),t("strong",[v._v("服务间高性能通信")]),v._v('设计的方案，核心解决HTTP在内部调用时开发效率低、性能差的问题。"')]),v._v(" "),t("li",[t("strong",[v._v("原理显深度")]),v._v('： "通过动态代理生成存根屏蔽网络细节，用Protobuf二进制序列化减少70%数据传输量，基于Netty长连接复用避免HTTP三次握手开销。"')]),v._v(" "),t("li",[t("strong",[v._v("对比展视野")]),v._v('： "对比HTTP，RPC在微服务内部调用场景有三优势：\n'),t("ul",[t("li",[v._v("性能：Dubbo压测QPS是Feign的3倍")]),v._v(" "),t("li",[v._v("效率：IDL自动生成代码比手写RestTemplate快5倍")]),v._v(" "),t("li",[v._v('治理：原生支持熔断/限流而HTTP需整合Sentinel"')])])]),v._v(" "),t("li",[t("strong",[v._v("实战证能力")]),v._v('： "在去年物流项目中，我们把订单到仓储服务的调用从HTTP改为Dubbo：\n'),t("ul",[t("li",[v._v("用SPI扩展点解决序列化兼容问题")]),v._v(" "),t("li",[v._v("基于一致性哈希路由保证相同仓库请求落到同一节点")]),v._v(" "),t("li",[v._v("结果：吞吐量从800TPS提到4200TPS，99分位延迟从340ms降到85ms”")])])])]),v._v(" "),t("h3",{attrs:{id:"grpc的四种通信模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#grpc的四种通信模式"}},[v._v("#")]),v._v(" "),t("strong",[v._v("gRPC的四种通信模式？")])]),v._v(" "),t("ol",[t("li",[v._v("简单RPC（Unary RPC）：客户端发送单个请求，服务端返回单个响应（如函数调用）。")]),v._v(" "),t("li",[v._v("服务端流式RPC：客户端发送请求，服务端返回数据流（如股票实时行情推送）。")]),v._v(" "),t("li",[v._v("客户端流式RPC：客户端持续发送数据流，服务端最终返回响应（如文件分片上传）。")]),v._v(" "),t("li",[v._v("双向流式RPC：双方独立发送和接收数据流，适用于实时交互（如聊天机器人）")])]),v._v(" "),t("h3",{attrs:{id:"dubbo的核心组件及工作流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dubbo的核心组件及工作流程"}},[v._v("#")]),v._v(" Dubbo的核心组件及工作流程？")]),v._v(" "),t("p",[t("strong",[v._v("核心组件")]),v._v("：")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("服务提供者（Provider）")]),v._v("：暴露服务接口的实现。")]),v._v(" "),t("li",[t("strong",[v._v("服务消费者（Consumer）")]),v._v("：调用远程服务。")]),v._v(" "),t("li",[t("strong",[v._v("注册中心（Registry）")]),v._v("：服务注册与发现（如Zookeeper、Nacos）。")]),v._v(" "),t("li",[t("strong",[v._v("配置中心")]),v._v("：管理服务配置。")])]),v._v(" "),t("p",[t("strong",[v._v("工作流程")]),v._v("：")]),v._v(" "),t("ol",[t("li",[t("strong",[v._v("服务注册")]),v._v("：Provider启动时向注册中心注册自身信息（IP、端口等）。")]),v._v(" "),t("li",[t("strong",[v._v("服务发现")]),v._v("：Consumer从注册中心获取Provider列表。")]),v._v(" "),t("li",[t("strong",[v._v("负载均衡")]),v._v("：Consumer通过负载均衡策略（如随机、轮询）选择Provider。")]),v._v(" "),t("li",[t("strong",[v._v("远程调用")]),v._v("：通过Netty等通信框架发起RPC调用。")])]),v._v(" "),t("h3",{attrs:{id:"如何选择rpc框架"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何选择rpc框架"}},[v._v("#")]),v._v(" "),t("strong",[v._v("如何选择RPC框架？")])]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("strong",[v._v("框架")])]),v._v(" "),t("th",[t("strong",[v._v("特点")])]),v._v(" "),t("th",[t("strong",[v._v("适用场景")])])])]),v._v(" "),t("tbody",[t("tr",[t("td",[t("strong",[v._v("Dubbo")])]),v._v(" "),t("td",[v._v("Java生态成熟，支持服务治理（负载均衡、熔断），依赖Zookeeper")]),v._v(" "),t("td",[v._v("微服务架构，需复杂服务治理")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("gRPC")])]),v._v(" "),t("td",[v._v("高性能、跨语言、支持流式通信，依赖Protobuf")]),v._v(" "),t("td",[v._v("跨语言服务间通信、实时数据传输")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("Thrift")])]),v._v(" "),t("td",[v._v("支持多种语言，接口定义语言灵活，性能较高")]),v._v(" "),t("td",[v._v("多语言混合架构、高吞吐量场景")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("Spring Cloud OpenFeign")])]),v._v(" "),t("td",[v._v("基于HTTP，集成Ribbon、Hystrix，易用性强")]),v._v(" "),t("td",[v._v("快速构建微服务，对性能要求不高")])])])]),v._v(" "),t("h2",{attrs:{id:"feign-是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#feign-是什么"}},[v._v("#")]),v._v(" Feign 是什么？")]),v._v(" "),t("ul",[t("li",[t("p",[t("strong",[v._v("Feign")]),v._v(" 是 Spring Cloud 提供的一种 "),t("strong",[v._v("声明式 HTTP 客户端")]),v._v("。")])]),v._v(" "),t("li",[t("p",[v._v("底层是基于 "),t("strong",[v._v("HTTP/REST")]),v._v(" 协议，通过注解（"),t("code",[v._v("@FeignClient")]),v._v("）定义接口，Spring 自动生成代理类去发起 HTTP 请求。")])]),v._v(" "),t("li",[t("p",[v._v("特点：")]),v._v(" "),t("ul",[t("li",[v._v("简单易用，和 Spring Cloud 无缝集成（Ribbon、Eureka、Nacos、Sentinel）。")]),v._v(" "),t("li",[v._v("天然支持负载均衡、熔断、降级。")])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("Feign 适合：")])]),v._v(" "),t("ul",[t("li",[v._v("Java 生态项目，尤其是 "),t("strong",[v._v("Spring Cloud 微服务架构")]),v._v("。")]),v._v(" "),t("li",[v._v("场景中以 REST 接口为主，团队希望开发简单、调试方便。")]),v._v(" "),t("li",[v._v("业务接口不是特别高频或性能敏感（比如电商商品、订单接口调用）。")])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("gRPC 适合：")])]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("跨语言系统")]),v._v("（如 Java 服务和 Go、Python 服务交互）。")]),v._v(" "),t("li",[t("strong",[v._v("高性能场景")]),v._v("（如推荐系统、广告系统、金融交易系统）。")]),v._v(" "),t("li",[t("strong",[v._v("实时通信")]),v._v("（如 IM 聊天、流式日志处理、视频推送）。")]),v._v(" "),t("li",[t("strong",[v._v("云原生环境")]),v._v("（K8s、Istio 微服务治理）。")])])])]),v._v(" "),t("h3",{attrs:{id:"如何优化rpc调用性能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何优化rpc调用性能"}},[v._v("#")]),v._v(" "),t("strong",[v._v("如何优化RPC调用性能？")])]),v._v(" "),t("ol",[t("li",[v._v("序列化优化：选择高效序列化库（如Protobuf、Thrift），减少传输数据量。")]),v._v(" "),t("li",[v._v("网络通信优化：使用HTTP/2或TCP长连接，减少握手开销。")]),v._v(" "),t("li",[v._v("异步调用：异步非阻塞模式提升资源利用率，但需处理回调逻辑。")]),v._v(" "),t("li",[v._v("服务治理：负载均衡（如一致性哈希）、重试机制、熔断降级。")]),v._v(" "),t("li",[v._v("缓存机制：对高频读操作引入本地缓存（Caffeine）或分布式缓存（Redis）")])]),v._v(" "),t("h3",{attrs:{id:"rpc中的服务注册与发现原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rpc中的服务注册与发现原理"}},[v._v("#")]),v._v(" "),t("strong",[v._v("RPC中的服务注册与发现原理？")])]),v._v(" "),t("p",[v._v("RPC 的服务注册与发现涉及三个核心角色：")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("服务提供者（Provider）")]),v._v("：发布服务到注册中心，告知自身地址及服务能力。")]),v._v(" "),t("li",[t("strong",[v._v("服务消费者（Consumer）")]),v._v("：从注册中心获取服务列表，发起远程调用。")]),v._v(" "),t("li",[t("strong",[v._v("注册中心（Registry）")]),v._v("：作为服务的 “地址簿”，存储服务提供者的元数据（如 IP、端口、服务名等），负责服务的注册、发现和管理。")])]),v._v(" "),t("p",[t("strong",[v._v("关键点")]),v._v("：注册中心是服务动态管理的核心，常见实现有 ZooKeeper、Eureka、Nacos 等（可结合项目经验补充具体框架）")]),v._v(" "),t("p",[t("strong",[v._v("服务注册流程")])]),v._v(" "),t("ol",[t("li",[t("strong",[v._v("服务启动")]),v._v("：\n服务提供者启动时，将自身服务信息（如接口名、IP、端口、版本号等）封装成 "),t("strong",[v._v("服务元数据")]),v._v("，通过注册接口向注册中心发送注册请求。")]),v._v(" "),t("li",[t("strong",[v._v("存储与更新")]),v._v("：\n注册中心接收请求后，将元数据存储在内存或持久化存储（如 ZooKeeper 的节点）中，并维护服务列表。若服务状态变更（如下线），需主动通知注册中心更新或删除记录。")]),v._v(" "),t("li",[t("strong",[v._v("健康检查")]),v._v("：\n注册中心通过 "),t("strong",[v._v("心跳机制")]),v._v(" 或 "),t("strong",[v._v("主动探测")]),v._v(" 验证服务提供者的存活状态。若提供者超过一定时间未发送心跳，注册中心会标记服务为 “不可用” 并从列表中剔除，避免消费者调用失效服务。")])]),v._v(" "),t("blockquote",[t("p",[v._v("“服务提供者启动时，会将自身 IP、端口等信息注册到 ZooKeeper（举例），在 /providers 节点下创建临时节点存储元数据。注册中心通过监听节点变化感知服务上下线，并通过心跳检测确保服务可用。”")])]),v._v(" "),t("p",[t("strong",[v._v("服务发现流程")])]),v._v(" "),t("ol",[t("li",[t("strong",[v._v("消费者请求")]),v._v("：\n服务消费者启动时，向注册中心发起 "),t("strong",[v._v("服务发现请求")]),v._v("，指定所需服务的名称（如 “user-service”）。")]),v._v(" "),t("li",[t("strong",[v._v("获取服务列表")]),v._v("：\n注册中心返回该服务对应的所有可用提供者的元数据（IP、端口等），通常以 "),t("strong",[v._v("列表形式")]),v._v(" 提供。")]),v._v(" "),t("li",[t("strong",[v._v("本地缓存与更新")]),v._v("：\n消费者将服务列表缓存到本地，避免每次调用都访问注册中心，提升性能。注册中心通过 "),t("strong",[v._v("长连接")]),v._v(" 或 "),t("strong",[v._v("事件监听")]),v._v("（如 ZooKeeper 的 Watch 机制）主动推送服务变更通知，确保消费者缓存实时更新。")]),v._v(" "),t("li",[t("strong",[v._v("负载均衡")]),v._v("：\n消费者从缓存的服务列表中，通过负载均衡策略（如轮询、随机、权重等）选择一个提供者发起调用。")])]),v._v(" "),t("blockquote",[t("p",[v._v("“消费者启动时向 Nacos（举例）请求获取‘order-service’的可用实例列表，缓存到本地后，通过轮询策略选择一台提供者发起 RPC 调用。当注册中心检测到某提供者下线时，会通过事件通知消费者更新缓存，剔除不可用实例。”")])]),v._v(" "),t("h3",{attrs:{id:"cap理论在rpc中的应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cap理论在rpc中的应用"}},[v._v("#")]),v._v(" "),t("strong",[v._v("CAP理论在RPC中的应用？")])]),v._v(" "),t("p",[v._v("CAP理论指出分布式系统无法同时满足一致性（Consistency）、可用性（Availability）、分区容错性（Partition Tolerance），需根据业务权衡：")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("Zookeeper")]),v._v("：CP系统，保证数据一致性，网络分区时拒绝写请求。")]),v._v(" "),t("li",[v._v("Eureka：AP系统，优先保证可用性，容忍网络分区，但可能返回旧数据。")])]),v._v(" "),t("p",[t("strong",[v._v("RPC选型建议")]),v._v("：")]),v._v(" "),t("ul",[t("li",[v._v("对一致性要求高（如金融交易）：选择Zookeeper作为注册中心。")]),v._v(" "),t("li",[v._v("对可用性要求高（如高并发Web服务）：选择Eureka或Nacos")])])])}),[],!1,null,null,null);_.default=o.exports}}]);