(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{588:function(_,v,t){"use strict";t.r(v);var r=t(2),d=Object(r.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("p",[t("img",{attrs:{src:"https://cdn.pixabay.com/photo/2020/04/23/18/41/light-5083606_1280.jpg",alt:""}})]),_._v(" "),t("blockquote",[t("p",[_._v("数据库的设计三范式:")]),_._v(" "),t("ul",[t("li",[_._v("1NF：字段不可分。第一范式要求数据原子化")]),_._v(" "),t("li",[_._v("2NF：唯一性 一个表只说明一个事物。有主键，非主键字段依赖主键。第二范式消除部分依赖")]),_._v(" "),t("li",[_._v("3NF：非主键字段不能相互依赖。第三范式消除传递依赖，从而提高数据的完整性和一致性")])])]),_._v(" "),t("p",[_._v("在当今信息化时代，数据库已经成为各行各业中不可或缺的一部分。从小型应用到企业级系统，数据库都在背后默默支撑着数据的存储、管理与分析。而在数据库设计中，"),t("strong",[_._v("三范式")]),_._v("（3NF）是关系型数据库模型设计中最为基础和重要的规范化原则之一。三范式的核心目标是通过规范化数据库的结构，减少冗余数据，增强数据一致性和完整性，避免更新异常，确保数据的高效存储与访问。")]),_._v(" "),t("h3",{attrs:{id:"什么是数据库规范化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是数据库规范化"}},[_._v("#")]),_._v(" 什么是数据库规范化？")]),_._v(" "),t("p",[_._v("数据库规范化（Normalization）是指对数据库表的设计进行优化的过程，通过一系列规则来消除冗余数据，并提高数据的组织方式。规范化不仅帮助减少数据的重复性，还确保数据之间的逻辑关系清晰，减少因数据修改引发的不一致问题。")]),_._v(" "),t("p",[_._v("规范化的核心思想是通过分解数据库表，降低数据冗余性和依赖性。在实际操作中，数据库规范化通常分为多个阶段，称为"),t("strong",[_._v("范式")]),_._v("。每一范式都是在前一范式的基础上进一步精化和完善的。三范式是数据库设计中最为基础且常用的范式，它通过消除部分依赖和传递依赖等问题，保证数据库的高效性与一致性。")]),_._v(" "),t("h3",{attrs:{id:"第一范式-1nf"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第一范式-1nf"}},[_._v("#")]),_._v(" 第一范式（1NF）")]),_._v(" "),t("p",[t("strong",[_._v("第一范式")]),_._v("是数据库规范化的最基础范式，它的要求是："),t("strong",[_._v("表中的每个列必须包含原子值，即每个字段只能存储不可再分的单一数据单元")]),_._v("。简而言之，1NF 要求每个列的数据必须是“原子的”，也就是没有重复数据和多值属性。")]),_._v(" "),t("h4",{attrs:{id:"_1nf的具体要求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1nf的具体要求"}},[_._v("#")]),_._v(" 1NF的具体要求：")]),_._v(" "),t("ol",[t("li",[_._v("每列中的数据必须是不可分割的单一数据项。")]),_._v(" "),t("li",[_._v("每一行必须唯一，不允许有重复的记录。")]),_._v(" "),t("li",[_._v("表中的每个字段都必须具有唯一的标识符（即主键）。")])]),_._v(" "),t("p",[t("strong",[_._v("示例")]),_._v("： 假设我们有一个学生信息表，如下所示：")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("学生ID")]),_._v(" "),t("th",[_._v("姓名")]),_._v(" "),t("th",[_._v("电话号码")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("1")]),_._v(" "),t("td",[_._v("张三")]),_._v(" "),t("td",[_._v("1234567890, 0987654321")])]),_._v(" "),t("tr",[t("td",[_._v("2")]),_._v(" "),t("td",[_._v("李四")]),_._v(" "),t("td",[_._v("1357924680, 2468013579")])])])]),_._v(" "),t("p",[_._v('从上表可以看出，"电话号码"字段存储了多个值，违反了1NF。要满足1NF要求，电话号码字段应拆分为多行或多列，像这样：')]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("学生ID")]),_._v(" "),t("th",[_._v("姓名")]),_._v(" "),t("th",[_._v("电话号码")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("1")]),_._v(" "),t("td",[_._v("张三")]),_._v(" "),t("td",[_._v("1234567890")])]),_._v(" "),t("tr",[t("td",[_._v("1")]),_._v(" "),t("td",[_._v("张三")]),_._v(" "),t("td",[_._v("0987654321")])]),_._v(" "),t("tr",[t("td",[_._v("2")]),_._v(" "),t("td",[_._v("李四")]),_._v(" "),t("td",[_._v("1357924680")])]),_._v(" "),t("tr",[t("td",[_._v("2")]),_._v(" "),t("td",[_._v("李四")]),_._v(" "),t("td",[_._v("2468013579")])])])]),_._v(" "),t("p",[_._v("这样，每个字段就变成了原子值，符合了1NF的要求。")]),_._v(" "),t("h3",{attrs:{id:"第二范式-2nf"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第二范式-2nf"}},[_._v("#")]),_._v(" 第二范式（2NF）")]),_._v(" "),t("p",[_._v("第二范式建立在第一范式的基础之上，要求"),t("strong",[_._v("消除部分依赖")]),_._v("。具体而言，2NF要求表中的所有非主属性（即不参与主键的字段）必须完全依赖于主键，而不能仅依赖于主键的一部分。换句话说，表中的每一个非主属性必须依赖于完整的主键，而不是主键的某一部分。")]),_._v(" "),t("h4",{attrs:{id:"_2nf的要求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2nf的要求"}},[_._v("#")]),_._v(" 2NF的要求：")]),_._v(" "),t("ol",[t("li",[_._v("表必须满足1NF。")]),_._v(" "),t("li",[_._v("表中的每个非主键列必须完全依赖于整个主键。")]),_._v(" "),t("li",[_._v("如果表有复合主键（由多个列组成的主键），则不能有部分依赖。")])]),_._v(" "),t("p",[t("strong",[_._v("示例")]),_._v("： 考虑以下的订单表：")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("订单ID")]),_._v(" "),t("th",[_._v("产品ID")]),_._v(" "),t("th",[_._v("产品名称")]),_._v(" "),t("th",[_._v("数量")]),_._v(" "),t("th",[_._v("单价")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("1")]),_._v(" "),t("td",[_._v("101")]),_._v(" "),t("td",[_._v("手机")]),_._v(" "),t("td",[_._v("2")]),_._v(" "),t("td",[_._v("2000")])]),_._v(" "),t("tr",[t("td",[_._v("1")]),_._v(" "),t("td",[_._v("102")]),_._v(" "),t("td",[_._v("耳机")]),_._v(" "),t("td",[_._v("1")]),_._v(" "),t("td",[_._v("500")])]),_._v(" "),t("tr",[t("td",[_._v("2")]),_._v(" "),t("td",[_._v("101")]),_._v(" "),t("td",[_._v("手机")]),_._v(" "),t("td",[_._v("1")]),_._v(" "),t("td",[_._v("2000")])])])]),_._v(" "),t("p",[_._v("在这个例子中，复合主键由"),t("strong",[_._v("订单ID")]),_._v("和"),t("strong",[_._v("产品ID")]),_._v("组成。虽然"),t("strong",[_._v("产品名称")]),_._v("只依赖于"),t("strong",[_._v("产品ID")]),_._v("，但它却被存储在了当前的表中，这种依赖关系违反了2NF。我们可以通过拆分表格来消除部分依赖：")]),_._v(" "),t("p",[t("strong",[_._v("订单表：")])]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("订单ID")]),_._v(" "),t("th",[_._v("产品ID")]),_._v(" "),t("th",[_._v("数量")]),_._v(" "),t("th",[_._v("单价")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("1")]),_._v(" "),t("td",[_._v("101")]),_._v(" "),t("td",[_._v("2")]),_._v(" "),t("td",[_._v("2000")])]),_._v(" "),t("tr",[t("td",[_._v("1")]),_._v(" "),t("td",[_._v("102")]),_._v(" "),t("td",[_._v("1")]),_._v(" "),t("td",[_._v("500")])]),_._v(" "),t("tr",[t("td",[_._v("2")]),_._v(" "),t("td",[_._v("101")]),_._v(" "),t("td",[_._v("1")]),_._v(" "),t("td",[_._v("2000")])])])]),_._v(" "),t("p",[t("strong",[_._v("产品表：")])]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("产品ID")]),_._v(" "),t("th",[_._v("产品名称")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("101")]),_._v(" "),t("td",[_._v("手机")])]),_._v(" "),t("tr",[t("td",[_._v("102")]),_._v(" "),t("td",[_._v("耳机")])])])]),_._v(" "),t("p",[_._v("通过这样的拆分，我们确保了所有非主键字段完全依赖于复合主键，符合了2NF。")]),_._v(" "),t("h3",{attrs:{id:"第三范式-3nf"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第三范式-3nf"}},[_._v("#")]),_._v(" 第三范式（3NF）")]),_._v(" "),t("p",[_._v("第三范式是在第二范式的基础上进一步规范化，它要求消除"),t("strong",[_._v("传递依赖")]),_._v("。传递依赖是指某个非主键列依赖于另一个非主键列，而这个非主键列又依赖于主键。换句话说，第三范式要求表中的每个非主属性都直接依赖于主键，而不是间接依赖。")]),_._v(" "),t("h4",{attrs:{id:"_3nf的要求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3nf的要求"}},[_._v("#")]),_._v(" 3NF的要求：")]),_._v(" "),t("ol",[t("li",[_._v("表必须满足2NF。")]),_._v(" "),t("li",[_._v("表中的每个非主键列必须直接依赖于主键，不能依赖于其他非主键列。")])]),_._v(" "),t("p",[t("strong",[_._v("示例")]),_._v("： 考虑以下员工表：")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("员工ID")]),_._v(" "),t("th",[_._v("部门ID")]),_._v(" "),t("th",[_._v("部门名称")]),_._v(" "),t("th",[_._v("部门经理")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("1")]),_._v(" "),t("td",[_._v("101")]),_._v(" "),t("td",[_._v("销售部")]),_._v(" "),t("td",[_._v("王经理")])]),_._v(" "),t("tr",[t("td",[_._v("2")]),_._v(" "),t("td",[_._v("102")]),_._v(" "),t("td",[_._v("技术部")]),_._v(" "),t("td",[_._v("张经理")])])])]),_._v(" "),t("p",[_._v("在这个例子中，"),t("strong",[_._v("部门名称")]),_._v("和"),t("strong",[_._v("部门经理")]),_._v("依赖于"),t("strong",[_._v("部门ID")]),_._v("，而"),t("strong",[_._v("部门ID")]),_._v("又依赖于"),t("strong",[_._v("员工ID")]),_._v("，这就构成了传递依赖。为了满足3NF，我们应该将部门相关信息提取到单独的表中：")]),_._v(" "),t("p",[t("strong",[_._v("员工表：")])]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("员工ID")]),_._v(" "),t("th",[_._v("部门ID")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("1")]),_._v(" "),t("td",[_._v("101")])]),_._v(" "),t("tr",[t("td",[_._v("2")]),_._v(" "),t("td",[_._v("102")])])])]),_._v(" "),t("p",[t("strong",[_._v("部门表：")])]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("部门ID")]),_._v(" "),t("th",[_._v("部门名称")]),_._v(" "),t("th",[_._v("部门经理")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("101")]),_._v(" "),t("td",[_._v("销售部")]),_._v(" "),t("td",[_._v("王经理")])]),_._v(" "),t("tr",[t("td",[_._v("102")]),_._v(" "),t("td",[_._v("技术部")]),_._v(" "),t("td",[_._v("张经理")])])])]),_._v(" "),t("p",[_._v("通过这样的拆分，我们消除了传递依赖，确保了表符合3NF的要求。")]),_._v(" "),t("h3",{attrs:{id:"规范化的优点与实际应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#规范化的优点与实际应用"}},[_._v("#")]),_._v(" 规范化的优点与实际应用")]),_._v(" "),t("p",[_._v("数据库规范化的主要优点是减少冗余数据，提高数据的一致性和完整性。通过规范化，数据的修改操作变得更加简便，不容易出现更新异常，例如"),t("strong",[_._v("插入异常")]),_._v("、"),t("strong",[_._v("删除异常")]),_._v("和"),t("strong",[_._v("更新异常")]),_._v("。")]),_._v(" "),t("p",[_._v("然而，在实际应用中，数据库设计并非总是严格遵循最高范式。过度规范化可能会导致表的拆分过多，从而影响查询性能。在这种情况下，数据库设计师可能会选择在一定程度上"),t("strong",[_._v("反规范化")]),_._v("，即故意增加一些冗余数据，以提高查询效率。")]),_._v(" "),t("h3",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[_._v("#")]),_._v(" 总结")]),_._v(" "),t("p",[_._v("数据库的三范式是关系型数据库设计的基础，它通过消除数据冗余和不必要的依赖关系，帮助提高数据的一致性和完整性。第一范式要求数据原子化，第二范式消除部分依赖，而第三范式消除传递依赖。在实际的数据库设计中，三范式为我们提供了科学的规范化思路，但在一些特定场景下，可能需要适当进行反规范化来优化查询性能。")]),_._v(" "),t("p",[_._v("了解并掌握三范式的概念，能帮助开发人员在设计数据库时做出更加高效且一致的决策，提升数据库系统的整体性能和可维护性。")])])}),[],!1,null,null,null);v.default=d.exports}}]);